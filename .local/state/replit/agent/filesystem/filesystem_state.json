{"file_contents":{"DEPLOYMENT.md":{"content":"# Deployment Guide for Meow Meow Pet Shop\n\n## Password Reset Configuration\n\n### Current Situation\nThe password reset feature is currently experiencing issues in the Replit development environment due to localhost URL conflicts. However, **this will work perfectly when deployed to your own domain**.\n\n### How It Works\n1. **Development Environment**: The system tries to detect the Replit domain automatically, but this can be unreliable due to how Replit handles internal vs external URLs.\n\n2. **Production Environment**: When deployed to your own domain (e.g., `https://yourpetshop.com`), the password reset will work flawlessly because:\n   - The system uses `window.location.origin` which will be your actual domain\n   - Supabase will send emails with links pointing to your domain\n   - No localhost/development URL conflicts\n\n### Deployment Steps\n1. **Set up your domain** (e.g., Vercel, Netlify, or your hosting provider)\n2. **Configure Supabase** in production:\n   - Update your Supabase project settings\n   - Add your production domain to the allowed redirect URLs\n   - Set the environment variables on your hosting platform\n3. **Deploy the application** to your domain\n4. **Test the password reset** - it will work correctly\n\n### Environment Variables Needed for Production\n```\nVITE_SUPABASE_URL=your_supabase_project_url\nVITE_SUPABASE_ANON_KEY=your_supabase_anon_key\nDATABASE_URL=your_postgresql_connection_string\n```\n\n### Supabase Configuration for Production\n1. Go to your Supabase dashboard\n2. Navigate to Authentication > URL Configuration\n3. Add your production domain to \"Redirect URLs\"\n4. The password reset will automatically use your domain\n\n### Why It Will Work on Your Domain\n- No localhost conflicts\n- Proper HTTPS URLs\n- Standard web hosting environment\n- Supabase designed for production domains\n\nThe password reset feature is fully implemented and ready for production deployment.","size_bytes":1903},"README.md":{"content":"# Meow Meow Pet Shop - E-commerce Application\n\nA full-stack e-commerce application for pet products built with React, TypeScript, Express, and PostgreSQL.\n\n## Features\n\n- 🛍️ Complete e-commerce functionality\n- 🐱 Pet product categories (Cat Food, Dog Food, Toys, Grooming, Health Care, Accessories)\n- 🔐 User authentication with Supabase\n- 📱 Responsive design with mobile-first approach\n- 🎨 Modern UI with Tailwind CSS and shadcn/ui components\n- 💾 PostgreSQL database with Drizzle ORM\n- 🔍 Product search, filtering, and sorting\n- ⭐ Product ratings and reviews\n- 📊 Analytics dashboard\n\n## Quick Start on Replit\n\n1. **Fork/Import this repository** to your Replit account\n\n2. **Set up Database**:\n   - The PostgreSQL database will be automatically provisioned\n   - Run `npm run db:push` to set up the database schema\n\n3. **Configure Supabase Authentication**:\n   \n   **For this specific project, use these credentials:**\n   - Add these secrets in Replit (Tools > Secrets):\n     - `VITE_SUPABASE_URL`: `https://ghqivevrwfkmdmduyjzv.supabase.co`\n     - `VITE_SUPABASE_ANON_KEY`: `eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdocWl2ZXZyd2ZrbWRtZHV5anp2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM0NjAwODUsImV4cCI6MjA2OTAzNjA4NX0.FfQ8WT_ZKzAD5-mnAwrzX_F0JtHDjVdCxhB1y2M3aaY`\n   \n   **For your own projects:**\n   - Create a free account at [supabase.com](https://supabase.com)\n   - Create a new project and get your own credentials\n\n4. **Start the application**:\n   ```bash\n   npm run dev\n   ```\n\nThe application will be available at the provided Replit URL.\n\n## Development\n\n### Project Structure\n```\n├── client/          # Frontend React application\n├── server/          # Backend Express server\n├── shared/          # Shared types and schemas\n├── attached_assets/ # Static assets and images\n└── migrations/      # Database migration files\n```\n\n### Available Scripts\n\n- `npm run dev` - Start development server (frontend + backend)\n- `npm run build` - Build for production\n- `npm start` - Start production server\n- `npm run db:push` - Push database schema changes\n\n### Tech Stack\n\n**Frontend:**\n- React 18 with TypeScript\n- Wouter for routing\n- Tailwind CSS + shadcn/ui components\n- TanStack Query for state management\n- React Hook Form + Zod validation\n\n**Backend:**\n- Node.js + Express.js\n- TypeScript with ES modules\n- Drizzle ORM for database operations\n- PostgreSQL database\n\n**Authentication:**\n- Supabase Auth for user management\n\n## Environment Variables\n\nCopy `.env.example` to `.env` and fill in your values:\n\n- `DATABASE_URL` - PostgreSQL connection string (auto-provided on Replit)\n- `VITE_SUPABASE_URL` - Your Supabase project URL\n- `VITE_SUPABASE_ANON_KEY` - Your Supabase anon key\n\n## Deployment\n\nThis application is optimized for Replit deployment. For other platforms:\n\n1. Build the application: `npm run build`\n2. Set all required environment variables\n3. Start with: `npm start`\n\n## Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Make your changes\n4. Test thoroughly\n5. Submit a pull request\n\n## License\n\nThis project is licensed under the MIT License.","size_bytes":3158},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Meow Meow Pet Shop - E-commerce Application\n\n## Overview\n\nThis is a full-stack e-commerce application for Meow Meow Pet Shop, a pet store based in Savar, Bangladesh. The application provides a complete online shopping experience for pet products including food, toys, grooming supplies, and accessories for cats and dogs.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\nThe application follows a modern full-stack architecture with clear separation between frontend and backend components:\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Routing**: Wouter for client-side routing\n- **Styling**: Tailwind CSS with custom design system\n- **UI Components**: shadcn/ui component library with Radix UI primitives\n- **State Management**: TanStack Query for server state management\n- **Build Tool**: Vite for development and production builds\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful API structure\n- **Development**: Hot module replacement with Vite integration\n\n### Database Architecture\n- **ORM**: Drizzle ORM for type-safe database operations\n- **Database**: PostgreSQL (configured for Neon serverless)\n- **Schema**: Centralized schema definition in shared directory\n- **Migrations**: Drizzle Kit for database migrations\n\n## Key Components\n\n### Directory Structure\n```\n├── client/          # Frontend React application\n├── server/          # Backend Express server\n├── shared/          # Shared types and schemas\n├── attached_assets/ # Static assets and images\n└── migrations/      # Database migration files\n```\n\n### Frontend Components\n- **Layout Components**: Header with top strip, main navigation, sidebar, and footer\n- **Section Components**: Hero banner, product listings, categories, testimonials\n- **UI Components**: Reusable components built on shadcn/ui\n- **Custom Components**: Product cards, countdown timers, carousels\n\n### Backend Components\n- **Routes**: RESTful API endpoints for categories, brands, products, blog posts\n- **Storage Layer**: Abstract storage interface with in-memory implementation\n- **Server Setup**: Express middleware configuration and error handling\n\n### Shared Components\n- **Schema**: Drizzle schema definitions for all database tables\n- **Types**: TypeScript type definitions exported from schema\n\n## Data Flow\n\n1. **Client Requests**: React components use TanStack Query to fetch data\n2. **API Layer**: Express routes handle HTTP requests and validate input\n3. **Storage Layer**: Abstract storage interface processes business logic\n4. **Database**: Drizzle ORM executes type-safe database queries\n5. **Response**: JSON data flows back through the same layers\n\nThe application uses a query-first approach where the frontend drives data requirements, and the backend provides a clean API interface.\n\n## External Dependencies\n\n### Frontend Dependencies\n- **UI Framework**: React ecosystem with hooks and modern patterns\n- **Styling**: Tailwind CSS with PostCSS processing\n- **Icons**: Lucide React for consistent iconography\n- **Forms**: React Hook Form with Zod validation\n- **Date Handling**: date-fns for date manipulation\n\n### Backend Dependencies\n- **Database**: Neon serverless PostgreSQL\n- **ORM**: Drizzle ORM with PostgreSQL dialect\n- **Validation**: Zod for runtime type checking\n- **Session Management**: PostgreSQL session store\n\n### Development Dependencies\n- **Build Tools**: Vite with React plugin\n- **TypeScript**: Full TypeScript support across the stack\n- **Development**: Hot reload and error overlay for development experience\n\n## Deployment Strategy\n\n### Build Process\n1. **Frontend Build**: Vite compiles React app to static assets in `dist/public`\n2. **Backend Build**: esbuild bundles server code to `dist/index.js`\n3. **Database**: Drizzle migrations ensure schema consistency\n\n### Environment Configuration\n- **Development**: Uses Vite dev server with Express API proxy\n- **Production**: Serves static files from Express with API routes\n- **Database**: Environment variable `DATABASE_URL` for connection\n\n### Scripts\n- `npm run dev`: Development mode with hot reload\n- `npm run build`: Production build for both frontend and backend\n- `npm start`: Production server startup\n- `npm run db:push`: Database schema synchronization\n\nThe application is designed for easy deployment to platforms like Replit, Vercel, or traditional hosting providers with Node.js support.\n\n## Recent Updates (January 28, 2025)\n\n### Complete E-commerce Implementation with Enhanced Navigation\n- **Custom Green Scroll Bar**: Implemented polished vertical scroll bar styling across the entire website\n- **Comprehensive Page Structure**: Created 7 new pages - Privilege Club, Cat Food, Dog Food, Cat Toys, Cat Litter, Reflex Brand, and Blog\n- **Advanced Search System**: Built global search functionality that searches across all products from all categories\n- **Product Segmentation**: Each category page includes proper segments (e.g., Cat Food has Adult Food, Cat Pouches, Dry Food, etc.)\n- **Enhanced Header Navigation**: Complete navigation menu with dropdown categories and mobile-responsive design\n\n### New Pages and Features\n- **Privilege Club**: Membership page with three tiers (Silver Paw, Golden Paw, Diamond Paw) featuring benefits and pricing\n- **Cat Food Page**: 13 product segments including Adult Food, Cat Pouches, Dry Food, Kitten Food, etc.\n- **Dog Food Page**: 9 product segments including Puppy Food, Adult Food, Health Supplements, etc.\n- **Cat Toys Page**: 12 toy categories including Interactive Toys, Feather Toys, Cat Trees, etc.\n- **Cat Litter Page**: 9 categories including Clumping Litter, Litter Boxes, Accessories, etc.\n- **Reflex Brand Page**: Dedicated brand page showcasing premium pet food products\n- **Blog Page**: Pet care blog with categories, featured articles, and newsletter signup\n\n### Technical Enhancements\n- **Global Search Data**: Comprehensive search database with 30+ products across all categories\n- **Search Functionality**: Real-time search with dropdown results showing product details and direct navigation\n- **Mobile Navigation**: Collapsible mobile menu with category sub-items\n- **Responsive Design**: All new pages are fully mobile-responsive with consistent styling\n- **Enhanced UI Components**: Professional product cards, filtering systems, and category navigation\n\n### Migration and Configuration Improvements\n- **GitHub Import Optimization**: Removed hardcoded credentials and added proper environment variable handling\n- **Configuration Files**: Added .env.example, comprehensive README.md, and setup.md for easy project setup\n- **Error Handling**: Improved Supabase configuration with clear error messages for missing environment variables\n- **Documentation**: Created detailed setup guide for GitHub imports and troubleshooting\n\n## Previous Updates (January 25, 2025)\n\n### Product Page System Implementation\n- **Full-fledged Product Pages**: Complete e-commerce product browsing system with 6 categories (Cat Food, Dog Food, Toys & Treats, Grooming, Health Care, Accessories)\n- **Collapsible Sidebar Navigation**: Mobile-responsive sidebar with category filtering and smooth animations\n- **Supabase Authentication**: Complete user authentication system with sign up, sign in, sign out, and session persistence\n- **Analytics Dashboard**: Lightweight analytics showing lowest/highest priced items, highest rated products, and best sellers\n- **Advanced Product Features**: Search, filtering, sorting, grid/list view modes, product ratings, stock status, and pricing\n- **Responsive Design**: Mobile-first design with collapsible navigation and adaptive layouts\n\n### Architecture Enhancements\n- **Product Data Management**: MongoDB-ready JSON structure with comprehensive product information\n- **Component Architecture**: Modular components for CollapsibleSidebar, ProductCard, AnalyticsBar, and AuthModal\n- **State Management**: React hooks for authentication state and product filtering\n- **Animation System**: Custom CSS animations for fade-in, slide-up, hover effects, and smooth transitions\n\n### Key Architectural Decisions\n\n1. **Monorepo Structure**: Keeps frontend, backend, and shared code in one repository for easier development and deployment\n2. **TypeScript Throughout**: Ensures type safety across the entire application stack\n3. **Drizzle ORM**: Chosen for its TypeScript-first approach and lightweight footprint\n4. **shadcn/ui**: Provides high-quality, customizable components while maintaining design consistency\n5. **Shared Schema**: Central source of truth for data models reduces duplication and ensures consistency\n6. **Abstract Storage**: Allows for easy testing and potential database switching without changing business logic\n7. **Supabase Integration**: Centralized authentication service with environment variable configuration\n8. **Component-Based Product System**: Reusable components for scalable product catalog management","size_bytes":9062},"setup.md":{"content":"# Meow Meow Pet Shop - Setup Guide\n\n## Quick Setup for GitHub Imports\n\nWhen importing this project from GitHub to Replit, follow these steps:\n\n### 1. Automatic Setup\nMost dependencies and database setup will be handled automatically by Replit.\n\n### 2. Required Environment Variables\n\n**Option A: Using Replit Secrets (Recommended)**\nAdd these secrets in Replit (Tools > Secrets):\n- `VITE_SUPABASE_URL` = `https://ghqivevrwfkmdmduyjzv.supabase.co`\n- `VITE_SUPABASE_ANON_KEY` = `eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdocWl2ZXZyd2ZrbWRtZHV5anp2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM0NjAwODUsImV4cCI6MjA2OTAzNjA4NX0.FfQ8WT_ZKzAD5-mnAwrzX_F0JtHDjVdCxhB1y2M3aaY`\n\n**Option B: Using .env file (Local development)**\nIf working locally, copy the values from `.env.example` to create a `.env` file.\n\n**Note:** Database credentials are automatically provided by Replit when you provision a PostgreSQL database.\n\n### 3. Get Supabase Credentials\n1. Go to [supabase.com](https://supabase.com) and create a free account\n2. Create a new project\n3. Go to Settings > API in your dashboard\n4. Copy the \"Project URL\" → `VITE_SUPABASE_URL`\n5. Copy the \"anon public\" key → `VITE_SUPABASE_ANON_KEY`\n\n### 4. Initialize Database\nRun this command to set up the database schema:\n```bash\nnpm run db:push\n```\n\n### 5. Start Application\n```bash\nnpm run dev\n```\n\n## Troubleshooting\n\n**Error: \"supabaseUrl is required\"**\n- Make sure you've added both `VITE_SUPABASE_URL` and `VITE_SUPABASE_ANON_KEY` to Replit secrets\n- Restart the application after adding secrets\n\n**Database connection issues**\n- Replit automatically provisions PostgreSQL databases\n- Check that `DATABASE_URL` is set in environment variables\n\n**Import/Build errors**\n- Run `npm install` to ensure all dependencies are installed\n- Check that Node.js version is compatible (18+ recommended)\n\n## Development Notes\n\n- The project uses TypeScript throughout\n- Frontend runs on Vite dev server\n- Backend runs on Express\n- Database uses Drizzle ORM with PostgreSQL\n- Authentication handled by Supabase\n\n## File Structure\n```\n├── client/src/          # React frontend\n├── server/              # Express backend  \n├── shared/schema.ts     # Database schema\n├── attached_assets/     # Static assets\n└── migrations/          # DB migration files\n```","size_bytes":2339},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import dotenv from \"dotenv\";\ndotenv.config();\n\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { createAdminAccount } from \"./admin-setup\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Create admin account on server start\n  await createAdminAccount();\n  \n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen(port, \"0.0.0.0\", () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2198},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, users } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq } from \"drizzle-orm\";\nimport bcrypt from \"bcrypt\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Categories API\n  app.get(\"/api/categories\", async (req, res) => {\n    try {\n      const categories = await storage.getCategories();\n      res.json(categories);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch categories\" });\n    }\n  });\n\n  // Products API\n  app.get(\"/api/products\", async (req, res) => {\n    try {\n      const products = await storage.getProducts();\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  // Middleware to check admin access\n  const requireAdmin = async (req: any, res: any, next: any) => {\n    const { userId } = req.body;\n    \n    if (!userId) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n\n    try {\n      const [user] = await db.select().from(users).where(eq(users.id, userId));\n      \n      if (!user || user.role !== \"admin\") {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      req.adminUser = user;\n      next();\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\" });\n    }\n  };\n\n  // Authentication Routes\n  const registerSchema = insertUserSchema.extend({\n    confirmPassword: z.string(),\n  }).refine((data) => data.password === data.confirmPassword, {\n    message: \"Passwords don't match\",\n    path: [\"confirmPassword\"],\n  });\n\n  const loginSchema = z.object({\n    email: z.string().email(),\n    password: z.string().min(6),\n  });\n\n  // Register new user\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const result = registerSchema.safeParse(req.body);\n      if (!result.success) {\n        return res.status(400).json({ \n          message: \"Validation failed\", \n          errors: result.error.flatten().fieldErrors \n        });\n      }\n\n      const { confirmPassword, ...userData } = result.data;\n\n      // Check if user already exists\n      const existingUser = userData.email ? await storage.getUserByEmail(userData.email) : null;\n      if (existingUser) {\n        return res.status(409).json({ message: \"User already exists with this email\" });\n      }\n\n      // Check if username is taken\n      const existingUsername = await storage.getUserByUsername(userData.username);\n      if (existingUsername) {\n        return res.status(409).json({ message: \"Username is already taken\" });\n      }\n\n      // Hash password\n      const hashedPassword = await bcrypt.hash(userData.password, 12);\n\n      // Create user\n      const user = await storage.createUser({\n        ...userData,\n        password: hashedPassword,\n      });\n\n      // Remove password from response\n      const { password, ...userResponse } = user;\n\n      res.status(201).json({ \n        message: \"User created successfully\", \n        user: userResponse \n      });\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Login user\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const result = loginSchema.safeParse(req.body);\n      if (!result.success) {\n        return res.status(400).json({ \n          message: \"Validation failed\", \n          errors: result.error.flatten().fieldErrors \n        });\n      }\n\n      const { email, password } = result.data;\n\n      // Find user by email or username (for admin account)\n      let user = await storage.getUserByEmail(email);\n      \n      // If not found by email, try username (for admin login)\n      if (!user) {\n        const [userByUsername] = await db.select().from(users).where(eq(users.username, email));\n        user = userByUsername;\n      }\n      \n      if (!user) {\n        return res.status(401).json({ message: \"Invalid email or password\" });\n      }\n\n      // Check password\n      const isValidPassword = await bcrypt.compare(password, user.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: \"Invalid email or password\" });\n      }\n\n      // Remove password from response\n      const { password: _, ...userResponse } = user;\n\n      res.json({ \n        message: \"Login successful\", \n        user: userResponse \n      });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get user profile\n  app.get(\"/api/auth/profile/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const user = await storage.getUser(id);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Remove password from response\n      const { password, ...userResponse } = user;\n      res.json(userResponse);\n    } catch (error) {\n      console.error(\"Profile error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Update user profile\n  app.patch(\"/api/auth/profile/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updateData = req.body;\n\n      // Don't allow password updates through this endpoint\n      delete updateData.password;\n      delete updateData.id;\n\n      const user = await storage.updateUser(id, updateData);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Remove password from response\n      const { password, ...userResponse } = user;\n      res.json({ \n        message: \"Profile updated successfully\", \n        user: userResponse \n      });\n    } catch (error) {\n      console.error(\"Profile update error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Admin Routes\n  app.post(\"/api/admin/stats\", async (req, res) => {\n    try {\n      const { userId } = req.body;\n      \n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const [user] = await db.select().from(users).where(eq(users.id, userId));\n      \n      if (!user || user.role !== \"admin\") {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const allUsers = await db.select().from(users);\n      \n      res.json({\n        totalUsers: allUsers.length,\n        totalOrders: 0,\n        totalRevenue: 0,\n        totalProducts: 4\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch admin stats\" });\n    }\n  });\n\n  app.post(\"/api/admin/users\", async (req, res) => {\n    try {\n      const { userId } = req.body;\n      \n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const [user] = await db.select().from(users).where(eq(users.id, userId));\n      \n      if (!user || user.role !== \"admin\") {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const allUsers = await db.select().from(users);\n      const usersWithoutPasswords = allUsers.map(({ password, ...user }) => user);\n      res.json(usersWithoutPasswords);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.delete(\"/api/admin/users/:userId\", async (req, res) => {\n    try {\n      const { userId: targetUserId } = req.params;\n      const { userId } = req.body;\n      \n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const [adminUser] = await db.select().from(users).where(eq(users.id, userId));\n      \n      if (!adminUser || adminUser.role !== \"admin\") {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      // Prevent deleting admin account\n      const [userToDelete] = await db.select().from(users).where(eq(users.id, targetUserId));\n      if (userToDelete?.role === \"admin\") {\n        return res.status(403).json({ message: \"Cannot delete admin account\" });\n      }\n\n      await db.delete(users).where(eq(users.id, targetUserId));\n      res.json({ message: \"User deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete user\" });\n    }\n  });\n\n  // Image placeholder API\n  app.get(\"/api/placeholder/:width/:height\", (req, res) => {\n    const { width, height } = req.params;\n    const imageUrl = `https://via.placeholder.com/${width}x${height}/26732d/ffffff?text=Pet+Shop`;\n    res.redirect(imageUrl);\n  });\n\n  const server = createServer(app);\n  return server;\n}","size_bytes":8748},"server/storage.ts":{"content":"import { users, type User, type InsertUser } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq } from \"drizzle-orm\";\n\n// Simple storage for the pet shop\ninterface SimpleProduct {\n  id: string;\n  name: string;\n  price: number;\n  category: string;\n  image: string;\n  rating: number;\n  stock: number;\n}\n\ninterface SimpleCategory {\n  id: string;\n  name: string;\n  products: SimpleProduct[];\n}\n\nexport interface IStorage {\n  getCategories(): Promise<SimpleCategory[]>;\n  getProducts(): Promise<SimpleProduct[]>;\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(insertUser: InsertUser): Promise<User>;\n  updateUser(id: string, userData: Partial<InsertUser>): Promise<User | undefined>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  private categories: SimpleCategory[];\n\n  constructor() {\n    this.categories = [\n      {\n        id: 'cat-food',\n        name: 'Cat Food',\n        products: [\n          {\n            id: '1',\n            name: 'Premium Dry Cat Food',\n            price: 1850,\n            category: 'cat-food',\n            image: 'https://images.unsplash.com/photo-1589924691995-400dc9ecc119?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n            rating: 4.8,\n            stock: 50\n          }\n        ]\n      },\n      {\n        id: 'dog-food', \n        name: 'Dog Food',\n        products: [\n          {\n            id: '2',\n            name: 'Premium Dog Kibble',\n            price: 2100,\n            category: 'dog-food',\n            image: 'https://images.unsplash.com/photo-1605568427561-40dd23c2acea?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n            rating: 4.7,\n            stock: 30\n          }\n        ]\n      }\n    ];\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    // Prevent any new admin users from being created\n    const userToInsert = { ...insertUser, role: \"user\" };\n    \n    const [user] = await db\n      .insert(users)\n      .values(userToInsert)\n      .returning();\n    return user;\n  }\n\n  async updateUser(id: string, userData: Partial<InsertUser>): Promise<User | undefined> {\n    const [user] = await db\n      .update(users)\n      .set({ ...userData, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user || undefined;\n  }\n\n  async getCategories(): Promise<SimpleCategory[]> {\n    return this.categories;\n  }\n\n  async getProducts(): Promise<SimpleProduct[]> {\n    return this.categories.flatMap(cat => cat.products);\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":3181},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, boolean, timestamp, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  email: text(\"email\").unique(),\n  firstName: text(\"first_name\"),\n  lastName: text(\"last_name\"),\n  phone: text(\"phone\"),\n  address: jsonb(\"address\"),\n  profilePicture: text(\"profile_picture\"),\n  role: text(\"role\").notNull().default(\"user\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const categories = pgTable(\"categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  slug: text(\"slug\").notNull().unique(),\n  description: text(\"description\"),\n  image: text(\"image\"),\n  parentId: varchar(\"parent_id\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const brands = pgTable(\"brands\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  slug: text(\"slug\").notNull().unique(),\n  logo: text(\"logo\"),\n  description: text(\"description\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  originalPrice: decimal(\"original_price\", { precision: 10, scale: 2 }),\n  categoryId: varchar(\"category_id\").notNull(),\n  brandId: varchar(\"brand_id\").notNull(),\n  image: text(\"image\").notNull(),\n  images: text(\"images\").array(),\n  rating: decimal(\"rating\", { precision: 3, scale: 2 }).default(\"0\"),\n  reviews: integer(\"reviews\").default(0),\n  stockStatus: text(\"stock_status\").notNull().default(\"In Stock\"),\n  stockQuantity: integer(\"stock_quantity\").default(0),\n  tags: text(\"tags\").array(),\n  features: text(\"features\").array(),\n  specifications: jsonb(\"specifications\"),\n  isNew: boolean(\"is_new\").default(false),\n  isBestseller: boolean(\"is_bestseller\").default(false),\n  isOnSale: boolean(\"is_on_sale\").default(false),\n  discount: integer(\"discount\").default(0),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const blogPosts = pgTable(\"blog_posts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  slug: text(\"slug\").notNull().unique(),\n  excerpt: text(\"excerpt\"),\n  content: text(\"content\").notNull(),\n  image: text(\"image\"),\n  author: text(\"author\").notNull(),\n  publishedAt: timestamp(\"published_at\"),\n  tags: text(\"tags\").array(),\n  isPublished: boolean(\"is_published\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const testimonials = pgTable(\"testimonials\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  role: text(\"role\"),\n  location: text(\"location\"),\n  image: text(\"image\"),\n  text: text(\"text\").notNull(),\n  rating: integer(\"rating\").notNull(),\n  isApproved: boolean(\"is_approved\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const orders = pgTable(\"orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  status: text(\"status\").notNull().default(\"Processing\"),\n  total: decimal(\"total\", { precision: 10, scale: 2 }).notNull(),\n  items: jsonb(\"items\").notNull(),\n  shippingAddress: jsonb(\"shipping_address\"),\n  paymentMethod: text(\"payment_method\"),\n  paymentStatus: text(\"payment_status\").default(\"Pending\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCategorySchema = createInsertSchema(categories).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertBrandSchema = createInsertSchema(brands).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertBlogPostSchema = createInsertSchema(blogPosts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTestimonialSchema = createInsertSchema(testimonials).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Category = typeof categories.$inferSelect;\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\n\nexport type Brand = typeof brands.$inferSelect;\nexport type InsertBrand = z.infer<typeof insertBrandSchema>;\n\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\n\nexport type BlogPost = typeof blogPosts.$inferSelect;\nexport type InsertBlogPost = z.infer<typeof insertBlogPostSchema>;\n\nexport type Testimonial = typeof testimonials.$inferSelect;\nexport type InsertTestimonial = z.infer<typeof insertTestimonialSchema>;\n\nexport type Order = typeof orders.$inferSelect;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\n","size_bytes":6112},"client/hooks/use-auth.tsx":{"content":"import { createContext, useContext, useEffect, useState } from 'react'\nimport { onAuthStateChange, type AuthUser } from '@/lib/supabase'\n\ninterface AuthContextType {\n  user: AuthUser | null\n  loading: boolean\n  refreshAuth: () => void\n}\n\nconst AuthContext = createContext<AuthContextType>({\n  user: null,\n  loading: true,\n  refreshAuth: () => {},\n})\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<AuthUser | null>(null)\n  const [loading, setLoading] = useState(true)\n\n  const refreshAuth = () => {\n    // Check localStorage for admin user\n    const storedUser = localStorage.getItem('auth_user')\n    if (storedUser) {\n      try {\n        const parsedUser = JSON.parse(storedUser)\n        setUser(parsedUser)\n      } catch (error) {\n        console.error('Error parsing stored user:', error)\n        localStorage.removeItem('auth_user')\n      }\n    }\n  }\n\n  useEffect(() => {\n    // Check for stored admin user on mount\n    refreshAuth()\n\n    const { data: { subscription } } = onAuthStateChange((user) => {\n      if (user) {\n        setUser({\n          id: user.id,\n          email: user.email!,\n          name: user.user_metadata?.name,\n          firstName: user.user_metadata?.firstName,\n          lastName: user.user_metadata?.lastName\n        })\n      } else {\n        // Check localStorage for admin user when Supabase user is null\n        const storedUser = localStorage.getItem('auth_user')\n        if (storedUser) {\n          try {\n            const parsedUser = JSON.parse(storedUser)\n            setUser(parsedUser)\n          } catch (error) {\n            console.error('Error parsing stored user:', error)\n            localStorage.removeItem('auth_user')\n            setUser(null)\n          }\n        } else {\n          setUser(null)\n        }\n      }\n      setLoading(false)\n    })\n\n    return () => subscription.unsubscribe()\n  }, [])\n\n  return (\n    <AuthContext.Provider value={{ user, loading, refreshAuth }}>\n      {children}\n    </AuthContext.Provider>\n  )\n}\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext)\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider')\n  }\n  return context\n}","size_bytes":2236},"client/hooks/use-cart.tsx":{"content":"import { useState, useEffect, createContext, useContext } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { CartItem, Product } from \"@shared/schema\";\n\ninterface CartContextType {\n  cartItems: CartItem[];\n  cartCount: number;\n  addToCart: (productId: string, quantity?: number) => void;\n  updateQuantity: (itemId: string, quantity: number) => void;\n  removeFromCart: (itemId: string) => void;\n  clearCart: () => void;\n  isLoading: boolean;\n}\n\nconst CartContext = createContext<CartContextType | undefined>(undefined);\n\nexport function CartProvider({ children }: { children: React.ReactNode }) {\n  const [sessionId] = useState(() => {\n    // Generate or get session ID from localStorage\n    let id = localStorage.getItem('session-id');\n    if (!id) {\n      id = Math.random().toString(36).substring(2) + Date.now().toString(36);\n      localStorage.setItem('session-id', id);\n    }\n    return id;\n  });\n\n  const queryClient = useQueryClient();\n\n  const { data: cartItems = [], isLoading } = useQuery({\n    queryKey: ['/api/cart', sessionId],\n    enabled: !!sessionId,\n  });\n\n  const addToCartMutation = useMutation({\n    mutationFn: async ({ productId, quantity = 1 }: { productId: string; quantity?: number }) => {\n      const response = await apiRequest('POST', '/api/cart', {\n        sessionId,\n        productId,\n        quantity,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/cart', sessionId] });\n    },\n  });\n\n  const updateQuantityMutation = useMutation({\n    mutationFn: async ({ itemId, quantity }: { itemId: string; quantity: number }) => {\n      const response = await apiRequest('PUT', `/api/cart/${itemId}`, { quantity });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/cart', sessionId] });\n    },\n  });\n\n  const removeFromCartMutation = useMutation({\n    mutationFn: async (itemId: string) => {\n      const response = await apiRequest('DELETE', `/api/cart/${itemId}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/cart', sessionId] });\n    },\n  });\n\n  const clearCartMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest('DELETE', `/api/cart/session/${sessionId}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/cart', sessionId] });\n    },\n  });\n\n  const cartCount = cartItems.reduce((total: number, item: CartItem) => total + item.quantity, 0);\n\n  const contextValue: CartContextType = {\n    cartItems,\n    cartCount,\n    addToCart: (productId: string, quantity = 1) => {\n      addToCartMutation.mutate({ productId, quantity });\n    },\n    updateQuantity: (itemId: string, quantity: number) => {\n      updateQuantityMutation.mutate({ itemId, quantity });\n    },\n    removeFromCart: (itemId: string) => {\n      removeFromCartMutation.mutate(itemId);\n    },\n    clearCart: () => {\n      clearCartMutation.mutate();\n    },\n    isLoading,\n  };\n\n  return (\n    <CartContext.Provider value={contextValue}>\n      {children}\n    </CartContext.Provider>\n  );\n}\n\nexport function useCart() {\n  const context = useContext(CartContext);\n  if (context === undefined) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n}\n","size_bytes":3494},"client/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/lib/data.ts":{"content":"export interface Product {\n  id: number;\n  name: string;\n  description: string;\n  price: number;\n  originalPrice?: number;\n  category: string;\n  subcategory?: string;\n  brand: string;\n  image: string;\n  images?: string[];\n  rating: number;\n  reviews: number;\n  stockStatus: 'In Stock' | 'Low Stock' | 'Out of Stock';\n  stockQuantity: number;\n  tags: string[];\n  features?: string[];\n  specifications?: { [key: string]: string };\n  isNew?: boolean;\n  isBestseller?: boolean;\n  isOnSale?: boolean;\n  discount?: number;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface Category {\n  id: number;\n  name: string;\n  slug: string;\n  description?: string;\n  image?: string;\n  parentId?: number;\n  isActive: boolean;\n}\n\nexport interface Brand {\n  id: number;\n  name: string;\n  slug: string;\n  logo?: string;\n  description?: string;\n  isActive: boolean;\n}\n\nexport interface BlogPost {\n  id: number;\n  title: string;\n  slug: string;\n  excerpt: string;\n  content: string;\n  image: string;\n  author: string;\n  publishedAt: string;\n  tags: string[];\n  isPublished: boolean;\n}\n\nexport interface Testimonial {\n  id: number;\n  name: string;\n  role: string;\n  location: string;\n  image: string;\n  text: string;\n  rating: number;\n  isApproved: boolean;\n  createdAt: string;\n}\n\n// Sample data for development\nexport const sampleProducts: Product[] = [\n  {\n    id: 1,\n    name: 'Premium Dry Cat Food (5kg)',\n    description: 'High-quality dry cat food with real chicken and essential nutrients',\n    price: 2400,\n    category: 'Cat Food',\n    subcategory: 'Dry Food',\n    brand: 'Royal Canin',\n    image: 'https://images.unsplash.com/photo-1589924691995-400dc9ecc119?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n    rating: 5,\n    reviews: 124,\n    stockStatus: 'In Stock',\n    stockQuantity: 50,\n    tags: ['premium', 'bestseller', 'chicken'],\n    isBestseller: true,\n    createdAt: '2024-01-15T00:00:00Z',\n    updatedAt: '2024-03-15T00:00:00Z'\n  }\n];\n\nexport const sampleCategories: Category[] = [\n  {\n    id: 1,\n    name: 'Cat Food',\n    slug: 'cat-food',\n    description: 'Premium food for cats of all ages',\n    isActive: true\n  },\n  {\n    id: 2,\n    name: 'Dog Food',\n    slug: 'dog-food', \n    description: 'Nutritious food for dogs of all sizes',\n    isActive: true\n  }\n];\n\nexport const sampleBrands: Brand[] = [\n  {\n    id: 1,\n    name: 'Royal Canin',\n    slug: 'royal-canin',\n    description: 'Premium pet nutrition brand',\n    isActive: true\n  },\n  {\n    id: 2,\n    name: 'Hills',\n    slug: 'hills',\n    description: 'Science-based pet nutrition',\n    isActive: true\n  }\n];\n","size_bytes":2581},"client/lib/product-data.ts":{"content":"export interface Product {\n  id: string\n  name: string\n  price: number\n  originalPrice?: number\n  image: string\n  rating: number\n  reviews: number\n  category: string\n  description: string\n  tags: string[]\n  stock: number\n  isBestSeller?: boolean\n  isNew?: boolean\n  isLowStock?: boolean\n}\n\nexport const categories = [\n  { id: 'cat-food', name: 'Cat Food', icon: '🐱' },\n  { id: 'dog-food', name: 'Dog Food', icon: '🐶' },\n  { id: 'toys-treats', name: 'Toys & Treats', icon: '🎾' },\n  { id: 'grooming', name: 'Grooming', icon: '🧴' },\n  { id: 'health-care', name: 'Health Care', icon: '💊' },\n  { id: 'accessories', name: 'Accessories', icon: '🎀' },\n]\n\n// Mock data - MongoDB-ready structure\nexport const productsData: Record<string, Product[]> = {\n  'cat-food': [\n    {\n      id: 'cf001',\n      name: 'Royal Canin Adult Cat Food',\n      price: 2400,\n      originalPrice: 2800,\n      image: 'https://images.unsplash.com/photo-1589924691995-400dc9ecc119?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.8,\n      reviews: 234,\n      category: 'cat-food',\n      description: 'Premium dry cat food for adult cats with balanced nutrition.',\n      tags: ['Premium', 'Adult'],\n      stock: 45,\n      isBestSeller: true,\n    },\n    {\n      id: 'cf002',\n      name: 'Whiskas Ocean Fish Cat Food',\n      price: 850,\n      image: 'https://images.unsplash.com/photo-1574158622682-e40e69881006?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.5,\n      reviews: 189,\n      category: 'cat-food',\n      description: 'Delicious ocean fish flavor wet food for cats.',\n      tags: ['Wet Food', 'Fish'],\n      stock: 78,\n    },\n    {\n      id: 'cf003',\n      name: 'Hills Science Diet Kitten Food',\n      price: 3200,\n      image: 'https://images.unsplash.com/photo-1548199973-03cce0bbc87b?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.9,\n      reviews: 156,\n      category: 'cat-food',\n      description: 'Specially formulated nutrition for growing kittens.',\n      tags: ['Kitten', 'Science Diet'],\n      stock: 23,\n      isNew: true,\n    },\n    {\n      id: 'cf004',\n      name: 'Purina Pro Plan Adult Cat',\n      price: 1950,\n      image: 'https://images.unsplash.com/photo-1606316321469-4d5b7d0e21c0?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.6,\n      reviews: 203,\n      category: 'cat-food',\n      description: 'High-protein dry food for active adult cats.',\n      tags: ['High Protein', 'Adult'],\n      stock: 8,\n      isLowStock: true,\n    },\n  ],\n  'dog-food': [\n    {\n      id: 'df001',\n      name: 'Pedigree Adult Dog Food',\n      price: 3200,\n      originalPrice: 3600,\n      image: 'https://images.unsplash.com/photo-1583337130417-3346a1be7dee?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.7,\n      reviews: 342,\n      category: 'dog-food',\n      description: 'Complete nutrition for adult dogs with real chicken.',\n      tags: ['Adult', 'Chicken'],\n      stock: 56,\n      isBestSeller: true,\n    },\n    {\n      id: 'df002',\n      name: 'Royal Canin Large Breed Puppy',\n      price: 4500,\n      image: 'https://images.unsplash.com/photo-1552053628-0dcb5a60e3de?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.9,\n      reviews: 189,\n      category: 'dog-food',\n      description: 'Specialized nutrition for large breed puppies.',\n      tags: ['Puppy', 'Large Breed'],\n      stock: 34,\n    },\n    {\n      id: 'df003',\n      name: 'Hills Prescription Diet',\n      price: 5200,\n      image: 'https://images.unsplash.com/photo-1587402092301-725e37c70fd8?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.8,\n      reviews: 98,\n      category: 'dog-food',\n      description: 'Therapeutic nutrition for dogs with special dietary needs.',\n      tags: ['Prescription', 'Therapeutic'],\n      stock: 12,\n      isNew: true,\n    },\n    {\n      id: 'df004',\n      name: 'Drools Adult Dog Food',\n      price: 2100,\n      image: 'https://images.unsplash.com/photo-1601758125946-6ec2ef64daf8?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.4,\n      reviews: 267,\n      category: 'dog-food',\n      description: 'Affordable complete nutrition for adult dogs.',\n      tags: ['Adult', 'Value'],\n      stock: 5,\n      isLowStock: true,\n    },\n  ],\n  'toys-treats': [\n    {\n      id: 'tt001',\n      name: 'Interactive Cat Wand Toy',\n      price: 450,\n      image: 'https://images.unsplash.com/photo-1601758228041-f3b2795255f1?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.6,\n      reviews: 156,\n      category: 'toys-treats',\n      description: 'Fun interactive wand toy to keep cats active and engaged.',\n      tags: ['Interactive', 'Cat'],\n      stock: 89,\n      isBestSeller: true,\n    },\n    {\n      id: 'tt002',\n      name: 'Kong Classic Dog Toy',\n      price: 850,\n      image: 'https://images.unsplash.com/photo-1605043204319-d14e5ba4719e?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.8,\n      reviews: 234,\n      category: 'toys-treats',\n      description: 'Durable rubber toy perfect for stuffing with treats.',\n      tags: ['Durable', 'Dog'],\n      stock: 67,\n    },\n    {\n      id: 'tt003',\n      name: 'Catnip Mice Toys (Pack of 6)',\n      price: 320,\n      image: 'https://images.unsplash.com/photo-1615789591457-74a63395c990?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.5,\n      reviews: 189,\n      category: 'toys-treats',\n      description: 'Soft mice toys filled with premium catnip.',\n      tags: ['Catnip', 'Pack'],\n      stock: 45,\n      isNew: true,\n    },\n    {\n      id: 'tt004',\n      name: 'Dog Training Treats',\n      price: 650,\n      image: 'https://images.unsplash.com/photo-1589924691995-400dc9ecc119?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.7,\n      reviews: 145,\n      category: 'toys-treats',\n      description: 'High-value treats perfect for training sessions.',\n      tags: ['Training', 'Treats'],\n      stock: 7,\n      isLowStock: true,\n    },\n  ],\n  'grooming': [\n    {\n      id: 'gr001',\n      name: 'Professional Pet Grooming Kit',\n      price: 2800,\n      originalPrice: 3200,\n      image: 'https://images.unsplash.com/photo-1589941013453-ec89f33b5e95?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.7,\n      reviews: 98,\n      category: 'grooming',\n      description: 'Complete grooming kit with brushes, clippers, and accessories.',\n      tags: ['Professional', 'Complete Kit'],\n      stock: 23,\n      isBestSeller: true,\n    },\n    {\n      id: 'gr002',\n      name: 'Pet Shampoo & Conditioner Set',\n      price: 950,\n      image: 'https://images.unsplash.com/photo-1628009368231-7bb7cfcb0def?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.5,\n      reviews: 167,\n      category: 'grooming',\n      description: 'Gentle shampoo and conditioner for sensitive pet skin.',\n      tags: ['Gentle', 'Set'],\n      stock: 54,\n    },\n    {\n      id: 'gr003',\n      name: 'Nail Clippers for Dogs & Cats',\n      price: 450,\n      image: 'https://images.unsplash.com/photo-1606316321469-4d5b7d0e21c0?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.6,\n      reviews: 234,\n      category: 'grooming',\n      description: 'Safe and easy-to-use nail clippers for all pet sizes.',\n      tags: ['Safety', 'Universal'],\n      stock: 78,\n      isNew: true,\n    },\n    {\n      id: 'gr004',\n      name: 'De-shedding Brush',\n      price: 750,\n      image: 'https://images.unsplash.com/photo-1548199973-03cce0bbc87b?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.8,\n      reviews: 156,\n      category: 'grooming',\n      description: 'Reduces shedding by up to 90% with gentle bristles.',\n      tags: ['De-shedding', 'Gentle'],\n      stock: 3,\n      isLowStock: true,\n    },\n  ],\n  'health-care': [\n    {\n      id: 'hc001',\n      name: 'Pet Multivitamin Supplements',\n      price: 1200,\n      image: 'https://images.unsplash.com/photo-1587402092301-725e37c70fd8?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.6,\n      reviews: 123,\n      category: 'health-care',\n      description: 'Daily multivitamin for optimal pet health and immunity.',\n      tags: ['Multivitamin', 'Daily'],\n      stock: 67,\n      isBestSeller: true,\n    },\n    {\n      id: 'hc002',\n      name: 'Flea & Tick Prevention Collar',\n      price: 850,\n      image: 'https://images.unsplash.com/photo-1601758125946-6ec2ef64daf8?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.5,\n      reviews: 189,\n      category: 'health-care',\n      description: '8-month protection against fleas and ticks.',\n      tags: ['Prevention', '8-month'],\n      stock: 45,\n    },\n    {\n      id: 'hc003',\n      name: 'Digestive Health Probiotics',\n      price: 1500,\n      image: 'https://images.unsplash.com/photo-1552053628-0dcb5a60e3de?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.8,\n      reviews: 87,\n      category: 'health-care',\n      description: 'Supports digestive health with beneficial probiotics.',\n      tags: ['Probiotics', 'Digestive'],\n      stock: 34,\n      isNew: true,\n    },\n    {\n      id: 'hc004',\n      name: 'Ear Cleaning Solution',\n      price: 650,\n      image: 'https://images.unsplash.com/photo-1605043204319-d14e5ba4719e?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.4,\n      reviews: 156,\n      category: 'health-care',\n      description: 'Gentle ear cleaning solution for regular maintenance.',\n      tags: ['Gentle', 'Maintenance'],\n      stock: 9,\n      isLowStock: true,\n    },\n  ],\n  'accessories': [\n    {\n      id: 'ac001',\n      name: 'Adjustable Pet Harness',\n      price: 950,\n      originalPrice: 1200,\n      image: 'https://images.unsplash.com/photo-1615789591457-74a63395c990?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.7,\n      reviews: 234,\n      category: 'accessories',\n      description: 'Comfortable and secure harness for daily walks.',\n      tags: ['Adjustable', 'Comfortable'],\n      stock: 56,\n      isBestSeller: true,\n    },\n    {\n      id: 'ac002',\n      name: 'Stainless Steel Food Bowls',\n      price: 750,\n      image: 'https://images.unsplash.com/photo-1606316321469-4d5b7d0e21c0?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.6,\n      reviews: 189,\n      category: 'accessories',\n      description: 'Durable stainless steel bowls, set of 2.',\n      tags: ['Stainless Steel', 'Set of 2'],\n      stock: 78,\n    },\n    {\n      id: 'ac003',\n      name: 'Orthopedic Pet Bed',\n      price: 2400,\n      image: 'https://images.unsplash.com/photo-1548199973-03cce0bbc87b?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.8,\n      reviews: 167,\n      category: 'accessories',\n      description: 'Memory foam pet bed for joint support and comfort.',\n      tags: ['Orthopedic', 'Memory Foam'],\n      stock: 23,\n      isNew: true,\n    },\n    {\n      id: 'ac004',\n      name: 'Retractable Dog Leash',\n      price: 650,\n      image: 'https://images.unsplash.com/photo-1628009368231-7bb7cfcb0def?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.5,\n      reviews: 145,\n      category: 'accessories',\n      description: '16ft retractable leash with ergonomic handle.',\n      tags: ['Retractable', '16ft'],\n      stock: 4,\n      isLowStock: true,\n    },\n  ],\n}\n\nexport function getProductsByCategory(categoryId: string): Product[] {\n  return productsData[categoryId] || []\n}\n\nexport function getCategoryAnalytics(categoryId: string) {\n  const products = getProductsByCategory(categoryId)\n  \n  if (products.length === 0) {\n    return {\n      lowestPriced: null,\n      highestPriced: null,\n      highestRated: null,\n      bestSeller: null,\n    }\n  }\n\n  const lowestPriced = products.reduce((min, product) => \n    product.price < min.price ? product : min\n  )\n  \n  const highestPriced = products.reduce((max, product) => \n    product.price > max.price ? product : max\n  )\n  \n  const highestRated = products.reduce((max, product) => \n    product.rating > max.rating ? product : max\n  )\n  \n  const bestSeller = products.find(product => product.isBestSeller) || products[0]\n\n  return {\n    lowestPriced,\n    highestPriced,\n    highestRated,\n    bestSeller,\n  }\n}","size_bytes":12199},"client/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/lib/search-data.ts":{"content":"// Comprehensive search data for all products across all pages\nexport interface SearchableProduct {\n  id: string;\n  name: string;\n  category: string;\n  brand?: string;\n  price: string;\n  page: string;\n  route: string;\n  keywords: string[];\n}\n\nexport const searchableProducts: SearchableProduct[] = [\n  // Cat Food Products\n  {\n    id: 'cat-1',\n    name: 'Royal Canin Adult Cat Food',\n    category: 'Adult Food',\n    brand: 'Royal Canin',\n    price: '৳1,850',\n    page: 'Cat Food',\n    route: '/cat-food',\n    keywords: ['royal', 'canin', 'adult', 'cat', 'food', 'dry', 'premium']\n  },\n  {\n    id: 'cat-2',\n    name: 'Whiskas Cat Pouches Variety Pack',\n    category: 'Cat Pouches',\n    brand: 'Whiskas',\n    price: '৳450',\n    page: 'Cat Food',\n    route: '/cat-food',\n    keywords: ['whiskas', 'pouches', 'wet', 'variety', 'pack']\n  },\n  {\n    id: 'cat-3',\n    name: 'Hills Science Diet Kitten Food',\n    category: 'Kitten Food',\n    brand: 'Hills',\n    price: '৳2,200',\n    page: 'Cat Food',\n    route: '/cat-food',\n    keywords: ['hills', 'science', 'diet', 'kitten', 'food', 'premium']\n  },\n  {\n    id: 'cat-4',\n    name: 'Felix As Good As It Looks',\n    category: 'Wet Food',\n    brand: 'Felix',\n    price: '৳320',\n    page: 'Cat Food',\n    route: '/cat-food',\n    keywords: ['felix', 'wet', 'food', 'good', 'looks']\n  },\n  {\n    id: 'cat-5',\n    name: 'Me-O Cat Treats Tuna',\n    category: 'Cat Treats',\n    brand: 'Me-O',\n    price: '৳180',\n    page: 'Cat Food',\n    route: '/cat-food',\n    keywords: ['me-o', 'treats', 'tuna', 'snack']\n  },\n  {\n    id: 'cat-6',\n    name: 'Purina Pro Plan Premium Dry',\n    category: 'Premium Dry',\n    brand: 'Purina',\n    price: '৳3,200',\n    page: 'Cat Food',\n    route: '/cat-food',\n    keywords: ['purina', 'pro', 'plan', 'premium', 'dry']\n  },\n\n  // Dog Food Products\n  {\n    id: 'dog-1',\n    name: 'Royal Canin Medium Adult Dog Food',\n    category: 'Dog Adult Food',\n    brand: 'Royal Canin',\n    price: '৳2,250',\n    page: 'Dog Food',\n    route: '/dog-food',\n    keywords: ['royal', 'canin', 'medium', 'adult', 'dog', 'food']\n  },\n  {\n    id: 'dog-2',\n    name: 'Pedigree Puppy Dry Food Chicken',\n    category: 'Puppy Dry Food',\n    brand: 'Pedigree',\n    price: '৳850',\n    page: 'Dog Food',\n    route: '/dog-food',\n    keywords: ['pedigree', 'puppy', 'dry', 'chicken', 'food']\n  },\n  {\n    id: 'dog-3',\n    name: 'Hills Science Diet Puppy Food',\n    category: 'Puppy Food',\n    brand: 'Hills',\n    price: '৳1,850',\n    page: 'Dog Food',\n    route: '/dog-food',\n    keywords: ['hills', 'science', 'diet', 'puppy', 'food']\n  },\n  {\n    id: 'dog-4',\n    name: 'Cesar Adult Dog Treats',\n    category: 'Adult Treats',\n    brand: 'Cesar',\n    price: '৳420',\n    page: 'Dog Food',\n    route: '/dog-food',\n    keywords: ['cesar', 'adult', 'dog', 'treats', 'snack']\n  },\n  {\n    id: 'dog-5',\n    name: 'Nutro Max Adult Dry Food',\n    category: 'Adult Dry Food',\n    brand: 'Nutro',\n    price: '৳3,200',\n    page: 'Dog Food',\n    route: '/dog-food',\n    keywords: ['nutro', 'max', 'adult', 'dry', 'food']\n  },\n  {\n    id: 'dog-6',\n    name: 'Cosequin Dog Joint Health',\n    category: 'Health Supplements',\n    brand: 'Cosequin',\n    price: '৳1,850',\n    page: 'Dog Food',\n    route: '/dog-food',\n    keywords: ['cosequin', 'joint', 'health', 'supplements', 'vitamins']\n  },\n\n  // Cat Toys Products\n  {\n    id: 'toy-1',\n    name: 'Interactive Feather Wand Toy',\n    category: 'Feather Toys',\n    brand: 'PetSafe',\n    price: '৳650',\n    page: 'Cat Toys',\n    route: '/cat-toys',\n    keywords: ['interactive', 'feather', 'wand', 'toy', 'play']\n  },\n  {\n    id: 'toy-2',\n    name: 'Catnip Filled Mouse Toys Set',\n    category: 'Catnip Toys',\n    brand: 'Kong',\n    price: '৳350',\n    page: 'Cat Toys',\n    route: '/cat-toys',\n    keywords: ['catnip', 'mouse', 'toys', 'set', 'play']\n  },\n  {\n    id: 'toy-3',\n    name: 'Automatic Laser Pointer',\n    category: 'Laser Pointers',\n    brand: 'PetLibro',\n    price: '৳1,200',\n    page: 'Cat Toys',\n    route: '/cat-toys',\n    keywords: ['automatic', 'laser', 'pointer', 'electronic']\n  },\n  {\n    id: 'toy-4',\n    name: 'Multi-Level Cat Tree Tower',\n    category: 'Cat Trees',\n    brand: 'Armarkat',\n    price: '৳8,500',\n    page: 'Cat Toys',\n    route: '/cat-toys',\n    keywords: ['multi', 'level', 'cat', 'tree', 'tower', 'scratching']\n  },\n  {\n    id: 'toy-5',\n    name: 'Cat Tunnel Play System',\n    category: 'Cat Tunnels',\n    brand: 'Pawaboo',\n    price: '৳1,850',\n    page: 'Cat Toys',\n    route: '/cat-toys',\n    keywords: ['cat', 'tunnel', 'play', 'system', 'collapsible']\n  },\n  {\n    id: 'toy-6',\n    name: 'Electronic Motion Fish Toy',\n    category: 'Electronic Toys',\n    brand: 'Potaroma',\n    price: '৳950',\n    page: 'Cat Toys',\n    route: '/cat-toys',\n    keywords: ['electronic', 'motion', 'fish', 'toy', 'rechargeable']\n  },\n\n  // Cat Litter Products\n  {\n    id: 'litter-1',\n    name: 'Tidy Cats Clumping Litter',\n    category: 'Clumping Cat Litter',\n    brand: 'Tidy Cats',\n    price: '৳1,250',\n    page: 'Cat Litter',\n    route: '/cat-litter',\n    keywords: ['tidy', 'cats', 'clumping', 'litter', 'clay']\n  },\n  {\n    id: 'litter-2',\n    name: 'Ever Clean Scented Multi-Cat',\n    category: 'Scented Litter',\n    brand: 'Ever Clean',\n    price: '৳1,850',\n    page: 'Cat Litter',\n    route: '/cat-litter',\n    keywords: ['ever', 'clean', 'scented', 'multi', 'cat', 'litter']\n  },\n  {\n    id: 'litter-3',\n    name: 'Stainless Steel Litter Scoop',\n    category: 'Litter Scoop',\n    brand: 'iPrimio',\n    price: '৳450',\n    page: 'Cat Litter',\n    route: '/cat-litter',\n    keywords: ['stainless', 'steel', 'litter', 'scoop', 'tool']\n  },\n  {\n    id: 'litter-4',\n    name: 'Covered Cat Litter Box Large',\n    category: 'Covered Litter Box',\n    brand: 'Petmate',\n    price: '৳2,200',\n    page: 'Cat Litter',\n    route: '/cat-litter',\n    keywords: ['covered', 'cat', 'litter', 'box', 'large', 'enclosed']\n  },\n  {\n    id: 'litter-5',\n    name: 'Washable Litter Mat',\n    category: 'Litter Mat',\n    brand: 'Gorilla Grip',\n    price: '৳850',\n    page: 'Cat Litter',\n    route: '/cat-litter',\n    keywords: ['washable', 'litter', 'mat', 'gorilla', 'grip']\n  },\n  {\n    id: 'litter-6',\n    name: 'PetSafe ScoopFree Self-Cleaning',\n    category: 'Self-Cleaning Box',\n    brand: 'PetSafe',\n    price: '৳15,000',\n    page: 'Cat Litter',\n    route: '/cat-litter',\n    keywords: ['petsafe', 'scoopfree', 'self', 'cleaning', 'automatic']\n  },\n\n  // Reflex Products\n  {\n    id: 'reflex-1',\n    name: 'Reflex Plus Adult Cat Food Chicken',\n    category: 'Cat Food',\n    brand: 'Reflex',\n    price: '৳1,850',\n    page: 'Reflex',\n    route: '/reflex',\n    keywords: ['reflex', 'plus', 'adult', 'cat', 'food', 'chicken', 'premium']\n  },\n  {\n    id: 'reflex-2',\n    name: 'Reflex Plus Puppy Food Lamb & Rice',\n    category: 'Puppy Food',\n    brand: 'Reflex',\n    price: '৳2,200',\n    page: 'Reflex',\n    route: '/reflex',\n    keywords: ['reflex', 'plus', 'puppy', 'food', 'lamb', 'rice']\n  },\n  {\n    id: 'reflex-3',\n    name: 'Reflex Plus Kitten Food Salmon',\n    category: 'Kitten Food',\n    brand: 'Reflex',\n    price: '৳1,650',\n    page: 'Reflex',\n    route: '/reflex',\n    keywords: ['reflex', 'plus', 'kitten', 'food', 'salmon', 'dha']\n  },\n  {\n    id: 'reflex-4',\n    name: 'Reflex Plus Adult Dog Food Beef',\n    category: 'Dog Food',\n    brand: 'Reflex',\n    price: '৳2,450',\n    page: 'Reflex',\n    route: '/reflex',\n    keywords: ['reflex', 'plus', 'adult', 'dog', 'food', 'beef']\n  },\n  {\n    id: 'reflex-5',\n    name: 'Reflex Grain-Free Cat Food Turkey',\n    category: 'Grain-Free',\n    brand: 'Reflex',\n    price: '৳2,800',\n    page: 'Reflex',\n    route: '/reflex',\n    keywords: ['reflex', 'grain', 'free', 'cat', 'food', 'turkey']\n  },\n  {\n    id: 'reflex-6',\n    name: 'Reflex Senior Dog Food Formula',\n    category: 'Senior Pet Food',\n    brand: 'Reflex',\n    price: '৳2,600',\n    page: 'Reflex',\n    route: '/reflex',\n    keywords: ['reflex', 'senior', 'dog', 'food', 'formula', 'joint']\n  }\n];\n\nexport function searchProducts(query: string): SearchableProduct[] {\n  if (!query.trim()) return [];\n  \n  const searchTerm = query.toLowerCase().trim();\n  \n  return searchableProducts.filter(product => {\n    const searchableText = [\n      product.name,\n      product.category,\n      product.brand || '',\n      product.page,\n      ...product.keywords\n    ].join(' ').toLowerCase();\n    \n    return searchableText.includes(searchTerm);\n  }).slice(0, 10); // Limit to 10 results\n}","size_bytes":8535},"client/lib/supabase.ts":{"content":"import { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = import.meta.env.VITE_SUPABASE_URL || ''\nconst supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY || ''\n\n// Validate that we have the required credentials\nif (!supabaseUrl) {\n  throw new Error('VITE_SUPABASE_URL environment variable is required. Please set it in your Replit secrets.')\n}\nif (!supabaseAnonKey) {\n  throw new Error('VITE_SUPABASE_ANON_KEY environment variable is required. Please set it in your Replit secrets.')\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)\n\nexport type AuthUser = {\n  id: string\n  email: string\n  name?: string\n}\n\nexport async function signUp(email: string, password: string) {\n  const { data, error } = await supabase.auth.signUp({\n    email,\n    password,\n  })\n  return { data, error }\n}\n\nexport async function signIn(email: string, password: string) {\n  const { data, error } = await supabase.auth.signInWithPassword({\n    email,\n    password,\n  })\n  return { data, error }\n}\n\nexport async function signOut() {\n  const { error } = await supabase.auth.signOut()\n  return { error }\n}\n\nexport async function getCurrentUser() {\n  const { data: { user } } = await supabase.auth.getUser()\n  return user\n}\n\nexport function onAuthStateChange(callback: (user: any) => void) {\n  return supabase.auth.onAuthStateChange((_event, session) => {\n    callback(session?.user ?? null)\n  })\n}\n\n// Function to get the correct password reset URL for different environments\nfunction getPasswordResetUrl(): string {\n  const currentOrigin = window.location.origin;\n  \n  // For production domains, use the current origin\n  if (!currentOrigin.includes('localhost') && !currentOrigin.includes('127.0.0.1')) {\n    return `${currentOrigin}/reset-password`;\n  }\n  \n  // For development, try to detect Replit environment\n  const hostname = window.location.hostname;\n  const href = window.location.href;\n  const referrer = document.referrer;\n  \n  // Check if we can find a replit.dev domain\n  const replitMatch = \n    href.match(/https?:\\/\\/([^\\/]+\\.replit\\.dev)/) ||\n    referrer.match(/https?:\\/\\/([^\\/]+\\.replit\\.dev)/);\n    \n  if (replitMatch) {\n    return `https://${replitMatch[1]}/reset-password`;\n  }\n  \n  // Fallback: use current origin (will work when deployed to your domain)\n  return `${currentOrigin}/reset-password`;\n}\n\nexport async function resetPassword(email: string) {\n  const redirectUrl = getPasswordResetUrl();\n  \n  console.log('Password reset redirect URL from library:', redirectUrl);\n    \n  const { error } = await supabase.auth.resetPasswordForEmail(email, {\n    redirectTo: redirectUrl,\n  })\n  return { error }\n}\n\nexport async function updatePassword(password: string) {\n  const { error } = await supabase.auth.updateUser({\n    password: password\n  })\n  return { error }\n}","size_bytes":2806},"client/lib/url-utils.ts":{"content":"// Utility to get the correct base URL for the application\nexport function getAppBaseUrl(): string {\n  // In production or when accessed via replit.dev domain\n  if (typeof window !== 'undefined') {\n    const hostname = window.location.hostname;\n    \n    // If we're on a replit.dev domain, use that\n    if (hostname.includes('replit.dev')) {\n      return `https://${hostname}`;\n    }\n    \n    // If we're on localhost in development, try to get the replit domain\n    if (hostname === 'localhost') {\n      // Try to get the replit domain from the referer or other hints\n      const replitDomain = getReplitDomainFromEnvironment();\n      if (replitDomain) {\n        return `https://${replitDomain}`;\n      }\n    }\n    \n    // Fallback to current origin\n    return window.location.origin;\n  }\n  \n  // Server-side fallback\n  return 'http://localhost:5000';\n}\n\nfunction getReplitDomainFromEnvironment(): string | null {\n  // Try to get the replit domain from various sources\n  if (typeof window !== 'undefined') {\n    // Check if we have any replit-specific indicators\n    const userAgent = window.navigator.userAgent;\n    \n    // For now, we'll use a more direct approach\n    // The user can manually set this if needed\n    return null;\n  }\n  \n  return null;\n}","size_bytes":1256},"client/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/hooks/use-auth\";\nimport { CartProvider } from \"@/contexts/cart-context\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/home\";\nimport ProductsPage from \"@/pages/products\";\nimport PrivilegeClubPage from \"@/pages/privilege-club\";\nimport CatFoodPage from \"@/pages/cat-food\";\nimport DogFoodPage from \"@/pages/dog-food\";\nimport CatToysPage from \"@/pages/cat-toys\";\nimport CatLitterPage from \"@/pages/cat-litter\";\nimport ReflexPage from \"@/pages/reflex\";\nimport BlogPage from \"@/pages/blog\";\nimport SignInPage from \"@/pages/sign-in\";\nimport SignUpPage from \"@/pages/sign-up\";\nimport ForgotPasswordPage from \"@/pages/forgot-password\";\nimport ResetPasswordPage from \"@/pages/reset-password\";\nimport AdminProductsPage from \"@/pages/admin/products\";\nimport AdminPage from \"@/pages/admin\";\nimport DashboardPage from \"@/pages/dashboard\";\nimport CartPage from \"@/pages/cart\";\nimport ProfilePage from \"@/pages/profile\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/products\" component={ProductsPage} />\n      <Route path=\"/privilege-club\" component={PrivilegeClubPage} />\n      <Route path=\"/cat-food\" component={CatFoodPage} />\n      <Route path=\"/dog-food\" component={DogFoodPage} />\n      <Route path=\"/cat-toys\" component={CatToysPage} />\n      <Route path=\"/cat-litter\" component={CatLitterPage} />\n      <Route path=\"/reflex\" component={ReflexPage} />\n      <Route path=\"/blog\" component={BlogPage} />\n      <Route path=\"/sign-in\" component={SignInPage} />\n      <Route path=\"/sign-up\" component={SignUpPage} />\n      <Route path=\"/forgot-password\" component={ForgotPasswordPage} />\n      <Route path=\"/reset-password\" component={ResetPasswordPage} />\n      <Route path=\"/admin/products\" component={AdminProductsPage} />\n      <Route path=\"/admin\" component={AdminPage} />\n      <Route path=\"/dashboard\" component={DashboardPage} />\n      <Route path=\"/cart\" component={CartPage} />\n      <Route path=\"/profile\" component={ProfilePage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <CartProvider>\n          <TooltipProvider>\n            <Toaster />\n            <Router />\n          </TooltipProvider>\n        </CartProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2689},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Custom Scrollbar Styling */\n::-webkit-scrollbar {\n  width: 12px;\n}\n\n::-webkit-scrollbar-track {\n  background: #f1f5f9;\n  border-radius: 6px;\n}\n\n::-webkit-scrollbar-thumb {\n  background: linear-gradient(180deg, #10b981, #059669);\n  border-radius: 6px;\n  border: 2px solid #f1f5f9;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: linear-gradient(180deg, #059669, #047857);\n}\n\n/* Firefox */\nhtml {\n  scrollbar-width: thin;\n  scrollbar-color: #10b981 #f1f5f9;\n}\n\n:root {\n  /* Meow Meow Pet Shop Color Palette */\n  --meow-yellow: hsl(54, 100%, 67%);     /* #FFDE59 - Primary yellow */\n  --meow-green: hsl(125, 25%, 30%);      /* #26732D - Primary green */\n  --meow-green-dark: hsl(125, 38%, 23%); /* #1E5D26 - Darker green */\n  --meow-blue: hsl(217, 91%, 60%);       /* #3B82F6 - Accent blue */\n  --meow-light-bg: hsl(60, 9%, 98%);     /* #FAFAFA - Light background */\n  --meow-gray: hsl(218, 11%, 65%);       /* #9CA3AF - Gray text */\n\n  /* Default light theme colors */\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(54, 100%, 67%);\n  --primary-foreground: hsl(125, 25%, 15%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(25, 5.3%, 44.7%);\n  --accent: hsl(125, 47%, 18%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(24.6, 95%, 53.1%);\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(54, 100%, 67%);\n  --primary-foreground: hsl(125, 25%, 15%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(125, 47%, 18%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', sans-serif;\n  }\n}\n\n@layer utilities {\n  .meow-yellow {\n    background-color: var(--meow-yellow);\n  }\n\n  .meow-green {\n    background-color: var(--meow-green);\n  }\n\n  .meow-green-dark {\n    background-color: var(--meow-green-dark);\n  }\n\n  .text-meow-yellow {\n    color: var(--meow-yellow);\n  }\n\n  .text-meow-green {\n    color: var(--meow-green);\n  }\n\n  .text-meow-green-dark {\n    color: var(--meow-green-dark);\n  }\n\n  .border-meow-yellow {\n    border-color: var(--meow-yellow);\n  }\n\n  .border-meow-green {\n    border-color: var(--meow-green);\n  }\n\n  .hover-meow-yellow:hover {\n    background-color: hsl(54, 100%, 60%);\n  }\n\n  .hover-meow-green:hover {\n    background-color: var(--meow-green-dark);\n  }\n\n  /* Consistent section spacing utilities */\n  .section-spacing {\n    @apply py-12 md:py-16;\n  }\n\n  .section-spacing-small {\n    @apply py-8 md:py-12;\n  }\n\n  /* Enhanced animations and transitions */\n  .animate-fade-in {\n    animation: fadeIn 0.6s ease-out;\n  }\n\n  .animate-scale-up {\n    animation: scaleUp 0.3s ease-out;\n  }\n\n  .animate-slide-up {\n    animation: slideUp 0.5s ease-out;\n  }\n\n  /* Improved hover effects */\n  .hover-lift {\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  .hover-lift:hover {\n    transform: translateY(-4px);\n    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);\n  }\n\n  .btn-bounce {\n    transition: transform 0.1s ease;\n  }\n\n  .btn-bounce:active {\n    transform: scale(0.95);\n  }\n\n  /* Line clamp utility */\n  .line-clamp-2 {\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n\n  /* Responsive utilities */\n  .responsive-grid {\n    @apply grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 md:gap-6;\n  }\n\n  .responsive-container {\n    @apply container mx-auto px-4 sm:px-6 lg:px-8;\n  }\n\n  /* Responsive sidebar utilities */\n  .sidebar-transition {\n    transition: width 0.3s ease-in-out, margin 0.3s ease-in-out;\n  }\n\n  .main-content-responsive {\n    transition: margin-left 0.3s ease-in-out, width 0.3s ease-in-out;\n  }\n\n  /* Mobile sidebar overlay */\n  @media (max-width: 1023px) {\n    .sidebar-mobile {\n      position: fixed;\n      top: 0;\n      left: 0;\n      height: 100vh;\n      z-index: 50;\n      transform: translateX(-100%);\n      transition: transform 0.3s ease-in-out;\n    }\n\n    .sidebar-mobile.open {\n      transform: translateX(0);\n    }\n  }\n}\n\n/* Keyframe animations */\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes scaleUp {\n  from {\n    opacity: 0;\n    transform: scale(0.95);\n  }\n  to {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\n\n@keyframes slideUp {\n  from {\n    opacity: 0;\n    transform: translateY(30px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes gentleBounce {\n  0%, 100% {\n    transform: translateY(0);\n  }\n  50% {\n    transform: translateY(-2px);\n  }\n}\n\n/* Hide scrollbars */\n::-webkit-scrollbar {\n  width: 0;\n  height: 0;\n}\n\n::-webkit-scrollbar-track {\n  background: transparent;\n}\n\n::-webkit-scrollbar-thumb {\n  background: transparent;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: transparent;\n}\n\n/* Hide scrollbars for Firefox */\nhtml {\n  scrollbar-width: none;\n}\n\n/* Hide scrollbars for all elements */\n* {\n  scrollbar-width: none;\n  -ms-overflow-style: none;\n}\n\n/* Ensure proper header positioning */\nbody {\n  margin: 0;\n  padding: 0;\n}\n\n/* Prevent layout shifts with sticky header */\n.sticky {\n  position: sticky !important;\n}\n\n/* Custom animations */\n@keyframes fadeIn {\n  from { opacity: 0; }\n  to { opacity: 1; }\n}\n\n@keyframes slideUp {\n  from { \n    opacity: 0; \n    transform: translateY(20px); \n  }\n  to { \n    opacity: 1; \n    transform: translateY(0); \n  }\n}\n\n@keyframes scaleUp {\n  from { \n    opacity: 0; \n    transform: scale(0.9); \n  }\n  to { \n    opacity: 1; \n    transform: scale(1); \n  }\n}\n\n.animate-fade-in {\n  animation: fadeIn 0.6s ease-out;\n}\n\n.animate-slide-up {\n  animation: slideUp 0.6s ease-out;\n}\n\n.animate-scale-up {\n  animation: scaleUp 0.6s ease-out;\n}\n\n.btn-bounce:hover {\n  animation: bounce 0.6s ease-in-out;\n}\n\n@keyframes bounce {\n  0%, 20%, 60%, 100% {\n    transform: translateY(0);\n  }\n  40% {\n    transform: translateY(-10px);\n  }\n  80% {\n    transform: translateY(-5px);\n  }\n}\n\n.hover-lift {\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n}\n\n.hover-lift:hover {\n  transform: translateY(-5px);\n  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);\n}\n\n/* Responsive Banner Styles */\n.hero-banner {\n  position: relative;\n  width: 100%;\n  overflow: hidden;\n}\n\n.hero-banner img {\n  width: 100%;\n  height: auto;\n  object-fit: cover;\n  display: block;\n}\n\n/* Media queries for responsive banner */\n@media (max-width: 768px) {\n  .hero-banner img {\n    object-fit: contain;\n    min-height: 200px;\n    max-height: 400px;\n  }\n\n  .hero-banner .overlay-content {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    text-align: center;\n    z-index: 10;\n  }\n}\n\n@media (min-width: 769px) and (max-width: 1024px) {\n  .hero-banner img {\n    object-fit: contain;\n    min-height: 300px;\n    max-height: 500px;\n  }\n}\n\n@media (min-width: 1025px) {\n  .hero-banner img {\n    object-fit: contain;\n    max-height: 600px;\n  }\n}\n\n/* Ensure banner maintains aspect ratio on all devices */\n@media (max-width: 480px) {\n  .hero-banner {\n    aspect-ratio: 16/9;\n  }\n\n  .hero-banner img {\n    object-fit: cover;\n    height: 100%;\n  }\n}\n\n/* Banner container responsive adjustments */\n.banner-container {\n  position: relative;\n  width: 100%;\n  max-width: 100vw;\n  overflow: visible;\n}\n\n.banner-container::before {\n  content: '';\n  display: block;\n  padding-top: 56.25%; /* 16:9 aspect ratio */\n}\n\n.banner-container img {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  object-fit: contain;\n}\n\n@media (min-width: 768px) {\n  .banner-container img {\n    object-fit: contain;\n  }\n}","size_bytes":8717},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/best-sellers.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Star } from \"lucide-react\";\nimport { useCart } from \"@/hooks/use-cart\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Product } from \"@shared/schema\";\n\nexport default function BestSellers() {\n  const { data: products = [], isLoading } = useQuery<Product[]>({\n    queryKey: ['/api/products/best-sellers'],\n  });\n  \n  const { addToCart } = useCart();\n  const { toast } = useToast();\n\n  const handleAddToCart = (product: Product) => {\n    addToCart(product.id);\n    toast({\n      title: \"Added to cart!\",\n      description: `${product.name} has been added to your cart.`,\n    });\n  };\n\n  const renderStars = (rating: string) => {\n    const numRating = parseFloat(rating);\n    const stars = [];\n    \n    for (let i = 1; i <= 5; i++) {\n      if (i <= numRating) {\n        stars.push(<Star key={i} className=\"w-3 h-3 fill-yellow-400 text-yellow-400\" />);\n      } else if (i - 0.5 <= numRating) {\n        stars.push(<Star key={i} className=\"w-3 h-3 fill-yellow-400/50 text-yellow-400\" />);\n      } else {\n        stars.push(<Star key={i} className=\"w-3 h-3 text-gray-300\" />);\n      }\n    }\n    \n    return stars;\n  };\n\n  if (isLoading) {\n    return (\n      <section className=\"py-12 bg-white\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4\">\n            {[...Array(6)].map((_, i) => (\n              <div key={i} className=\"bg-gray-100 rounded-lg h-64 animate-pulse border\"></div>\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section className=\"py-12 bg-white\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4\">\n          {products.map((product) => (\n            <Card\n              key={product.id}\n              className=\"bg-white shadow-sm hover:shadow-md transition-shadow border rounded-lg\"\n            >\n              <CardContent className=\"p-3\">\n                <div className=\"relative mb-3\">\n                  <img\n                    src={product.image || \"\"}\n                    alt={product.name}\n                    className=\"w-full h-32 object-cover rounded-lg\"\n                  />\n                </div>\n                <Badge className=\"bg-purple-100 text-purple-700 mb-2 text-xs\">\n                  Cat Food\n                </Badge>\n                <h4 className=\"font-medium mb-2 text-xs text-gray-800 line-clamp-2\">{product.name}</h4>\n                <div className=\"flex items-center mb-2\">\n                  <div className=\"flex\">\n                    {renderStars(product.rating || \"0\")}\n                  </div>\n                  <span className=\"text-xs text-gray-500 ml-1\">({product.rating})</span>\n                </div>\n                <div className=\"space-y-1\">\n                  <span className=\"text-sm font-bold text-purple-600\">৳{product.price}</span>\n                  <Button\n                    onClick={() => handleAddToCart(product)}\n                    className=\"w-full bg-purple-600 text-white hover:bg-purple-700 text-xs py-1 h-7\"\n                  >\n                    Add to Cart\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3520},"client/src/components/customer-reviews.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Star } from \"lucide-react\";\nimport type { Review } from \"@shared/schema\";\n\nexport default function CustomerReviews() {\n  const { data: reviews = [], isLoading } = useQuery<Review[]>({\n    queryKey: ['/api/reviews'],\n  });\n\n  const renderStars = (rating: number) => {\n    return Array.from({ length: 5 }, (_, i) => (\n      <Star\n        key={i}\n        className={`w-4 h-4 ${\n          i < rating ? 'fill-yellow-400 text-yellow-400' : 'text-gray-300'\n        }`}\n      />\n    ));\n  };\n\n  if (isLoading) {\n    return (\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <h3 className=\"text-3xl font-bold text-gray-800 mb-4\">Happy Pet Parents</h3>\n            <p className=\"text-gray-600\">See what our customers have to say</p>\n          </div>\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"bg-white rounded-xl h-48 animate-pulse\"></div>\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section className=\"py-16 bg-gray-50\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"text-center mb-12\">\n          <h3 className=\"text-3xl font-bold text-gray-800 mb-4\">Happy Pet Parents</h3>\n          <p className=\"text-gray-600\">See what our customers have to say</p>\n        </div>\n\n        <div className=\"grid md:grid-cols-3 gap-8\">\n          {reviews.map((review) => (\n            <Card key={review.id} className=\"bg-white shadow-lg\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center mb-4\">\n                  <img\n                    src={review.customerImage || \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&h=100\"}\n                    alt={`${review.customerName} review`}\n                    className=\"w-12 h-12 rounded-full object-cover mr-4\"\n                  />\n                  <div>\n                    <h5 className=\"font-semibold\">{review.customerName}</h5>\n                    <p className=\"text-sm text-gray-500\">Pet parent to {review.petName}</p>\n                  </div>\n                </div>\n                <div className=\"flex mb-3\">\n                  {renderStars(review.rating)}\n                </div>\n                <p className=\"text-gray-600\">\"{review.comment}\"</p>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2673},"client/src/components/featured-categories.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport type { Category } from \"@shared/schema\";\n\nexport default function FeaturedCategories() {\n  const { data: categories = [], isLoading } = useQuery<Category[]>({\n    queryKey: ['/api/categories'],\n  });\n\n  if (isLoading) {\n    return (\n      <section className=\"py-8 bg-white\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"bg-gray-200 animate-pulse rounded-lg h-40\"></div>\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section className=\"py-8 bg-white\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4\">\n          {categories.map((category) => (\n            <Card\n              key={category.id}\n              className=\"group bg-white hover:shadow-lg transition-all duration-300 hover:-translate-y-1 cursor-pointer border border-gray-200 rounded-lg\"\n            >\n              <CardContent className=\"p-4 text-center\">\n                <div className=\"bg-gray-50 rounded-lg p-4 mb-3\">\n                  <img\n                    src={category.image || \"https://images.unsplash.com/photo-1601758228041-f3b2795255f1?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&h=200\"}\n                    alt={category.name}\n                    className=\"w-16 h-16 mx-auto object-contain\"\n                  />\n                </div>\n                <h4 className=\"text-sm font-medium text-gray-800\">{category.name}</h4>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":1814},"client/src/components/flash-sale.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport type { Product } from \"@shared/schema\";\n\nexport default function FlashSale() {\n  const { data: products = [], isLoading } = useQuery<Product[]>({\n    queryKey: ['/api/products/flash-sale'],\n  });\n\n  if (isLoading) {\n    return (\n      <section className=\"py-12 bg-purple-50\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-8\">\n            <h3 className=\"text-2xl font-bold text-purple-700 mb-2\">Flash Sale</h3>\n            <Button className=\"bg-purple-600 text-white px-6 py-2 rounded-lg text-sm\">\n              View All\n            </Button>\n          </div>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4\">\n            {[...Array(6)].map((_, i) => (\n              <div key={i} className=\"bg-white rounded-lg h-64 animate-pulse border\"></div>\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section className=\"py-12 bg-purple-50\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"text-center mb-8\">\n          <h3 className=\"text-2xl font-bold text-purple-700 mb-2\">Flash Sale</h3>\n          <Button className=\"bg-purple-600 text-white px-6 py-2 rounded-lg text-sm hover:bg-purple-700\">\n            View All\n          </Button>\n        </div>\n\n        <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4\">\n          {products.map((product) => (\n            <Card key={product.id} className=\"bg-white shadow-sm hover:shadow-md transition-shadow border rounded-lg\">\n              <CardContent className=\"p-3\">\n                <div className=\"relative mb-3\">\n                  <img\n                    src={product.image || \"\"}\n                    alt={product.name}\n                    className=\"w-full h-32 object-cover rounded-lg\"\n                  />\n                  {product.discountAmount && (\n                    <Badge className=\"absolute top-2 left-2 bg-red-500 text-white text-xs px-2 py-1\">\n                      -৳{product.discountAmount}\n                    </Badge>\n                  )}\n                </div>\n                <Badge className=\"bg-purple-100 text-purple-700 mb-2 text-xs\">\n                  Cat Treats\n                </Badge>\n                <h4 className=\"font-medium mb-2 text-xs text-gray-800 line-clamp-2\">{product.name}</h4>\n                <div className=\"space-y-1\">\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-sm font-bold text-purple-600\">৳{product.price}</span>\n                    {product.originalPrice && (\n                      <span className=\"text-xs text-gray-400 line-through\">৳{product.originalPrice}</span>\n                    )}\n                  </div>\n                  <Button className=\"w-full bg-purple-600 text-white hover:bg-purple-700 text-xs py-1 h-7\">\n                    View Product\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3249},"client/src/components/footer.tsx":{"content":"import { Phone, Mail, MapPin, Clock } from \"lucide-react\";\n\nexport default function Footer() {\n  const quickLinks = [\n    { name: \"Shop\", href: \"#\" },\n    { name: \"Categories\", href: \"#\" },\n    { name: \"FAQ\", href: \"#\" },\n    { name: \"Privacy Policy\", href: \"#\" },\n    { name: \"Terms & Conditions\", href: \"#\" },\n  ];\n\n  const categories = [\n    { name: \"Cat Food\", href: \"#\" },\n    { name: \"Dog Food\", href: \"#\" },\n    { name: \"Pet Toys\", href: \"#\" },\n    { name: \"Pet Accessories\", href: \"#\" },\n    { name: \"Pet Care & Health\", href: \"#\" },\n  ];\n\n  const socialLinks = [\n    { icon: \"fab fa-facebook\", href: \"#\" },\n    { icon: \"fab fa-instagram\", href: \"#\" },\n    { icon: \"fab fa-twitter\", href: \"#\" },\n    { icon: \"fab fa-youtube\", href: \"#\" },\n  ];\n\n  return (\n    <footer className=\"bg-gray-800 text-white py-12\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"grid md:grid-cols-4 gap-8\">\n          <div>\n            <div className=\"flex items-center space-x-3 mb-4\">\n              <img\n                src=\"/logo.png\"\n                alt=\"Meow Meow Pet Shop Logo\"\n                className=\"h-10 w-auto\"\n              />\n              <h4 className=\"text-xl font-bold\">Meow Meow Pet Shop</h4>\n            </div>\n            <p className=\"text-gray-300 mb-4\">\n              Your trusted partner for premium pet care products in Bangladesh. Making pets happy since 2020.\n            </p>\n            <div className=\"flex space-x-3\">\n              {socialLinks.map((social, index) => (\n                <a\n                  key={index}\n                  href={social.href}\n                  className=\"text-gray-300 hover:text-primary-yellow transition-colors\"\n                >\n                  <i className={`${social.icon} text-lg`}></i>\n                </a>\n              ))}\n            </div>\n          </div>\n\n          <div>\n            <h5 className=\"text-lg font-semibold mb-4\">Quick Links</h5>\n            <ul className=\"space-y-2\">\n              {quickLinks.map((link, index) => (\n                <li key={index}>\n                  <a\n                    href={link.href}\n                    className=\"text-gray-300 hover:text-primary-yellow transition-colors\"\n                  >\n                    {link.name}\n                  </a>\n                </li>\n              ))}\n            </ul>\n          </div>\n\n          <div>\n            <h5 className=\"text-lg font-semibold mb-4\">Categories</h5>\n            <ul className=\"space-y-2\">\n              {categories.map((category, index) => (\n                <li key={index}>\n                  <a\n                    href={category.href}\n                    className=\"text-gray-300 hover:text-primary-yellow transition-colors\"\n                  >\n                    {category.name}\n                  </a>\n                </li>\n              ))}\n            </ul>\n          </div>\n\n          <div>\n            <h5 className=\"text-lg font-semibold mb-4\">Contact Info</h5>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center space-x-3\">\n                <Phone className=\"w-5 h-5 text-primary-yellow\" />\n                <span className=\"text-gray-300\">01408076089</span>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <Mail className=\"w-5 h-5 text-primary-yellow\" />\n                <span className=\"text-gray-300\">info@mewmewshopbd.com</span>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <MapPin className=\"w-5 h-5 text-primary-yellow\" />\n                <span className=\"text-gray-300\">Dhaka, Bangladesh</span>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <Clock className=\"w-5 h-5 text-primary-yellow\" />\n                <span className=\"text-gray-300\">24/7 Online Service</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"border-t border-gray-700 mt-8 pt-8 text-center\">\n          <p className=\"text-gray-300\">\n            © 2025 Meow Meow Pet Shop. All rights reserved. | Made with ❤️ for pet lovers\n          </p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":4203},"client/src/components/header.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { Search, ShoppingCart, User, Menu, Phone, MapPin, Truck, LogIn, LogOut } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useCart } from \"@/hooks/use-cart\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { signOut } from \"@/lib/supabase\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Header() {\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const { cartCount } = useCart();\n  const { user, loading } = useAuth();\n  const { toast } = useToast();\n\n  const handleSignOut = async () => {\n    const { error } = await signOut();\n    if (error) {\n      toast({\n        title: 'Sign Out Failed',\n        description: error.message,\n        variant: 'destructive',\n      });\n    } else {\n      toast({\n        title: 'Signed Out',\n        description: 'You have been successfully signed out.',\n      });\n    }\n  };\n\n  return (\n    <div>\n      {/* Top Bar */}\n      <div className=\"bg-accent-green text-white py-2 text-sm\">\n        <div className=\"container mx-auto px-4 flex justify-between items-center\">\n          <div className=\"flex items-center space-x-4\">\n            <span className=\"flex items-center\">\n              <Phone className=\"w-4 h-4 mr-2\" />\n              01408076089\n            </span>\n            <span className=\"flex items-center\">\n              <MapPin className=\"w-4 h-4 mr-2\" />\n              Our location\n            </span>\n            <span className=\"flex items-center\">\n              <Truck className=\"w-4 h-4 mr-2\" />\n              Track Your Order\n            </span>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <a href=\"#\" className=\"hover:text-primary-yellow transition-colors\">\n              <i className=\"fab fa-facebook\"></i>\n            </a>\n            <a href=\"#\" className=\"hover:text-primary-yellow transition-colors\">\n              <i className=\"fab fa-instagram\"></i>\n            </a>\n            <a href=\"#\" className=\"hover:text-primary-yellow transition-colors\">\n              <i className=\"fab fa-twitter\"></i>\n            </a>\n            <a href=\"#\" className=\"hover:text-primary-yellow transition-colors\">\n              <i className=\"fab fa-youtube\"></i>\n            </a>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Header */}\n      <header className=\"bg-white shadow-md sticky top-0 z-50\">\n        <div className=\"container mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            {/* Logo */}\n            <Link href=\"/\" className=\"flex items-center space-x-3 hover:opacity-80 transition-opacity\">\n              <img \n                src=\"/logo.png\" \n                alt=\"Meow Meow Pet Shop Logo\" \n                className=\"h-12 w-12 rounded-full object-cover border-2 border-accent-green\"\n              />\n              <h1 className=\"text-2xl font-bold text-accent-green hidden sm:block\">\n                Meow Meow Pet Shop\n              </h1>\n            </Link>\n\n            {/* Search Bar */}\n            <div className=\"flex-1 max-w-md mx-8 hidden md:block\">\n              <div className=\"relative\">\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search for pet products...\"\n                  className=\"w-full pr-10\"\n                />\n                <Button\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  className=\"absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-accent-green\"\n                >\n                  <Search className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n\n            {/* User Actions */}\n            <div className=\"flex items-center space-x-4\">\n              {!loading && (\n                user ? (\n                  <div className=\"flex items-center space-x-2\">\n                    <Button variant=\"ghost\" className=\"hidden md:flex items-center space-x-2 text-gray-700 hover:text-accent-green\">\n                      <User className=\"w-4 h-4\" />\n                      <span>Hello, {user.firstName || user.username || user.email?.split('@')[0]}</span>\n                    </Button>\n                    <Button \n                      variant=\"ghost\" \n                      onClick={handleSignOut}\n                      className=\"hidden md:flex items-center space-x-2 text-gray-700 hover:text-red-600\"\n                    >\n                      <LogOut className=\"w-4 h-4\" />\n                      <span>Sign Out</span>\n                    </Button>\n                  </div>\n                ) : (\n                  <div className=\"flex items-center space-x-2\">\n                    <Link href=\"/sign-in\">\n                      <Button variant=\"ghost\" className=\"hidden md:flex items-center space-x-2 text-gray-700 hover:text-accent-green\">\n                        <LogIn className=\"w-4 h-4\" />\n                        <span>Sign In</span>\n                      </Button>\n                    </Link>\n                    <Link href=\"/sign-up\">\n                      <Button variant=\"outline\" className=\"hidden md:flex items-center space-x-2 border-accent-green text-accent-green hover:bg-green-50\">\n                        <User className=\"w-4 h-4\" />\n                        <span>Sign Up</span>\n                      </Button>\n                    </Link>\n                  </div>\n                )\n              )}\n              <Button className=\"relative bg-primary-yellow hover:bg-yellow-400 text-gray-900\">\n                <ShoppingCart className=\"w-4 h-4 mr-2\" />\n                <span className=\"hidden sm:inline\">My Basket</span>\n                {cartCount > 0 && (\n                  <Badge className=\"absolute -top-2 -right-2 bg-red-500 text-white rounded-full w-5 h-5 text-xs flex items-center justify-center p-0\">\n                    {cartCount}\n                  </Badge>\n                )}\n              </Button>\n            </div>\n          </div>\n\n          {/* Navigation */}\n          <nav className=\"mt-4 border-t pt-4\">\n            <div className=\"flex items-center justify-between\">\n              <Button\n                variant=\"default\"\n                className=\"md:hidden bg-accent-green text-white hover:bg-green-700\"\n                onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n              >\n                <Menu className=\"w-4 h-4 mr-2\" />\n                Browse Categories\n              </Button>\n              <ul className=\"hidden md:flex space-x-8\">\n                <li>\n                  <Link href=\"/\" className=\"text-gray-700 hover:text-accent-green font-medium transition-colors\">\n                    Home\n                  </Link>\n                </li>\n                <li>\n                  <Link href=\"/privilege-club\" className=\"text-gray-700 hover:text-accent-green font-medium transition-colors\">\n                    Privilege Club\n                  </Link>\n                </li>\n                <li>\n                  <Link href=\"/cat-food\" className=\"text-gray-700 hover:text-accent-green font-medium transition-colors\">\n                    Cat Food\n                  </Link>\n                </li>\n                <li>\n                  <Link href=\"/dog-food\" className=\"text-gray-700 hover:text-accent-green font-medium transition-colors\">\n                    Dog Food\n                  </Link>\n                </li>\n                <li>\n                  <Link href=\"/cat-toys\" className=\"text-gray-700 hover:text-accent-green font-medium transition-colors\">\n                    Cat Toys\n                  </Link>\n                </li>\n                <li>\n                  <Link href=\"/cat-litter\" className=\"text-gray-700 hover:text-accent-green font-medium transition-colors\">\n                    Cat Litter\n                  </Link>\n                </li>\n                <li>\n                  <Link href=\"/reflex\" className=\"text-gray-700 hover:text-accent-green font-medium transition-colors\">\n                    Reflex\n                  </Link>\n                </li>\n                <li>\n                  <Link href=\"/blog\" className=\"text-gray-700 hover:text-accent-green font-medium transition-colors\">\n                    Blog\n                  </Link>\n                </li>\n              </ul>\n            </div>\n          </nav>\n        </div>\n      </header>\n    </div>\n  );\n}\n","size_bytes":8506},"client/src/components/hero-banner.tsx":{"content":"import bannerImage from \"@assets/Banner_1753440909945.jpg\";\n\nexport default function HeroBanner() {\n  return (\n    <section className=\"relative overflow-hidden\">\n      {/* Single Banner */}\n      <div className=\"relative\">\n        <div className=\"relative w-full\" style={{ aspectRatio: '16/9' }}>\n          <img\n            src={bannerImage}\n            alt=\"Meow Meow Pet Shop - Everything You Need\"\n            className=\"w-full h-full object-contain bg-gray-100\"\n          />\n        </div>\n      </div>\n\n      {/* Featured Categories Header */}\n      <div className=\"bg-white py-4\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center\">\n            <h3 className=\"text-2xl md:text-3xl font-bold text-purple-700 mb-2\">\n              FEATURED CATEGORIES\n            </h3>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":875},"client/src/components/newsletter.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function Newsletter() {\n  const [email, setEmail] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const handleSubscribe = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!email || !email.includes('@')) {\n      toast({\n        title: \"Invalid email\",\n        description: \"Please enter a valid email address.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsLoading(true);\n    \n    try {\n      await apiRequest('POST', '/api/newsletter', { email });\n      toast({\n        title: \"Successfully subscribed! 🐾\",\n        description: \"Thank you for subscribing to our newsletter.\",\n      });\n      setEmail(\"\");\n    } catch (error) {\n      toast({\n        title: \"Subscription failed\",\n        description: \"Please try again later.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <section className=\"py-16 bg-gradient-to-r from-primary-yellow to-yellow-400\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"text-center\">\n          <h3 className=\"text-3xl font-bold text-gray-800 mb-4\">Stay Pawsome! 🐾</h3>\n          <p className=\"text-gray-700 mb-8\">\n            Get the latest updates on pet care tips, new products, and exclusive offers\n          </p>\n          \n          <div className=\"max-w-md mx-auto\">\n            <form onSubmit={handleSubscribe} className=\"flex\">\n              <Input\n                type=\"email\"\n                placeholder=\"Enter your email address\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                className=\"flex-1 rounded-r-none border-r-0 focus:ring-2 focus:ring-accent-green\"\n                disabled={isLoading}\n              />\n              <Button\n                type=\"submit\"\n                disabled={isLoading}\n                className=\"bg-accent-green text-white hover:bg-green-700 font-semibold rounded-l-none px-6\"\n              >\n                {isLoading ? \"Subscribing...\" : \"Subscribe\"}\n              </Button>\n            </form>\n            <p className=\"text-sm text-gray-600 mt-3\">* No spam, only pawsome content!</p>\n          </div>\n        </div>\n      </div>\n      \n      {/* Decorative paw prints */}\n      <div className=\"absolute opacity-20 pointer-events-none\">\n        <div className=\"absolute top-10 left-10 text-2xl text-gray-800\">\n          <i className=\"fas fa-paw\"></i>\n        </div>\n        <div className=\"absolute bottom-10 right-10 text-2xl text-gray-800\">\n          <i className=\"fas fa-paw\"></i>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2909},"client/src/components/product-grid.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Star } from \"lucide-react\";\nimport { useCart } from \"@/hooks/use-cart\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Product } from \"@shared/schema\";\n\ninterface ProductGridProps {\n  title?: string;\n  bgColor?: string;\n  products: Product[];\n  isLoading: boolean;\n}\n\nexport default function ProductGrid({ title, bgColor = \"bg-white\", products, isLoading }: ProductGridProps) {\n  const { addToCart } = useCart();\n  const { toast } = useToast();\n\n  const handleAddToCart = (product: Product) => {\n    addToCart(product.id);\n    toast({\n      title: \"Added to cart!\",\n      description: `${product.name} has been added to your cart.`,\n    });\n  };\n\n  const renderStars = (rating: string) => {\n    const numRating = parseFloat(rating);\n    const stars = [];\n    \n    for (let i = 1; i <= 5; i++) {\n      if (i <= numRating) {\n        stars.push(<Star key={i} className=\"w-3 h-3 fill-yellow-400 text-yellow-400\" />);\n      } else if (i - 0.5 <= numRating) {\n        stars.push(<Star key={i} className=\"w-3 h-3 fill-yellow-400/50 text-yellow-400\" />);\n      } else {\n        stars.push(<Star key={i} className=\"w-3 h-3 text-gray-300\" />);\n      }\n    }\n    \n    return stars;\n  };\n\n  if (isLoading) {\n    return (\n      <section className={`py-12 ${bgColor}`}>\n        <div className=\"container mx-auto px-4\">\n          {title && (\n            <div className=\"text-center mb-8\">\n              <h3 className=\"text-2xl font-bold text-purple-700 mb-2\">{title}</h3>\n              <Button className=\"bg-purple-600 text-white px-6 py-2 rounded-lg text-sm\">\n                View All\n              </Button>\n            </div>\n          )}\n          <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4\">\n            {[...Array(6)].map((_, i) => (\n              <div key={i} className=\"bg-white rounded-lg h-64 animate-pulse border\"></div>\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section className={`py-12 ${bgColor}`}>\n      <div className=\"container mx-auto px-4\">\n        {title && (\n          <div className=\"text-center mb-8\">\n            <h3 className=\"text-2xl font-bold text-purple-700 mb-2\">{title}</h3>\n            <Button className=\"bg-purple-600 text-white px-6 py-2 rounded-lg text-sm hover:bg-purple-700\">\n              View All\n            </Button>\n          </div>\n        )}\n\n        <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4\">\n          {products.map((product) => (\n            <Card\n              key={product.id}\n              className=\"bg-white shadow-sm hover:shadow-md transition-shadow border rounded-lg\"\n            >\n              <CardContent className=\"p-3\">\n                <div className=\"relative mb-3\">\n                  <img\n                    src={product.image || \"\"}\n                    alt={product.name}\n                    className=\"w-full h-32 object-cover rounded-lg\"\n                  />\n                  {product.discountAmount && (\n                    <Badge className=\"absolute top-2 left-2 bg-red-500 text-white text-xs px-2 py-1\">\n                      -৳{product.discountAmount}\n                    </Badge>\n                  )}\n                </div>\n                <Badge className=\"bg-purple-100 text-purple-700 mb-2 text-xs\">\n                  Cat Food\n                </Badge>\n                <h4 className=\"font-medium mb-2 text-xs text-gray-800 line-clamp-2\">{product.name}</h4>\n                {product.rating && (\n                  <div className=\"flex items-center mb-2\">\n                    <div className=\"flex\">\n                      {renderStars(product.rating)}\n                    </div>\n                    <span className=\"text-xs text-gray-500 ml-1\">({product.rating})</span>\n                  </div>\n                )}\n                <div className=\"space-y-1\">\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-sm font-bold text-purple-600\">৳{product.price}</span>\n                    {product.originalPrice && (\n                      <span className=\"text-xs text-gray-400 line-through\">৳{product.originalPrice}</span>\n                    )}\n                  </div>\n                  <Button\n                    onClick={() => handleAddToCart(product)}\n                    className=\"w-full bg-purple-600 text-white hover:bg-purple-700 text-xs py-1 h-7\"\n                  >\n                    Add to Cart\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":4818},"client/src/components/why-choose-us.tsx":{"content":"import { Award, Truck, Shield } from \"lucide-react\";\n\nexport default function WhyChooseUs() {\n  const features = [\n    {\n      icon: Award,\n      title: \"Quality Products\",\n      description: \"Premium pet food and accessories from trusted brands worldwide\"\n    },\n    {\n      icon: Truck,\n      title: \"Fast Delivery\",\n      description: \"Quick delivery across Bangladesh to get your pet's essentials on time\"\n    },\n    {\n      icon: Shield,\n      title: \"Secure Payment\",\n      description: \"Safe and secure payment options for your peace of mind\"\n    }\n  ];\n\n  return (\n    <section className=\"py-16 bg-white\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"text-center mb-12\">\n          <h3 className=\"text-3xl font-bold text-gray-800 mb-4\">Why Choose Meow Meow Pet Shop?</h3>\n          <p className=\"text-gray-600\">Your pet's happiness is our priority</p>\n        </div>\n\n        <div className=\"grid md:grid-cols-3 gap-8\">\n          {features.map((feature, index) => {\n            const IconComponent = feature.icon;\n            return (\n              <div key={index} className=\"text-center\">\n                <div className=\"bg-accent-green text-white w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <IconComponent className=\"w-8 h-8\" />\n                </div>\n                <h4 className=\"text-xl font-semibold mb-3\">{feature.title}</h4>\n                <p className=\"text-gray-600\">{feature.description}</p>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":1584},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, useContext, useEffect, useState } from 'react'\nimport { onAuthStateChange, type AuthUser } from '@/lib/supabase'\n\n// Extended user type that matches our database schema\ninterface ExtendedUser extends AuthUser {\n  role?: string\n  firstName?: string\n  lastName?: string\n}\n\ninterface AuthContextType {\n  user: ExtendedUser | null\n  loading: boolean\n  signOut: () => void\n  refreshAuth: () => void\n}\n\nconst AuthContext = createContext<AuthContextType>({\n  user: null,\n  loading: true,\n  signOut: () => {},\n  refreshAuth: () => {},\n})\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<ExtendedUser | null>(null)\n  const [loading, setLoading] = useState(true)\n\n  const signOut = async () => {\n    // Sign out from Supabase if it's a regular user\n    if (user && user.role !== 'admin') {\n      const { signOut: supabaseSignOut } = await import('@/lib/supabase')\n      await supabaseSignOut()\n    }\n    \n    // Clear local state for all users (including admin)\n    setUser(null)\n    localStorage.removeItem('auth_user')\n  }\n\n  const refreshAuth = () => {\n    const storedUser = localStorage.getItem('auth_user')\n    if (storedUser) {\n      setUser(JSON.parse(storedUser))\n    } else {\n      setUser(null)\n    }\n  }\n\n  useEffect(() => {\n    // Initialize with stored user for admin access\n    const storedUser = localStorage.getItem('auth_user')\n    if (storedUser) {\n      setUser(JSON.parse(storedUser))\n    }\n\n    // Set up Supabase auth state listener\n    const { data: { subscription } } = onAuthStateChange((supabaseUser) => {\n      if (supabaseUser) {\n        // Convert Supabase user to our user format\n        const user: ExtendedUser = {\n          id: supabaseUser.id,\n          email: supabaseUser.email!,\n          name: supabaseUser.user_metadata?.name || `${supabaseUser.user_metadata?.firstName || ''} ${supabaseUser.user_metadata?.lastName || ''}`.trim(),\n          role: supabaseUser.user_metadata?.role || 'user',\n          firstName: supabaseUser.user_metadata?.firstName,\n          lastName: supabaseUser.user_metadata?.lastName\n        }\n        setUser(user)\n        // Also store in localStorage for consistency\n        localStorage.setItem('auth_user', JSON.stringify(user))\n      } else {\n        // Only clear if it's not an admin user from localStorage\n        const storedUser = localStorage.getItem('auth_user')\n        if (storedUser) {\n          const parsed = JSON.parse(storedUser)\n          if (parsed.role !== 'admin') {\n            setUser(null)\n            localStorage.removeItem('auth_user')\n          }\n        } else {\n          setUser(null)\n        }\n      }\n      setLoading(false)\n    })\n\n    return () => subscription.unsubscribe()\n  }, [])\n\n  return (\n    <AuthContext.Provider value={{ user, loading, signOut, refreshAuth }}>\n      {children}\n    </AuthContext.Provider>\n  )\n}\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext)\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider')\n  }\n  return context\n}","size_bytes":3096},"client/src/hooks/use-cart.tsx":{"content":"import { useState, useEffect, createContext, useContext } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { CartItem, Product } from \"@shared/schema\";\n\ninterface CartContextType {\n  cartItems: CartItem[];\n  cartCount: number;\n  addToCart: (productId: string, quantity?: number) => void;\n  updateQuantity: (itemId: string, quantity: number) => void;\n  removeFromCart: (itemId: string) => void;\n  clearCart: () => void;\n  isLoading: boolean;\n}\n\nconst CartContext = createContext<CartContextType | undefined>(undefined);\n\nexport function CartProvider({ children }: { children: React.ReactNode }) {\n  const [sessionId] = useState(() => {\n    // Generate or get session ID from localStorage\n    let id = localStorage.getItem('session-id');\n    if (!id) {\n      id = Math.random().toString(36).substring(2) + Date.now().toString(36);\n      localStorage.setItem('session-id', id);\n    }\n    return id;\n  });\n\n  const queryClient = useQueryClient();\n\n  const { data: cartItems = [], isLoading } = useQuery({\n    queryKey: ['/api/cart', sessionId],\n    enabled: !!sessionId,\n  });\n\n  const addToCartMutation = useMutation({\n    mutationFn: async ({ productId, quantity = 1 }: { productId: string; quantity?: number }) => {\n      const response = await apiRequest('POST', '/api/cart', {\n        sessionId,\n        productId,\n        quantity,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/cart', sessionId] });\n    },\n  });\n\n  const updateQuantityMutation = useMutation({\n    mutationFn: async ({ itemId, quantity }: { itemId: string; quantity: number }) => {\n      const response = await apiRequest('PUT', `/api/cart/${itemId}`, { quantity });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/cart', sessionId] });\n    },\n  });\n\n  const removeFromCartMutation = useMutation({\n    mutationFn: async (itemId: string) => {\n      const response = await apiRequest('DELETE', `/api/cart/${itemId}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/cart', sessionId] });\n    },\n  });\n\n  const clearCartMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest('DELETE', `/api/cart/session/${sessionId}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/cart', sessionId] });\n    },\n  });\n\n  const cartCount = cartItems.reduce((total: number, item: CartItem) => total + item.quantity, 0);\n\n  const contextValue: CartContextType = {\n    cartItems,\n    cartCount,\n    addToCart: (productId: string, quantity = 1) => {\n      addToCartMutation.mutate({ productId, quantity });\n    },\n    updateQuantity: (itemId: string, quantity: number) => {\n      updateQuantityMutation.mutate({ itemId, quantity });\n    },\n    removeFromCart: (itemId: string) => {\n      removeFromCartMutation.mutate(itemId);\n    },\n    clearCart: () => {\n      clearCartMutation.mutate();\n    },\n    isLoading,\n  };\n\n  return (\n    <CartContext.Provider value={contextValue}>\n      {children}\n    </CartContext.Provider>\n  );\n}\n\nexport function useCart() {\n  const context = useContext(CartContext);\n  if (context === undefined) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n}\n","size_bytes":3494},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/data.ts":{"content":"export interface Product {\n  id: number;\n  name: string;\n  description: string;\n  price: number;\n  originalPrice?: number;\n  category: string;\n  subcategory?: string;\n  brand: string;\n  image: string;\n  images?: string[];\n  rating: number;\n  reviews: number;\n  stockStatus: 'In Stock' | 'Low Stock' | 'Out of Stock';\n  stockQuantity: number;\n  tags: string[];\n  features?: string[];\n  specifications?: { [key: string]: string };\n  isNew?: boolean;\n  isBestseller?: boolean;\n  isOnSale?: boolean;\n  discount?: number;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface Category {\n  id: number;\n  name: string;\n  slug: string;\n  description?: string;\n  image?: string;\n  parentId?: number;\n  isActive: boolean;\n}\n\nexport interface Brand {\n  id: number;\n  name: string;\n  slug: string;\n  logo?: string;\n  description?: string;\n  isActive: boolean;\n}\n\nexport interface BlogPost {\n  id: number;\n  title: string;\n  slug: string;\n  excerpt: string;\n  content: string;\n  image: string;\n  author: string;\n  publishedAt: string;\n  tags: string[];\n  isPublished: boolean;\n}\n\nexport interface Testimonial {\n  id: number;\n  name: string;\n  role: string;\n  location: string;\n  image: string;\n  text: string;\n  rating: number;\n  isApproved: boolean;\n  createdAt: string;\n}\n\n// Sample data for development\nexport const sampleProducts: Product[] = [\n  {\n    id: 1,\n    name: 'Premium Dry Cat Food (5kg)',\n    description: 'High-quality dry cat food with real chicken and essential nutrients',\n    price: 2400,\n    category: 'Cat Food',\n    subcategory: 'Dry Food',\n    brand: 'Royal Canin',\n    image: 'https://images.unsplash.com/photo-1589924691995-400dc9ecc119?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n    rating: 5,\n    reviews: 124,\n    stockStatus: 'In Stock',\n    stockQuantity: 50,\n    tags: ['premium', 'bestseller', 'chicken'],\n    isBestseller: true,\n    createdAt: '2024-01-15T00:00:00Z',\n    updatedAt: '2024-03-15T00:00:00Z'\n  }\n];\n\nexport const sampleCategories: Category[] = [\n  {\n    id: 1,\n    name: 'Cat Food',\n    slug: 'cat-food',\n    description: 'Premium food for cats of all ages',\n    isActive: true\n  },\n  {\n    id: 2,\n    name: 'Dog Food',\n    slug: 'dog-food', \n    description: 'Nutritious food for dogs of all sizes',\n    isActive: true\n  }\n];\n\nexport const sampleBrands: Brand[] = [\n  {\n    id: 1,\n    name: 'Royal Canin',\n    slug: 'royal-canin',\n    description: 'Premium pet nutrition brand',\n    isActive: true\n  },\n  {\n    id: 2,\n    name: 'Hills',\n    slug: 'hills',\n    description: 'Science-based pet nutrition',\n    isActive: true\n  }\n];\n","size_bytes":2581},"client/src/lib/product-data.ts":{"content":"export interface Product {\n  id: string\n  name: string\n  price: number\n  originalPrice?: number\n  image: string\n  rating: number\n  reviews: number\n  category: string\n  description: string\n  tags: string[]\n  stock: number\n  isBestSeller?: boolean\n  isNew?: boolean\n  isLowStock?: boolean\n}\n\nexport const categories = [\n  { id: 'cat-food', name: 'Cat Food', icon: '🐱' },\n  { id: 'dog-food', name: 'Dog Food', icon: '🐶' },\n  { id: 'cat-toys', name: 'Cat Toys', icon: '🎾' },\n  { id: 'cat-litter', name: 'Cat Litter', icon: '🧽' },\n  { id: 'toys-treats', name: 'Toys & Treats', icon: '🎾' },\n  { id: 'grooming', name: 'Grooming', icon: '🧴' },\n  { id: 'health-care', name: 'Health Care', icon: '💊' },\n  { id: 'accessories', name: 'Accessories', icon: '🎀' },\n  { id: 'reflex', name: 'Reflex Brand', icon: '⭐' },\n]\n\n// Mock data - MongoDB-ready structure\nexport const productsData: Record<string, Product[]> = {\n  'cat-food': [\n    {\n      id: 'cf001',\n      name: 'Royal Canin Adult Cat Food',\n      price: 1850,\n      originalPrice: 2100,\n      image: 'https://images.unsplash.com/photo-1589924691995-400dc9ecc119?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.8,\n      reviews: 124,\n      category: 'cat-food',\n      description: 'Premium dry cat food for adult cats with balanced nutrition. Royal Canin brand quality with 2kg weight.',\n      tags: ['Premium', 'Adult', 'Royal Canin', '2kg'],\n      stock: 45,\n      isBestSeller: true,\n    },\n    {\n      id: 'cf002',\n      name: 'Whiskas Cat Pouches Variety Pack',\n      price: 450,\n      originalPrice: 520,\n      image: 'https://images.unsplash.com/photo-1574158622682-e40e69881006?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.6,\n      reviews: 89,\n      category: 'cat-food',\n      description: 'Convenient variety pack of cat pouches with different flavors. Contains 12 pouches.',\n      tags: ['Pouches', 'Variety', 'Whiskas', '12 pouches'],\n      stock: 78,\n    },\n    {\n      id: 'cf003',\n      name: 'Hills Science Diet Kitten Food',\n      price: 2200,\n      originalPrice: 2500,\n      image: 'https://images.unsplash.com/photo-1548199973-03cce0bbc87b?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.9,\n      reviews: 156,\n      category: 'cat-food',\n      description: 'Specially formulated nutrition for growing kittens. Hills Science Diet quality with 1.5kg weight.',\n      tags: ['Kitten', 'Science Diet', 'Hills', '1.5kg'],\n      stock: 23,\n      isNew: true,\n    },\n    {\n      id: 'cf004',\n      name: 'Felix As Good As It Looks',\n      price: 320,\n      originalPrice: 380,\n      image: 'https://images.unsplash.com/photo-1606316321469-4d5b7d0e21c0?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.4,\n      reviews: 67,\n      category: 'cat-food',\n      description: 'Delicious wet food with meat chunks in jelly. Felix brand quality with 400g weight.',\n      tags: ['Wet Food', 'Felix', '400g'],\n      stock: 0,\n      isLowStock: true,\n    },\n    {\n      id: 'cf005',\n      name: 'Me-O Cat Treats Tuna',\n      price: 180,\n      originalPrice: 220,\n      image: 'https://images.unsplash.com/photo-1589924691995-400dc9ecc119?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.5,\n      reviews: 43,\n      category: 'cat-food',\n      description: 'Delicious tuna flavored treats for cats. Me-O brand quality with 150g weight.',\n      tags: ['Treats', 'Tuna', 'Me-O', '150g'],\n      stock: 67,\n    },\n    {\n      id: 'cf006',\n      name: 'Purina Pro Plan Premium Dry',\n      price: 3200,\n      originalPrice: 3600,\n      image: 'https://images.unsplash.com/photo-1606316321469-4d5b7d0e21c0?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.7,\n      reviews: 92,\n      category: 'cat-food',\n      description: 'Premium dry cat food for optimal nutrition. Purina Pro Plan quality with 3kg weight.',\n      tags: ['Premium', 'Dry Food', 'Purina', '3kg'],\n      stock: 34,\n    },\n  ],\n  'dog-food': [\n    {\n      id: 'df001',\n      name: 'Royal Canin Medium Adult Dog Food',\n      price: 2250,\n      originalPrice: 2600,\n      image: 'https://images.unsplash.com/photo-1583337130417-3346a1be7dee?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.9,\n      reviews: 167,\n      category: 'dog-food',\n      description: 'Complete nutrition for medium breed adult dogs. Royal Canin brand quality with 3kg weight.',\n      tags: ['Adult', 'Medium Breed', 'Royal Canin', '3kg'],\n      stock: 56,\n      isBestSeller: true,\n    },\n    {\n      id: 'df002',\n      name: 'Pedigree Puppy Dry Food Chicken',\n      price: 850,\n      originalPrice: 1000,\n      image: 'https://images.unsplash.com/photo-1552053628-0dcb5a60e3de?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.5,\n      reviews: 89,\n      category: 'dog-food',\n      description: 'Chicken flavored dry food specially formulated for puppies. Pedigree brand quality with 1.2kg weight.',\n      tags: ['Puppy', 'Chicken', 'Pedigree', '1.2kg'],\n      stock: 34,\n    },\n    {\n      id: 'df003',\n      name: 'Hills Science Diet Puppy Food',\n      price: 1850,\n      originalPrice: 2100,\n      image: 'https://images.unsplash.com/photo-1587402092301-725e37c70fd8?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.8,\n      reviews: 134,\n      category: 'dog-food',\n      description: 'Science-based nutrition for growing puppies. Hills Science Diet quality with 1.5kg weight.',\n      tags: ['Puppy', 'Science Diet', 'Hills', '1.5kg'],\n      stock: 12,\n      isNew: true,\n    },\n    {\n      id: 'df004',\n      name: 'Cesar Adult Dog Treats',\n      price: 420,\n      originalPrice: 480,\n      image: 'https://images.unsplash.com/photo-1601758125946-6ec2ef64daf8?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.6,\n      reviews: 76,\n      category: 'dog-food',\n      description: 'Delicious treats for adult dogs. Cesar brand quality with 300g weight.',\n      tags: ['Treats', 'Adult', 'Cesar', '300g'],\n      stock: 0,\n      isLowStock: true,\n    },\n    {\n      id: 'df005',\n      name: 'Nutro Max Adult Dry Food',\n      price: 3200,\n      originalPrice: 3600,\n      image: 'https://images.unsplash.com/photo-1583337130417-3346a1be7dee?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.7,\n      reviews: 112,\n      category: 'dog-food',\n      description: 'Premium dry food for adult dogs. Nutro Max quality with 5kg weight.',\n      tags: ['Adult', 'Dry Food', 'Nutro', '5kg'],\n      stock: 23,\n    },\n    {\n      id: 'df006',\n      name: 'Cosequin Dog Joint Health',\n      price: 1850,\n      originalPrice: 2200,\n      image: 'https://images.unsplash.com/photo-1587402092301-725e37c70fd8?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.8,\n      reviews: 58,\n      category: 'dog-food',\n      description: 'Joint health supplement for dogs. Cosequin brand quality with 60 tablets.',\n      tags: ['Supplement', 'Joint Health', 'Cosequin', '60 tablets'],\n      stock: 45,\n    },\n  ],\n  'toys-treats': [\n    {\n      id: 'tt001',\n      name: 'Interactive Cat Wand Toy',\n      price: 450,\n      image: 'https://images.unsplash.com/photo-1601758228041-f3b2795255f1?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.6,\n      reviews: 156,\n      category: 'toys-treats',\n      description: 'Fun interactive wand toy to keep cats active and engaged.',\n      tags: ['Interactive', 'Cat'],\n      stock: 89,\n      isBestSeller: true,\n    },\n    {\n      id: 'tt002',\n      name: 'Kong Classic Dog Toy',\n      price: 850,\n      image: 'https://images.unsplash.com/photo-1605043204319-d14e5ba4719e?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.8,\n      reviews: 234,\n      category: 'toys-treats',\n      description: 'Durable rubber toy perfect for stuffing with treats.',\n      tags: ['Durable', 'Dog'],\n      stock: 67,\n    },\n    {\n      id: 'tt003',\n      name: 'Catnip Mice Toys (Pack of 6)',\n      price: 320,\n      image: 'https://images.unsplash.com/photo-1615789591457-74a63395c990?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.5,\n      reviews: 189,\n      category: 'toys-treats',\n      description: 'Soft mice toys filled with premium catnip.',\n      tags: ['Catnip', 'Pack'],\n      stock: 45,\n      isNew: true,\n    },\n    {\n      id: 'tt004',\n      name: 'Dog Training Treats',\n      price: 650,\n      image: 'https://images.unsplash.com/photo-1589924691995-400dc9ecc119?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.7,\n      reviews: 145,\n      category: 'toys-treats',\n      description: 'High-value treats perfect for training sessions.',\n      tags: ['Training', 'Treats'],\n      stock: 7,\n      isLowStock: true,\n    },\n  ],\n  'grooming': [\n    {\n      id: 'gr001',\n      name: 'Professional Pet Grooming Kit',\n      price: 2800,\n      originalPrice: 3200,\n      image: 'https://images.unsplash.com/photo-1589941013453-ec89f33b5e95?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.7,\n      reviews: 98,\n      category: 'grooming',\n      description: 'Complete grooming kit with brushes, clippers, and accessories.',\n      tags: ['Professional', 'Complete Kit'],\n      stock: 23,\n      isBestSeller: true,\n    },\n    {\n      id: 'gr002',\n      name: 'Pet Shampoo & Conditioner Set',\n      price: 950,\n      image: 'https://images.unsplash.com/photo-1628009368231-7bb7cfcb0def?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.5,\n      reviews: 167,\n      category: 'grooming',\n      description: 'Gentle shampoo and conditioner for sensitive pet skin.',\n      tags: ['Gentle', 'Set'],\n      stock: 54,\n    },\n    {\n      id: 'gr003',\n      name: 'Nail Clippers for Dogs & Cats',\n      price: 450,\n      image: 'https://images.unsplash.com/photo-1606316321469-4d5b7d0e21c0?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.6,\n      reviews: 234,\n      category: 'grooming',\n      description: 'Safe and easy-to-use nail clippers for all pet sizes.',\n      tags: ['Safety', 'Universal'],\n      stock: 78,\n      isNew: true,\n    },\n    {\n      id: 'gr004',\n      name: 'De-shedding Brush',\n      price: 750,\n      image: 'https://images.unsplash.com/photo-1548199973-03cce0bbc87b?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.8,\n      reviews: 156,\n      category: 'grooming',\n      description: 'Reduces shedding by up to 90% with gentle bristles.',\n      tags: ['De-shedding', 'Gentle'],\n      stock: 3,\n      isLowStock: true,\n    },\n  ],\n  'health-care': [\n    {\n      id: 'hc001',\n      name: 'Pet Multivitamin Supplements',\n      price: 1200,\n      image: 'https://images.unsplash.com/photo-1587402092301-725e37c70fd8?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.6,\n      reviews: 123,\n      category: 'health-care',\n      description: 'Daily multivitamin for optimal pet health and immunity.',\n      tags: ['Multivitamin', 'Daily'],\n      stock: 67,\n      isBestSeller: true,\n    },\n    {\n      id: 'hc002',\n      name: 'Flea & Tick Prevention Collar',\n      price: 850,\n      image: 'https://images.unsplash.com/photo-1601758125946-6ec2ef64daf8?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.5,\n      reviews: 189,\n      category: 'health-care',\n      description: '8-month protection against fleas and ticks.',\n      tags: ['Prevention', '8-month'],\n      stock: 45,\n    },\n    {\n      id: 'hc003',\n      name: 'Digestive Health Probiotics',\n      price: 1500,\n      image: 'https://images.unsplash.com/photo-1552053628-0dcb5a60e3de?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.8,\n      reviews: 87,\n      category: 'health-care',\n      description: 'Supports digestive health with beneficial probiotics.',\n      tags: ['Probiotics', 'Digestive'],\n      stock: 34,\n      isNew: true,\n    },\n    {\n      id: 'hc004',\n      name: 'Ear Cleaning Solution',\n      price: 650,\n      image: 'https://images.unsplash.com/photo-1605043204319-d14e5ba4719e?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.4,\n      reviews: 156,\n      category: 'health-care',\n      description: 'Gentle ear cleaning solution for regular maintenance.',\n      tags: ['Gentle', 'Maintenance'],\n      stock: 9,\n      isLowStock: true,\n    },\n  ],\n  'accessories': [\n    {\n      id: 'ac001',\n      name: 'Adjustable Pet Harness',\n      price: 950,\n      originalPrice: 1200,\n      image: 'https://images.unsplash.com/photo-1615789591457-74a63395c990?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.7,\n      reviews: 234,\n      category: 'accessories',\n      description: 'Comfortable and secure harness for daily walks.',\n      tags: ['Adjustable', 'Comfortable'],\n      stock: 56,\n      isBestSeller: true,\n    },\n    {\n      id: 'ac002',\n      name: 'Stainless Steel Food Bowls',\n      price: 750,\n      image: 'https://images.unsplash.com/photo-1606316321469-4d5b7d0e21c0?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.6,\n      reviews: 189,\n      category: 'accessories',\n      description: 'Durable stainless steel bowls, set of 2.',\n      tags: ['Stainless Steel', 'Set of 2'],\n      stock: 78,\n    },\n    {\n      id: 'ac003',\n      name: 'Orthopedic Pet Bed',\n      price: 2400,\n      image: 'https://images.unsplash.com/photo-1548199973-03cce0bbc87b?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.8,\n      reviews: 167,\n      category: 'accessories',\n      description: 'Memory foam pet bed for joint support and comfort.',\n      tags: ['Orthopedic', 'Memory Foam'],\n      stock: 23,\n      isNew: true,\n    },\n    {\n      id: 'ac004',\n      name: 'Retractable Dog Leash',\n      price: 650,\n      image: 'https://images.unsplash.com/photo-1628009368231-7bb7cfcb0def?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.5,\n      reviews: 145,\n      category: 'accessories',\n      description: '16ft retractable leash with ergonomic handle.',\n      tags: ['Retractable', '16ft'],\n      stock: 4,\n      isLowStock: true,\n    },\n  ],\n  'cat-toys': [\n    {\n      id: 'ct001',\n      name: 'Interactive Feather Wand Toy',\n      price: 650,\n      originalPrice: 800,\n      image: 'https://images.unsplash.com/photo-1601758228041-f3b2795255f1?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.8,\n      reviews: 124,\n      category: 'cat-toys',\n      description: 'Fun interactive wand toy to keep cats active and engaged. Features retractable design with natural feathers.',\n      tags: ['Interactive', 'Feather', 'PetSafe', 'Retractable'],\n      stock: 89,\n      isBestSeller: true,\n    },\n    {\n      id: 'ct002',\n      name: 'Catnip Filled Mouse Toys Set',\n      price: 350,\n      originalPrice: 420,\n      image: 'https://images.unsplash.com/photo-1615789591457-74a63395c990?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.6,\n      reviews: 89,\n      category: 'cat-toys',\n      description: 'Soft mice toys filled with premium catnip. Set of 6 toys with organic catnip.',\n      tags: ['Catnip', 'Mice', 'Kong', 'Set of 6'],\n      stock: 67,\n    },\n    {\n      id: 'ct003',\n      name: 'Automatic Laser Pointer',\n      price: 1200,\n      originalPrice: 1500,\n      image: 'https://images.unsplash.com/photo-1605043204319-d14e5ba4719e?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.7,\n      reviews: 156,\n      category: 'cat-toys',\n      description: 'Automatic laser pointer with timer and random patterns. PetLibro brand with auto timer feature.',\n      tags: ['Laser', 'Automatic', 'PetLibro', 'Timer'],\n      stock: 45,\n      isNew: true,\n    },\n    {\n      id: 'ct004',\n      name: 'Multi-Level Cat Tree Tower',\n      price: 8500,\n      originalPrice: 10000,\n      image: 'https://images.unsplash.com/photo-1589941013453-ec89f33b5e95?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.9,\n      reviews: 67,\n      category: 'cat-toys',\n      description: 'Large cat tree with 6 levels and sisal scratching posts. Armarkat brand quality construction.',\n      tags: ['Cat Tree', '6 Levels', 'Armarkat', 'Scratching'],\n      stock: 0,\n      isLowStock: true,\n    },\n    {\n      id: 'ct005',\n      name: 'Cat Tunnel Play System',\n      price: 1850,\n      originalPrice: 2200,\n      image: 'https://images.unsplash.com/photo-1628009368231-7bb7cfcb0def?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.5,\n      reviews: 43,\n      category: 'cat-toys',\n      description: 'Collapsible 3-way tunnel system for cats. Pawaboo brand with easy storage.',\n      tags: ['Tunnel', 'Collapsible', 'Pawaboo', '3-way'],\n      stock: 23,\n    },\n    {\n      id: 'ct006',\n      name: 'Electronic Motion Fish Toy',\n      price: 950,\n      originalPrice: 1200,\n      image: 'https://images.unsplash.com/photo-1605043204319-d14e5ba4719e?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.4,\n      reviews: 92,\n      category: 'cat-toys',\n      description: 'Electronic fish toy with motion sensor and USB rechargeable battery. Potaroma brand quality.',\n      tags: ['Electronic', 'Motion Sensor', 'Potaroma', 'USB Rechargeable'],\n      stock: 34,\n    },\n  ],\n  'cat-litter': [\n    {\n      id: 'cl001',\n      name: 'Tidy Cats Clumping Litter',\n      price: 1250,\n      originalPrice: 1500,\n      image: 'https://images.unsplash.com/photo-1606316321469-4d5b7d0e21c0?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.8,\n      reviews: 234,\n      category: 'cat-litter',\n      description: 'Premium clumping cat litter for easy cleanup. Tidy Cats brand quality with 9kg size.',\n      tags: ['Clumping', 'Tidy Cats', '9kg', 'Easy Cleanup'],\n      stock: 78,\n      isBestSeller: true,\n    },\n    {\n      id: 'cl002',\n      name: 'Ever Clean Scented Multi-Cat',\n      price: 1850,\n      originalPrice: 2100,\n      image: 'https://images.unsplash.com/photo-1548199973-03cce0bbc87b?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.7,\n      reviews: 189,\n      category: 'cat-litter',\n      description: 'Scented litter designed for multi-cat households. Ever Clean brand with 10kg size.',\n      tags: ['Scented', 'Multi-Cat', 'Ever Clean', '10kg'],\n      stock: 56,\n    },\n    {\n      id: 'cl003',\n      name: 'Stainless Steel Litter Scoop',\n      price: 450,\n      originalPrice: 550,\n      image: 'https://images.unsplash.com/photo-1628009368231-7bb7cfcb0def?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.6,\n      reviews: 156,\n      category: 'cat-litter',\n      description: 'Durable stainless steel litter scoop for easy cleaning. iPrimio brand large size.',\n      tags: ['Stainless Steel', 'Scoop', 'iPrimio', 'Large'],\n      stock: 67,\n    },\n    {\n      id: 'cl004',\n      name: 'Covered Cat Litter Box Large',\n      price: 2200,\n      originalPrice: 2600,\n      image: 'https://images.unsplash.com/photo-1589941013453-ec89f33b5e95?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.5,\n      reviews: 87,\n      category: 'cat-litter',\n      description: 'Large covered litter box for privacy and odor control. Petmate brand 64x49x38cm size.',\n      tags: ['Covered', 'Large', 'Petmate', '64x49x38cm'],\n      stock: 0,\n      isLowStock: true,\n    },\n    {\n      id: 'cl005',\n      name: 'Washable Litter Mat',\n      price: 850,\n      originalPrice: 1000,\n      image: 'https://images.unsplash.com/photo-1615789591457-74a63395c990?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.4,\n      reviews: 143,\n      category: 'cat-litter',\n      description: 'Washable mat to catch litter tracking. Gorilla Grip brand 76x61cm size.',\n      tags: ['Washable', 'Mat', 'Gorilla Grip', '76x61cm'],\n      stock: 45,\n    },\n    {\n      id: 'cl006',\n      name: 'PetSafe ScoopFree Self-Cleaning',\n      price: 15000,\n      originalPrice: 18000,\n      image: 'https://images.unsplash.com/photo-1589941013453-ec89f33b5e95?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.9,\n      reviews: 92,\n      category: 'cat-litter',\n      description: 'Automatic self-cleaning litter box system. PetSafe brand with advanced technology.',\n      tags: ['Self-Cleaning', 'Automatic', 'PetSafe', 'Advanced'],\n      stock: 12,\n      isNew: true,\n    },\n  ],\n  'reflex': [\n    {\n      id: 'rf001',\n      name: 'Reflex Plus Adult Cat Food Chicken',\n      price: 1850,\n      originalPrice: 2100,\n      image: 'https://images.unsplash.com/photo-1589924691995-400dc9ecc119?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.9,\n      reviews: 267,\n      category: 'reflex',\n      description: 'Complete and balanced nutrition for adult cats. Reflex Plus chicken formula with 3kg weight.',\n      tags: ['Adult Cat', 'Chicken', 'Reflex Plus', '3kg'],\n      stock: 89,\n      isBestSeller: true,\n    },\n    {\n      id: 'rf002',\n      name: 'Reflex Plus Puppy Food Lamb & Rice',\n      price: 2200,\n      originalPrice: 2500,\n      image: 'https://images.unsplash.com/photo-1552053628-0dcb5a60e3de?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.8,\n      reviews: 189,\n      category: 'reflex',\n      description: 'High protein puppy food with lamb and rice. Reflex Plus formula with 3kg weight.',\n      tags: ['Puppy', 'Lamb & Rice', 'Reflex Plus', '3kg'],\n      stock: 67,\n    },\n    {\n      id: 'rf003',\n      name: 'Reflex Plus Kitten Food Salmon',\n      price: 1650,\n      originalPrice: 1900,\n      image: 'https://images.unsplash.com/photo-1548199973-03cce0bbc87b?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.9,\n      reviews: 234,\n      category: 'reflex',\n      description: 'DHA enriched kitten food with salmon. Reflex Plus formula with 1.5kg weight.',\n      tags: ['Kitten', 'Salmon', 'Reflex Plus', '1.5kg'],\n      stock: 45,\n      isNew: true,\n    },\n    {\n      id: 'rf004',\n      name: 'Reflex Plus Adult Dog Food Beef',\n      price: 2450,\n      originalPrice: 2800,\n      image: 'https://images.unsplash.com/photo-1583337130417-3346a1be7dee?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.7,\n      reviews: 156,\n      category: 'reflex',\n      description: 'Premium quality adult dog food with beef. Reflex Plus formula with 15kg weight.',\n      tags: ['Adult Dog', 'Beef', 'Reflex Plus', '15kg'],\n      stock: 0,\n      isLowStock: true,\n    },\n    {\n      id: 'rf005',\n      name: 'Reflex Grain-Free Cat Food Turkey',\n      price: 2800,\n      originalPrice: 3200,\n      image: 'https://images.unsplash.com/photo-1589924691995-400dc9ecc119?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.8,\n      reviews: 98,\n      category: 'reflex',\n      description: 'Grain-free cat food recipe with turkey. Reflex formula with 2kg weight.',\n      tags: ['Grain-Free', 'Turkey', 'Reflex', '2kg'],\n      stock: 23,\n    },\n    {\n      id: 'rf006',\n      name: 'Reflex Senior Dog Food Formula',\n      price: 2600,\n      originalPrice: 3000,\n      image: 'https://images.unsplash.com/photo-1583337130417-3346a1be7dee?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      rating: 4.6,\n      reviews: 124,\n      category: 'reflex',\n      description: 'Joint support formula for senior dogs. Reflex formula with 12kg weight.',\n      tags: ['Senior Dog', 'Joint Support', 'Reflex', '12kg'],\n      stock: 34,\n    },\n  ],\n}\n\nexport function getProductsByCategory(categoryId: string): Product[] {\n  return productsData[categoryId] || []\n}\n\nexport function getCategoryAnalytics(categoryId: string) {\n  const products = getProductsByCategory(categoryId)\n  \n  if (products.length === 0) {\n    return {\n      lowestPriced: null,\n      highestPriced: null,\n      highestRated: null,\n      bestSeller: null,\n    }\n  }\n\n  const lowestPriced = products.reduce((min, product) => \n    product.price < min.price ? product : min\n  )\n  \n  const highestPriced = products.reduce((max, product) => \n    product.price > max.price ? product : max\n  )\n  \n  const highestRated = products.reduce((max, product) => \n    product.rating > max.rating ? product : max\n  )\n  \n  const bestSeller = products.find(product => product.isBestSeller) || products[0]\n\n  return {\n    lowestPriced,\n    highestPriced,\n    highestRated,\n    bestSeller,\n  }\n}","size_bytes":24132},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/search-data.ts":{"content":"// Comprehensive search data for all products across all pages\nexport interface SearchableProduct {\n  id: string;\n  name: string;\n  category: string;\n  brand?: string;\n  price: string;\n  page: string;\n  route: string;\n  keywords: string[];\n}\n\nexport const searchableProducts: SearchableProduct[] = [\n  // Cat Food Products\n  {\n    id: 'cat-1',\n    name: 'Royal Canin Adult Cat Food',\n    category: 'Adult Food',\n    brand: 'Royal Canin',\n    price: '৳1,850',\n    page: 'Cat Food',\n    route: '/cat-food',\n    keywords: ['royal', 'canin', 'adult', 'cat', 'food', 'dry', 'premium']\n  },\n  {\n    id: 'cat-2',\n    name: 'Whiskas Cat Pouches Variety Pack',\n    category: 'Cat Pouches',\n    brand: 'Whiskas',\n    price: '৳450',\n    page: 'Cat Food',\n    route: '/cat-food',\n    keywords: ['whiskas', 'pouches', 'wet', 'variety', 'pack']\n  },\n  {\n    id: 'cat-3',\n    name: 'Hills Science Diet Kitten Food',\n    category: 'Kitten Food',\n    brand: 'Hills',\n    price: '৳2,200',\n    page: 'Cat Food',\n    route: '/cat-food',\n    keywords: ['hills', 'science', 'diet', 'kitten', 'food', 'premium']\n  },\n  {\n    id: 'cat-4',\n    name: 'Felix As Good As It Looks',\n    category: 'Wet Food',\n    brand: 'Felix',\n    price: '৳320',\n    page: 'Cat Food',\n    route: '/cat-food',\n    keywords: ['felix', 'wet', 'food', 'good', 'looks']\n  },\n  {\n    id: 'cat-5',\n    name: 'Me-O Cat Treats Tuna',\n    category: 'Cat Treats',\n    brand: 'Me-O',\n    price: '৳180',\n    page: 'Cat Food',\n    route: '/cat-food',\n    keywords: ['me-o', 'treats', 'tuna', 'snack']\n  },\n  {\n    id: 'cat-6',\n    name: 'Purina Pro Plan Premium Dry',\n    category: 'Premium Dry',\n    brand: 'Purina',\n    price: '৳3,200',\n    page: 'Cat Food',\n    route: '/cat-food',\n    keywords: ['purina', 'pro', 'plan', 'premium', 'dry']\n  },\n\n  // Dog Food Products\n  {\n    id: 'dog-1',\n    name: 'Royal Canin Medium Adult Dog Food',\n    category: 'Dog Adult Food',\n    brand: 'Royal Canin',\n    price: '৳2,250',\n    page: 'Dog Food',\n    route: '/dog-food',\n    keywords: ['royal', 'canin', 'medium', 'adult', 'dog', 'food']\n  },\n  {\n    id: 'dog-2',\n    name: 'Pedigree Puppy Dry Food Chicken',\n    category: 'Puppy Dry Food',\n    brand: 'Pedigree',\n    price: '৳850',\n    page: 'Dog Food',\n    route: '/dog-food',\n    keywords: ['pedigree', 'puppy', 'dry', 'chicken', 'food']\n  },\n  {\n    id: 'dog-3',\n    name: 'Hills Science Diet Puppy Food',\n    category: 'Puppy Food',\n    brand: 'Hills',\n    price: '৳1,850',\n    page: 'Dog Food',\n    route: '/dog-food',\n    keywords: ['hills', 'science', 'diet', 'puppy', 'food']\n  },\n  {\n    id: 'dog-4',\n    name: 'Cesar Adult Dog Treats',\n    category: 'Adult Treats',\n    brand: 'Cesar',\n    price: '৳420',\n    page: 'Dog Food',\n    route: '/dog-food',\n    keywords: ['cesar', 'adult', 'dog', 'treats', 'snack']\n  },\n  {\n    id: 'dog-5',\n    name: 'Nutro Max Adult Dry Food',\n    category: 'Adult Dry Food',\n    brand: 'Nutro',\n    price: '৳3,200',\n    page: 'Dog Food',\n    route: '/dog-food',\n    keywords: ['nutro', 'max', 'adult', 'dry', 'food']\n  },\n  {\n    id: 'dog-6',\n    name: 'Cosequin Dog Joint Health',\n    category: 'Health Supplements',\n    brand: 'Cosequin',\n    price: '৳1,850',\n    page: 'Dog Food',\n    route: '/dog-food',\n    keywords: ['cosequin', 'joint', 'health', 'supplements', 'vitamins']\n  },\n\n  // Cat Toys Products\n  {\n    id: 'toy-1',\n    name: 'Interactive Feather Wand Toy',\n    category: 'Feather Toys',\n    brand: 'PetSafe',\n    price: '৳650',\n    page: 'Cat Toys',\n    route: '/cat-toys',\n    keywords: ['interactive', 'feather', 'wand', 'toy', 'play']\n  },\n  {\n    id: 'toy-2',\n    name: 'Catnip Filled Mouse Toys Set',\n    category: 'Catnip Toys',\n    brand: 'Kong',\n    price: '৳350',\n    page: 'Cat Toys',\n    route: '/cat-toys',\n    keywords: ['catnip', 'mouse', 'toys', 'set', 'play']\n  },\n  {\n    id: 'toy-3',\n    name: 'Automatic Laser Pointer',\n    category: 'Laser Pointers',\n    brand: 'PetLibro',\n    price: '৳1,200',\n    page: 'Cat Toys',\n    route: '/cat-toys',\n    keywords: ['automatic', 'laser', 'pointer', 'electronic']\n  },\n  {\n    id: 'toy-4',\n    name: 'Multi-Level Cat Tree Tower',\n    category: 'Cat Trees',\n    brand: 'Armarkat',\n    price: '৳8,500',\n    page: 'Cat Toys',\n    route: '/cat-toys',\n    keywords: ['multi', 'level', 'cat', 'tree', 'tower', 'scratching']\n  },\n  {\n    id: 'toy-5',\n    name: 'Cat Tunnel Play System',\n    category: 'Cat Tunnels',\n    brand: 'Pawaboo',\n    price: '৳1,850',\n    page: 'Cat Toys',\n    route: '/cat-toys',\n    keywords: ['cat', 'tunnel', 'play', 'system', 'collapsible']\n  },\n  {\n    id: 'toy-6',\n    name: 'Electronic Motion Fish Toy',\n    category: 'Electronic Toys',\n    brand: 'Potaroma',\n    price: '৳950',\n    page: 'Cat Toys',\n    route: '/cat-toys',\n    keywords: ['electronic', 'motion', 'fish', 'toy', 'rechargeable']\n  },\n\n  // Cat Litter Products\n  {\n    id: 'litter-1',\n    name: 'Tidy Cats Clumping Litter',\n    category: 'Clumping Cat Litter',\n    brand: 'Tidy Cats',\n    price: '৳1,250',\n    page: 'Cat Litter',\n    route: '/cat-litter',\n    keywords: ['tidy', 'cats', 'clumping', 'litter', 'clay']\n  },\n  {\n    id: 'litter-2',\n    name: 'Ever Clean Scented Multi-Cat',\n    category: 'Scented Litter',\n    brand: 'Ever Clean',\n    price: '৳1,850',\n    page: 'Cat Litter',\n    route: '/cat-litter',\n    keywords: ['ever', 'clean', 'scented', 'multi', 'cat', 'litter']\n  },\n  {\n    id: 'litter-3',\n    name: 'Stainless Steel Litter Scoop',\n    category: 'Litter Scoop',\n    brand: 'iPrimio',\n    price: '৳450',\n    page: 'Cat Litter',\n    route: '/cat-litter',\n    keywords: ['stainless', 'steel', 'litter', 'scoop', 'tool']\n  },\n  {\n    id: 'litter-4',\n    name: 'Covered Cat Litter Box Large',\n    category: 'Covered Litter Box',\n    brand: 'Petmate',\n    price: '৳2,200',\n    page: 'Cat Litter',\n    route: '/cat-litter',\n    keywords: ['covered', 'cat', 'litter', 'box', 'large', 'enclosed']\n  },\n  {\n    id: 'litter-5',\n    name: 'Washable Litter Mat',\n    category: 'Litter Mat',\n    brand: 'Gorilla Grip',\n    price: '৳850',\n    page: 'Cat Litter',\n    route: '/cat-litter',\n    keywords: ['washable', 'litter', 'mat', 'gorilla', 'grip']\n  },\n  {\n    id: 'litter-6',\n    name: 'PetSafe ScoopFree Self-Cleaning',\n    category: 'Self-Cleaning Box',\n    brand: 'PetSafe',\n    price: '৳15,000',\n    page: 'Cat Litter',\n    route: '/cat-litter',\n    keywords: ['petsafe', 'scoopfree', 'self', 'cleaning', 'automatic']\n  },\n\n  // Reflex Products\n  {\n    id: 'reflex-1',\n    name: 'Reflex Plus Adult Cat Food Chicken',\n    category: 'Cat Food',\n    brand: 'Reflex',\n    price: '৳1,850',\n    page: 'Reflex',\n    route: '/reflex',\n    keywords: ['reflex', 'plus', 'adult', 'cat', 'food', 'chicken', 'premium']\n  },\n  {\n    id: 'reflex-2',\n    name: 'Reflex Plus Puppy Food Lamb & Rice',\n    category: 'Puppy Food',\n    brand: 'Reflex',\n    price: '৳2,200',\n    page: 'Reflex',\n    route: '/reflex',\n    keywords: ['reflex', 'plus', 'puppy', 'food', 'lamb', 'rice']\n  },\n  {\n    id: 'reflex-3',\n    name: 'Reflex Plus Kitten Food Salmon',\n    category: 'Kitten Food',\n    brand: 'Reflex',\n    price: '৳1,650',\n    page: 'Reflex',\n    route: '/reflex',\n    keywords: ['reflex', 'plus', 'kitten', 'food', 'salmon', 'dha']\n  },\n  {\n    id: 'reflex-4',\n    name: 'Reflex Plus Adult Dog Food Beef',\n    category: 'Dog Food',\n    brand: 'Reflex',\n    price: '৳2,450',\n    page: 'Reflex',\n    route: '/reflex',\n    keywords: ['reflex', 'plus', 'adult', 'dog', 'food', 'beef']\n  },\n  {\n    id: 'reflex-5',\n    name: 'Reflex Grain-Free Cat Food Turkey',\n    category: 'Grain-Free',\n    brand: 'Reflex',\n    price: '৳2,800',\n    page: 'Reflex',\n    route: '/reflex',\n    keywords: ['reflex', 'grain', 'free', 'cat', 'food', 'turkey']\n  },\n  {\n    id: 'reflex-6',\n    name: 'Reflex Senior Dog Food Formula',\n    category: 'Senior Pet Food',\n    brand: 'Reflex',\n    price: '৳2,600',\n    page: 'Reflex',\n    route: '/reflex',\n    keywords: ['reflex', 'senior', 'dog', 'food', 'formula', 'joint']\n  }\n];\n\nexport function searchProducts(query: string): SearchableProduct[] {\n  if (!query.trim()) return [];\n  \n  const searchTerm = query.toLowerCase().trim();\n  \n  return searchableProducts.filter(product => {\n    const searchableText = [\n      product.name,\n      product.category,\n      product.brand || '',\n      product.page,\n      ...product.keywords\n    ].join(' ').toLowerCase();\n    \n    return searchableText.includes(searchTerm);\n  }).slice(0, 10); // Limit to 10 results\n}","size_bytes":8535},"client/src/lib/supabase.ts":{"content":"import { createClient } from '@supabase/supabase-js'\n\n// Initialize Supabase client safely\nlet supabase: any = null\n\ntry {\n  const supabaseUrl = import.meta.env.VITE_SUPABASE_URL || ''\n  const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY || ''\n\n  console.log('Supabase URL configured:', !!supabaseUrl)\n  console.log('Supabase Key configured:', !!supabaseAnonKey)\n  console.log('URL starts with:', supabaseUrl.substring(0, 20))\n\n  // Check if Supabase credentials are available\n  const hasSupabaseCredentials = supabaseUrl && supabaseAnonKey\n\n  // Create supabase client if credentials are available\n  if (hasSupabaseCredentials) {\n    supabase = createClient(supabaseUrl, supabaseAnonKey)\n    console.log('Supabase client created successfully')\n  } else {\n    console.warn('Supabase credentials not configured. Authentication features will show appropriate messages.')\n  }\n} catch (error) {\n  console.error('Supabase configuration error:', error)\n  supabase = null\n}\n\nexport { supabase }\n\nexport type AuthUser = {\n  id: string\n  email: string\n  name?: string\n}\n\nexport async function signUp(email: string, password: string, firstName?: string, lastName?: string) {\n  if (!supabase) {\n    console.error('Supabase client not initialized, using fallback authentication')\n    const { fallbackSignUp } = await import('./auth-fallback')\n    return fallbackSignUp(email, password, firstName, lastName)\n  }\n  \n  console.log('Attempting Supabase sign up for:', email)\n  \n  try {\n    const { data, error } = await supabase.auth.signUp({\n      email,\n      password,\n      options: {\n        data: {\n          firstName: firstName,\n          lastName: lastName,\n          name: firstName && lastName ? `${firstName} ${lastName}` : firstName || lastName || '',\n          role: 'user'\n        }\n      }\n    })\n    \n    console.log('Supabase sign up response:', { data: !!data, error: error?.message })\n    \n    // If Supabase fails, try fallback\n    if (error && error.message.includes('fetch')) {\n      console.log('Supabase network error, using fallback authentication')\n      const { fallbackSignUp } = await import('./auth-fallback')\n      return fallbackSignUp(email, password, firstName, lastName)\n    }\n    \n    return { data, error }\n  } catch (err) {\n    console.error('Supabase sign up error, using fallback:', err)\n    const { fallbackSignUp } = await import('./auth-fallback')\n    return fallbackSignUp(email, password, firstName, lastName)\n  }\n}\n\nexport async function signIn(email: string, password: string) {\n  if (!supabase) {\n    console.log('Supabase not available, using fallback authentication')\n    const { fallbackSignIn } = await import('./auth-fallback')\n    return fallbackSignIn(email, password)\n  }\n  \n  try {\n    const { data, error } = await supabase.auth.signInWithPassword({\n      email,\n      password,\n    })\n    \n    // If Supabase fails, try fallback\n    if (error && error.message.includes('fetch')) {\n      console.log('Supabase network error, using fallback authentication')\n      const { fallbackSignIn } = await import('./auth-fallback')\n      return fallbackSignIn(email, password)\n    }\n    \n    return { data, error }\n  } catch (err) {\n    console.error('Supabase sign in error, using fallback:', err)\n    const { fallbackSignIn } = await import('./auth-fallback')\n    return fallbackSignIn(email, password)\n  }\n}\n\nexport async function signOut() {\n  if (!supabase) {\n    return { error: { message: 'Authentication service not configured.' } }\n  }\n  const { error } = await supabase.auth.signOut()\n  return { error }\n}\n\nexport async function getCurrentUser() {\n  if (!supabase) {\n    return null\n  }\n  const { data: { user } } = await supabase.auth.getUser()\n  return user\n}\n\nexport function onAuthStateChange(callback: (user: any) => void) {\n  if (!supabase) {\n    callback(null)\n    return { data: { subscription: { unsubscribe: () => {} } } }\n  }\n  return supabase.auth.onAuthStateChange((_event: any, session: any) => {\n    callback(session?.user ?? null)\n  })\n}","size_bytes":4008},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/blog.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Search, Calendar, User, Clock, BookOpen, Heart, Share2 } from 'lucide-react';\nimport Header from '@/components/layout/header';\nimport Footer from '@/components/layout/footer';\n\nconst blogCategories = [\n  'Pet Care Tips',\n  'Cat Health',\n  'Dog Health',\n  'Training',\n  'Nutrition',\n  'Grooming',\n  'Behavior',\n  'Product Reviews'\n];\n\nconst blogPosts = [\n  {\n    id: 1,\n    title: '10 Essential Cat Care Tips Every Owner Should Know',\n    excerpt: 'Discover the fundamental aspects of cat care that will keep your feline friend happy and healthy throughout their life.',\n    content: 'Complete guide covering nutrition, health, grooming, and behavioral aspects...',\n    category: 'Cat Health',\n    author: 'Dr. Sarah Rahman',\n    date: '2025-01-25',\n    readTime: 8,\n    image: '/api/placeholder/400/250',\n    featured: true,\n    tags: ['cat care', 'health', 'tips']\n  },\n  {\n    id: 2,\n    title: 'The Ultimate Guide to Dog Training: From Puppy to Adult',\n    excerpt: 'Learn effective training techniques that work for dogs of all ages and breeds.',\n    content: 'Comprehensive training guide including basic commands, house training, and behavioral correction...',\n    category: 'Training',\n    author: 'Ahmed Khan',\n    date: '2025-01-22',\n    readTime: 12,\n    image: '/api/placeholder/400/250',\n    featured: false,\n    tags: ['dog training', 'puppy', 'behavior']\n  },\n  {\n    id: 3,\n    title: 'Choosing the Right Food for Your Pet: A Complete Nutrition Guide',\n    excerpt: 'Understanding pet nutrition labels and making informed decisions about your pet\\'s diet.',\n    content: 'Detailed nutrition guide covering ingredients, feeding schedules, and dietary requirements...',\n    category: 'Nutrition',\n    author: 'Dr. Fatima Ali',\n    date: '2025-01-20',\n    readTime: 10,\n    image: '/api/placeholder/400/250',\n    featured: true,\n    tags: ['nutrition', 'pet food', 'health']\n  },\n  {\n    id: 4,\n    title: 'Professional Grooming at Home: Tools and Techniques',\n    excerpt: 'Learn how to groom your pets like a professional with the right tools and techniques.',\n    content: 'Step-by-step grooming guide with professional tips and tool recommendations...',\n    category: 'Grooming',\n    author: 'Rashida Begum',\n    date: '2025-01-18',\n    readTime: 6,\n    image: '/api/placeholder/400/250',\n    featured: false,\n    tags: ['grooming', 'tools', 'diy']\n  },\n  {\n    id: 5,\n    title: 'Understanding Your Cat\\'s Behavior: Signs and Solutions',\n    excerpt: 'Decode your cat\\'s behavior patterns and learn how to address common issues.',\n    content: 'Behavioral guide covering communication, stress signs, and environmental enrichment...',\n    category: 'Behavior',\n    author: 'Dr. Karim Hassan',\n    date: '2025-01-15',\n    readTime: 9,\n    image: '/api/placeholder/400/250',\n    featured: false,\n    tags: ['cat behavior', 'psychology', 'solutions']\n  },\n  {\n    id: 6,\n    title: 'Product Review: Best Cat Litters of 2025',\n    excerpt: 'Comprehensive review and comparison of the top cat litter brands available in Bangladesh.',\n    content: 'Detailed product reviews with pros, cons, and recommendations...',\n    category: 'Product Reviews',\n    author: 'Meow Meow Team',\n    date: '2025-01-12',\n    readTime: 7,\n    image: '/api/placeholder/400/250',\n    featured: false,\n    tags: ['product review', 'cat litter', '2025']\n  }\n];\n\nexport default function BlogPage() {\n  const [selectedCategory, setSelectedCategory] = useState<string>('All');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [filteredPosts, setFilteredPosts] = useState(blogPosts);\n\n  const handleCategoryFilter = (category: string) => {\n    setSelectedCategory(category);\n    if (category === 'All') {\n      setFilteredPosts(blogPosts);\n    } else {\n      setFilteredPosts(blogPosts.filter(post => post.category === category));\n    }\n  };\n\n  const handleSearch = (query: string) => {\n    setSearchQuery(query);\n    const filtered = blogPosts.filter(post =>\n      post.title.toLowerCase().includes(query.toLowerCase()) ||\n      post.excerpt.toLowerCase().includes(query.toLowerCase()) ||\n      post.category.toLowerCase().includes(query.toLowerCase()) ||\n      post.tags.some(tag => tag.toLowerCase().includes(query.toLowerCase()))\n    );\n    setFilteredPosts(filtered);\n  };\n\n  const featuredPosts = blogPosts.filter(post => post.featured);\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      \n      {/* Hero Section */}\n      <section className=\"pt-24 pb-8 px-4 bg-gradient-to-r from-indigo-600 to-purple-700 text-white\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"flex items-center gap-4 mb-4\">\n            <BookOpen className=\"h-12 w-12\" />\n            <h1 className=\"text-4xl md:text-5xl font-bold\">Pet Care Blog</h1>\n          </div>\n          <p className=\"text-xl opacity-90 mb-6\">Expert advice, tips, and insights for better pet care</p>\n          \n          {/* Search Bar */}\n          <div className=\"relative max-w-md\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n            <Input\n              placeholder=\"Search blog posts...\"\n              className=\"pl-10 bg-white text-gray-900\"\n              value={searchQuery}\n              onChange={(e) => handleSearch(e.target.value)}\n              data-testid=\"input-search-blog\"\n            />\n          </div>\n        </div>\n      </section>\n\n      {/* Featured Posts */}\n      {selectedCategory === 'All' && !searchQuery && (\n        <section className=\"py-12 px-4 bg-white\">\n          <div className=\"max-w-7xl mx-auto\">\n            <h2 className=\"text-3xl font-bold mb-8\">Featured Articles</h2>\n            <div className=\"grid md:grid-cols-2 gap-8\">\n              {featuredPosts.slice(0, 2).map((post) => (\n                <Card key={post.id} className=\"hover:shadow-xl transition-all duration-300 overflow-hidden\">\n                  <div className=\"relative\">\n                    <img\n                      src={post.image}\n                      alt={post.title}\n                      className=\"w-full h-56 object-cover\"\n                    />\n                    <Badge className=\"absolute top-4 left-4 bg-indigo-600\">\n                      Featured\n                    </Badge>\n                  </div>\n                  <CardContent className=\"p-6\">\n                    <Badge variant=\"secondary\" className=\"mb-3\">\n                      {post.category}\n                    </Badge>\n                    <h3 className=\"text-xl font-bold mb-2 line-clamp-2\">{post.title}</h3>\n                    <p className=\"text-gray-600 mb-4 line-clamp-3\">{post.excerpt}</p>\n                    \n                    <div className=\"flex items-center justify-between text-sm text-gray-500 mb-4\">\n                      <div className=\"flex items-center gap-4\">\n                        <div className=\"flex items-center gap-1\">\n                          <User className=\"h-4 w-4\" />\n                          <span>{post.author}</span>\n                        </div>\n                        <div className=\"flex items-center gap-1\">\n                          <Calendar className=\"h-4 w-4\" />\n                          <span>{new Date(post.date).toLocaleDateString()}</span>\n                        </div>\n                        <div className=\"flex items-center gap-1\">\n                          <Clock className=\"h-4 w-4\" />\n                          <span>{post.readTime} min read</span>\n                        </div>\n                      </div>\n                    </div>\n\n                    <Button className=\"w-full\" data-testid={`button-read-${post.id}`}>\n                      Read Full Article\n                    </Button>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n        </section>\n      )}\n\n      <div className=\"max-w-7xl mx-auto px-4 py-8\">\n        <div className=\"flex flex-col lg:flex-row gap-8\">\n          {/* Categories Sidebar */}\n          <aside className=\"lg:w-1/4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Categories</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <Button\n                    variant={selectedCategory === 'All' ? 'default' : 'ghost'}\n                    className=\"w-full justify-start\"\n                    onClick={() => handleCategoryFilter('All')}\n                    data-testid=\"button-category-all\"\n                  >\n                    All Posts\n                  </Button>\n                  {blogCategories.map((category) => (\n                    <Button\n                      key={category}\n                      variant={selectedCategory === category ? 'default' : 'ghost'}\n                      className=\"w-full justify-start\"\n                      onClick={() => handleCategoryFilter(category)}\n                      data-testid={`button-category-${category.toLowerCase().replace(/\\s+/g, '-')}`}\n                    >\n                      {category}\n                    </Button>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Newsletter Signup */}\n            <Card className=\"mt-6\">\n              <CardHeader>\n                <CardTitle>Stay Updated</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm text-gray-600 mb-4\">\n                  Get the latest pet care tips and product updates delivered to your inbox.\n                </p>\n                <div className=\"space-y-2\">\n                  <Input placeholder=\"Your email address\" type=\"email\" />\n                  <Button className=\"w-full\" size=\"sm\">\n                    Subscribe\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </aside>\n\n          {/* Blog Posts Grid */}\n          <main className=\"lg:w-3/4\">\n            <div className=\"flex justify-between items-center mb-6\">\n              <h2 className=\"text-2xl font-bold\">\n                {selectedCategory === 'All' ? 'All Blog Posts' : selectedCategory}\n              </h2>\n              <p className=\"text-gray-600\">{filteredPosts.length} articles found</p>\n            </div>\n\n            <div className=\"grid gap-6\">\n              {filteredPosts.map((post) => (\n                <Card key={post.id} className=\"hover:shadow-lg transition-all duration-300\">\n                  <div className=\"flex flex-col md:flex-row\">\n                    <div className=\"md:w-1/3\">\n                      <img\n                        src={post.image}\n                        alt={post.title}\n                        className=\"w-full h-48 md:h-full object-cover rounded-l-lg\"\n                      />\n                    </div>\n                    <div className=\"md:w-2/3 p-6\">\n                      <div className=\"flex items-center gap-2 mb-3\">\n                        <Badge variant=\"secondary\">{post.category}</Badge>\n                        {post.featured && (\n                          <Badge className=\"bg-indigo-600\">Featured</Badge>\n                        )}\n                      </div>\n                      \n                      <h3 className=\"text-xl font-bold mb-2 line-clamp-2\">\n                        {post.title}\n                      </h3>\n                      \n                      <p className=\"text-gray-600 mb-4 line-clamp-2\">\n                        {post.excerpt}\n                      </p>\n\n                      <div className=\"flex items-center justify-between text-sm text-gray-500 mb-4\">\n                        <div className=\"flex items-center gap-4\">\n                          <div className=\"flex items-center gap-1\">\n                            <User className=\"h-4 w-4\" />\n                            <span>{post.author}</span>\n                          </div>\n                          <div className=\"flex items-center gap-1\">\n                            <Calendar className=\"h-4 w-4\" />\n                            <span>{new Date(post.date).toLocaleDateString()}</span>\n                          </div>\n                          <div className=\"flex items-center gap-1\">\n                            <Clock className=\"h-4 w-4\" />\n                            <span>{post.readTime} min</span>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div className=\"flex items-center justify-between\">\n                        <Button variant=\"outline\" data-testid={`button-read-${post.id}`}>\n                          Read More\n                        </Button>\n                        <div className=\"flex items-center gap-2\">\n                          <Button size=\"sm\" variant=\"ghost\" data-testid={`button-like-${post.id}`}>\n                            <Heart className=\"h-4 w-4\" />\n                          </Button>\n                          <Button size=\"sm\" variant=\"ghost\" data-testid={`button-share-${post.id}`}>\n                            <Share2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </Card>\n              ))}\n            </div>\n\n            {filteredPosts.length === 0 && (\n              <div className=\"text-center py-12\">\n                <BookOpen className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n                <p className=\"text-gray-500 text-lg\">No blog posts found matching your criteria.</p>\n              </div>\n            )}\n          </main>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":13950},"client/src/pages/cat-food.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Search, Filter } from 'lucide-react';\nimport Header from '@/components/layout/header';\nimport Footer from '@/components/layout/footer';\nimport ProductCard from '@/components/product/product-card';\nimport AnalyticsBar from '@/components/product/analytics-bar';\nimport { getProductsByCategory, type Product } from '@/lib/product-data';\n\nconst catFoodCategories = [\n  'Adult Food',\n  'Cat Pouches',\n  'Dry Food', \n  'Cat Can Food',\n  'Cat Treats',\n  'Wet Food',\n  'Kitten Food',\n  'Repack Food',\n  'Kitten Milk',\n  'Cat Dry Food',\n  'Premium Dry',\n  'Cat Wet Food',\n  'Canned Food'\n];\n\nexport default function CatFoodPage() {\n  const [selectedCategory, setSelectedCategory] = useState<string>('All');\n  const [searchQuery, setSearchQuery] = useState('');\n  \n  // Get dynamic products from centralized data\n  const allProducts = getProductsByCategory('cat-food');\n  \n  // Filter products based on search and category\n  const filteredProducts = allProducts.filter(product => {\n    const matchesCategory = selectedCategory === 'All';\n    const matchesSearch = product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         product.description.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         product.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()));\n    return matchesCategory && matchesSearch;\n  });\n\n  const handleCategoryFilter = (category: string) => {\n    setSelectedCategory(category);\n  };\n\n  const handleSearch = (query: string) => {\n    setSearchQuery(query);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      \n      {/* Hero Section */}\n      <section className=\"pt-24 pb-8 px-4 bg-gradient-to-r from-orange-500 to-red-500 text-white\">\n        <div className=\"max-w-7xl mx-auto\">\n          <h1 className=\"text-4xl md:text-5xl font-bold mb-4\">Cat Food Collection</h1>\n          <p className=\"text-xl opacity-90 mb-6\">Premium nutrition for your feline friends</p>\n          \n          {/* Search Bar */}\n          <div className=\"relative max-w-md\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n            <Input\n              placeholder=\"Search cat food products...\"\n              className=\"pl-10 bg-white text-gray-900\"\n              value={searchQuery}\n              onChange={(e) => handleSearch(e.target.value)}\n              data-testid=\"input-search-cat-food\"\n            />\n          </div>\n        </div>\n      </section>\n\n      {/* Main Content */}\n      <section className=\"py-8 px-4\">\n        <div className=\"max-w-7xl mx-auto lg:flex lg:gap-8\">\n          {/* Sidebar */}\n          <aside className=\"lg:w-1/4 mb-8 lg:mb-0\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Filter className=\"h-5 w-5\" />\n                  Categories\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <Button\n                    variant={selectedCategory === 'All' ? 'default' : 'ghost'}\n                    className=\"w-full justify-start\"\n                    onClick={() => handleCategoryFilter('All')}\n                    data-testid=\"button-category-all\"\n                  >\n                    All Categories\n                  </Button>\n                  {catFoodCategories.map((category) => (\n                    <Button\n                      key={category}\n                      variant={selectedCategory === category ? 'default' : 'ghost'}\n                      className=\"w-full justify-start\"\n                      onClick={() => handleCategoryFilter(category)}\n                      data-testid={`button-category-${category.toLowerCase().replace(/\\s+/g, '-')}`}\n                    >\n                      {category}\n                    </Button>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </aside>\n\n          {/* Products Grid */}\n          <main className=\"lg:w-3/4\">\n            {/* Analytics Bar */}\n            <AnalyticsBar categoryId=\"cat-food\" className=\"mb-6\" />\n            \n            <div className=\"flex justify-between items-center mb-6\">\n              <h2 className=\"text-2xl font-bold\">\n                {selectedCategory === 'All' ? 'All Cat Food Products' : selectedCategory}\n              </h2>\n              <p className=\"text-gray-600\">{filteredProducts.length} products found</p>\n            </div>\n\n            <div className=\"grid sm:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {filteredProducts.map((product) => (\n                <ProductCard key={product.id} product={product} />\n              ))}\n            </div>\n\n            {/* No Products Message */}\n            {filteredProducts.length === 0 && (\n              <div className=\"text-center py-12\">\n                <p className=\"text-gray-500 text-lg\">No products found matching your criteria.</p>\n                <Button\n                  variant=\"outline\"\n                  className=\"mt-4\"\n                  onClick={() => {\n                    setSearchQuery('');\n                    setSelectedCategory('All');\n                  }}\n                >\n                  Clear Filters\n                </Button>\n              </div>\n            )}\n          </main>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":5715},"client/src/pages/cat-litter.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Search, Filter } from 'lucide-react';\nimport Header from '@/components/layout/header';\nimport Footer from '@/components/layout/footer';\nimport ProductCard from '@/components/product/product-card';\nimport AnalyticsBar from '@/components/product/analytics-bar';\nimport { getProductsByCategory, type Product } from '@/lib/product-data';\n\nconst catLitterCategories = [\n  'Clumping Cat Litter',\n  'Clay Litter',\n  'Scented Litter',\n  'Cat Litter Accessories',\n  'Litter Scoop',\n  'Litter Mat',\n  'Cat Litter Box',\n  'Covered Litter Box',\n  'Self-Cleaning Box'\n];\n\nexport default function CatLitterPage() {\n  const [selectedCategory, setSelectedCategory] = useState<string>('All');\n  const [searchQuery, setSearchQuery] = useState('');\n  \n  // Get dynamic products from centralized data\n  const allProducts = getProductsByCategory('cat-litter');\n  \n  // Filter products based on search and category\n  const filteredProducts = allProducts.filter(product => {\n    const matchesCategory = selectedCategory === 'All';\n    const matchesSearch = product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         product.description.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         product.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()));\n    return matchesCategory && matchesSearch;\n  });\n\n  const handleCategoryFilter = (category: string) => {\n    setSelectedCategory(category);\n  };\n\n  const handleSearch = (query: string) => {\n    setSearchQuery(query);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      \n      {/* Hero Section */}\n      <section className=\"pt-24 pb-8 px-4 bg-gradient-to-r from-gray-600 to-blue-600 text-white\">\n        <div className=\"max-w-7xl mx-auto\">\n          <h1 className=\"text-4xl md:text-5xl font-bold mb-4\">Cat Litter & Accessories</h1>\n          <p className=\"text-xl opacity-90 mb-6\">Everything you need for your cat's hygiene and comfort</p>\n          \n          {/* Search Bar */}\n          <div className=\"relative max-w-md\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n            <Input\n              placeholder=\"Search cat litter products...\"\n              className=\"pl-10 bg-white text-gray-900\"\n              value={searchQuery}\n              onChange={(e) => handleSearch(e.target.value)}\n              data-testid=\"input-search-cat-litter\"\n            />\n          </div>\n        </div>\n      </section>\n\n      {/* Main Content */}\n      <section className=\"py-8 px-4\">\n        <div className=\"max-w-7xl mx-auto lg:flex lg:gap-8\">\n          {/* Sidebar */}\n          <aside className=\"lg:w-1/4 mb-8 lg:mb-0\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Filter className=\"h-5 w-5\" />\n                  Categories\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <Button\n                    variant={selectedCategory === 'All' ? 'default' : 'ghost'}\n                    className=\"w-full justify-start\"\n                    onClick={() => handleCategoryFilter('All')}\n                    data-testid=\"button-category-all\"\n                  >\n                    All Categories\n                  </Button>\n                  {catLitterCategories.map((category) => (\n                    <Button\n                      key={category}\n                      variant={selectedCategory === category ? 'default' : 'ghost'}\n                      className=\"w-full justify-start\"\n                      onClick={() => handleCategoryFilter(category)}\n                      data-testid={`button-category-${category.toLowerCase().replace(/\\s+/g, '-')}`}\n                    >\n                      {category}\n                    </Button>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </aside>\n\n          {/* Products Grid */}\n          <main className=\"lg:w-3/4\">\n            {/* Analytics Bar */}\n            <AnalyticsBar categoryId=\"cat-litter\" className=\"mb-6\" />\n            \n            <div className=\"flex justify-between items-center mb-6\">\n              <h2 className=\"text-2xl font-bold\">\n                {selectedCategory === 'All' ? 'All Cat Litter Products' : selectedCategory}\n              </h2>\n              <p className=\"text-gray-600\">{filteredProducts.length} products found</p>\n            </div>\n\n            <div className=\"grid sm:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {filteredProducts.map((product) => (\n                <ProductCard key={product.id} product={product} />\n              ))}\n            </div>\n\n            {/* No Products Message */}\n            {filteredProducts.length === 0 && (\n              <div className=\"text-center py-12\">\n                <p className=\"text-gray-500 text-lg\">No products found matching your criteria.</p>\n                <Button\n                  variant=\"outline\"\n                  className=\"mt-4\"\n                  onClick={() => {\n                    setSearchQuery('');\n                    setSelectedCategory('All');\n                  }}\n                >\n                  Clear Filters\n                </Button>\n              </div>\n            )}\n          </main>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":5722},"client/src/pages/cat-toys.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Search, Filter } from 'lucide-react';\nimport Header from '@/components/layout/header';\nimport Footer from '@/components/layout/footer';\nimport ProductCard from '@/components/product/product-card';\nimport AnalyticsBar from '@/components/product/analytics-bar';\nimport { getProductsByCategory, type Product } from '@/lib/product-data';\n\nconst catToyCategories = [\n  'Interactive Toys',\n  'Feather Toys',\n  'Catnip Toys',\n  'Ball Toys',\n  'Laser Pointers',\n  'Scratching Posts',\n  'Cat Tunnels',\n  'Puzzle Toys',\n  'Electronic Toys',\n  'Teaser Wands',\n  'Plush Toys',\n  'Cat Trees'\n];\n\nexport default function CatToysPage() {\n  const [selectedCategory, setSelectedCategory] = useState<string>('All');\n  const [searchQuery, setSearchQuery] = useState('');\n  \n  // Get dynamic products from centralized data\n  const allProducts = getProductsByCategory('cat-toys');\n  \n  // Filter products based on search and category\n  const filteredProducts = allProducts.filter(product => {\n    const matchesCategory = selectedCategory === 'All';\n    const matchesSearch = product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         product.description.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         product.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()));\n    return matchesCategory && matchesSearch;\n  });\n\n  const handleCategoryFilter = (category: string) => {\n    setSelectedCategory(category);\n  };\n\n  const handleSearch = (query: string) => {\n    setSearchQuery(query);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      \n      {/* Hero Section */}\n      <section className=\"pt-24 pb-8 px-4 bg-gradient-to-r from-pink-500 to-purple-500 text-white\">\n        <div className=\"max-w-7xl mx-auto\">\n          <h1 className=\"text-4xl md:text-5xl font-bold mb-4\">Cat Toys Collection</h1>\n          <p className=\"text-xl opacity-90 mb-6\">Fun and engaging toys for your playful cats</p>\n          \n          {/* Search Bar */}\n          <div className=\"relative max-w-md\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n            <Input\n              placeholder=\"Search cat toys...\"\n              className=\"pl-10 bg-white text-gray-900\"\n              value={searchQuery}\n              onChange={(e) => handleSearch(e.target.value)}\n              data-testid=\"input-search-cat-toys\"\n            />\n          </div>\n        </div>\n      </section>\n\n      {/* Main Content */}\n      <section className=\"py-8 px-4\">\n        <div className=\"max-w-7xl mx-auto lg:flex lg:gap-8\">\n          {/* Sidebar */}\n          <aside className=\"lg:w-1/4 mb-8 lg:mb-0\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Filter className=\"h-5 w-5\" />\n                  Categories\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <Button\n                    variant={selectedCategory === 'All' ? 'default' : 'ghost'}\n                    className=\"w-full justify-start\"\n                    onClick={() => handleCategoryFilter('All')}\n                    data-testid=\"button-category-all\"\n                  >\n                    All Categories\n                  </Button>\n                  {catToyCategories.map((category) => (\n                    <Button\n                      key={category}\n                      variant={selectedCategory === category ? 'default' : 'ghost'}\n                      className=\"w-full justify-start\"\n                      onClick={() => handleCategoryFilter(category)}\n                      data-testid={`button-category-${category.toLowerCase().replace(/\\s+/g, '-')}`}\n                    >\n                      {category}\n                    </Button>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </aside>\n\n          {/* Products Grid */}\n          <main className=\"lg:w-3/4\">\n            {/* Analytics Bar */}\n            <AnalyticsBar categoryId=\"cat-toys\" className=\"mb-6\" />\n            \n            <div className=\"flex justify-between items-center mb-6\">\n              <h2 className=\"text-2xl font-bold\">\n                {selectedCategory === 'All' ? 'All Cat Toys' : selectedCategory}\n              </h2>\n              <p className=\"text-gray-600\">{filteredProducts.length} products found</p>\n            </div>\n\n            <div className=\"grid sm:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {filteredProducts.map((product) => (\n                <ProductCard key={product.id} product={product} />\n              ))}\n            </div>\n\n            {/* No Products Message */}\n            {filteredProducts.length === 0 && (\n              <div className=\"text-center py-12\">\n                <p className=\"text-gray-500 text-lg\">No products found matching your criteria.</p>\n                <Button\n                  variant=\"outline\"\n                  className=\"mt-4\"\n                  onClick={() => {\n                    setSearchQuery('');\n                    setSelectedCategory('All');\n                  }}\n                >\n                  Clear Filters\n                </Button>\n              </div>\n            )}\n          </main>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":5699},"client/src/pages/dog-food.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Search, Filter } from 'lucide-react';\nimport Header from '@/components/layout/header';\nimport Footer from '@/components/layout/footer';\nimport ProductCard from '@/components/product/product-card';\nimport AnalyticsBar from '@/components/product/analytics-bar';\nimport { getProductsByCategory, type Product } from '@/lib/product-data';\n\nconst dogFoodCategories = [\n  'Puppy Food',\n  'Puppy Dry Food',\n  'Puppy Treats',\n  'Dog Adult Food',\n  'Adult Dry Food',\n  'Adult Treats',\n  'Vitamin & Supplements',\n  'Dog Vitamins',\n  'Health Supplements'\n];\n\nexport default function DogFoodPage() {\n  const [selectedCategory, setSelectedCategory] = useState<string>('All');\n  const [searchQuery, setSearchQuery] = useState('');\n  \n  // Get dynamic products from centralized data\n  const allProducts = getProductsByCategory('dog-food');\n  \n  // Filter products based on search and category\n  const filteredProducts = allProducts.filter(product => {\n    const matchesCategory = selectedCategory === 'All';\n    const matchesSearch = product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         product.description.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         product.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()));\n    return matchesCategory && matchesSearch;\n  });\n\n  const handleCategoryFilter = (category: string) => {\n    setSelectedCategory(category);\n  };\n\n  const handleSearch = (query: string) => {\n    setSearchQuery(query);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      \n      {/* Hero Section */}\n      <section className=\"pt-24 pb-8 px-4 bg-gradient-to-r from-blue-500 to-purple-500 text-white\">\n        <div className=\"max-w-7xl mx-auto\">\n          <h1 className=\"text-4xl md:text-5xl font-bold mb-4\">Dog Food Collection</h1>\n          <p className=\"text-xl opacity-90 mb-6\">Premium nutrition for your canine companions</p>\n          \n          {/* Search Bar */}\n          <div className=\"relative max-w-md\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n            <Input\n              placeholder=\"Search dog food products...\"\n              className=\"pl-10 bg-white text-gray-900\"\n              value={searchQuery}\n              onChange={(e) => handleSearch(e.target.value)}\n              data-testid=\"input-search-dog-food\"\n            />\n          </div>\n        </div>\n      </section>\n\n      {/* Main Content */}\n      <section className=\"py-8 px-4\">\n        <div className=\"max-w-7xl mx-auto lg:flex lg:gap-8\">\n          {/* Sidebar */}\n          <aside className=\"lg:w-1/4 mb-8 lg:mb-0\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Filter className=\"h-5 w-5\" />\n                  Categories\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <Button\n                    variant={selectedCategory === 'All' ? 'default' : 'ghost'}\n                    className=\"w-full justify-start\"\n                    onClick={() => handleCategoryFilter('All')}\n                    data-testid=\"button-category-all\"\n                  >\n                    All Categories\n                  </Button>\n                  {dogFoodCategories.map((category) => (\n                    <Button\n                      key={category}\n                      variant={selectedCategory === category ? 'default' : 'ghost'}\n                      className=\"w-full justify-start\"\n                      onClick={() => handleCategoryFilter(category)}\n                      data-testid={`button-category-${category.toLowerCase().replace(/\\s+/g, '-')}`}\n                    >\n                      {category}\n                    </Button>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </aside>\n\n          {/* Products Grid */}\n          <main className=\"lg:w-3/4\">\n            {/* Analytics Bar */}\n            <AnalyticsBar categoryId=\"dog-food\" className=\"mb-6\" />\n            \n            <div className=\"flex justify-between items-center mb-6\">\n              <h2 className=\"text-2xl font-bold\">\n                {selectedCategory === 'All' ? 'All Dog Food Products' : selectedCategory}\n              </h2>\n              <p className=\"text-gray-600\">{filteredProducts.length} products found</p>\n            </div>\n\n            <div className=\"grid sm:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {filteredProducts.map((product) => (\n                <ProductCard key={product.id} product={product} />\n              ))}\n            </div>\n\n            {/* No Products Message */}\n            {filteredProducts.length === 0 && (\n              <div className=\"text-center py-12\">\n                <p className=\"text-gray-500 text-lg\">No products found matching your criteria.</p>\n                <Button\n                  variant=\"outline\"\n                  className=\"mt-4\"\n                  onClick={() => {\n                    setSearchQuery('');\n                    setSelectedCategory('All');\n                  }}\n                >\n                  Clear Filters\n                </Button>\n              </div>\n            )}\n          </main>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":5683},"client/src/pages/forgot-password.tsx":{"content":"import { useState } from 'react'\nimport { Link, useLocation } from 'wouter'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { supabase } from '@/lib/supabase'\nimport { useToast } from '@/hooks/use-toast'\nimport { Mail, ArrowLeft, PawPrint, CheckCircle } from 'lucide-react'\n\n// Function to get the correct password reset URL for different environments\nfunction getPasswordResetUrl(): string {\n  const currentOrigin = window.location.origin;\n\n  // For production domains, use the current origin\n  if (!currentOrigin.includes('localhost') && !currentOrigin.includes('127.0.0.1')) {\n    return `${currentOrigin}/reset-password`;\n  }\n\n  // For development, try to detect Replit environment\n  const hostname = window.location.hostname;\n  const href = window.location.href;\n  const referrer = document.referrer;\n\n  // Check if we can find a replit.dev domain\n  const replitMatch =\n    href.match(/https?:\\/\\/([^\\/]+\\.replit\\.dev)/) ||\n    referrer.match(/https?:\\/\\/([^\\/]+\\.replit\\.dev)/);\n\n  if (replitMatch) {\n    return `https://${replitMatch[1]}/reset-password`;\n  }\n\n  // Fallback: use current origin (will work when deployed to your domain)\n  return `${currentOrigin}/reset-password`;\n}\n\nexport default function ForgotPasswordPage() {\n  const [, setLocation] = useLocation()\n  const [loading, setLoading] = useState(false)\n  const [email, setEmail] = useState('')\n  const [isSubmitted, setIsSubmitted] = useState(false)\n  const { toast } = useToast()\n\n  const logoPath = \"/logo.png\"; // Assuming logo.png is in the public directory\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n\n    if (!email.trim()) {\n      toast({\n        title: 'Email Required',\n        description: 'Please enter your email address',\n        variant: 'destructive',\n      })\n      return\n    }\n\n    setLoading(true)\n\n    try {\n      // Get the correct redirect URL for password reset\n      const redirectUrl = getPasswordResetUrl();\n\n      console.log('Password reset redirect URL:', redirectUrl);\n\n      const { error } = await supabase.auth.resetPasswordForEmail(email, {\n        redirectTo: redirectUrl,\n      })\n\n      if (error) {\n        toast({\n          title: 'Reset Failed',\n          description: error.message,\n          variant: 'destructive',\n        })\n      } else {\n        setIsSubmitted(true)\n        toast({\n          title: 'Reset Email Sent',\n          description: 'Check your email for password reset instructions',\n        })\n      }\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: 'An unexpected error occurred',\n        variant: 'destructive',\n      })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  if (isSubmitted) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-green-50 via-white to-yellow-50 flex items-center justify-center px-4 py-8\">\n        <div className=\"absolute inset-0 bg-[radial-gradient(circle_at_50%_50%,rgba(38,115,45,0.1),transparent_50%)]\" />\n\n        <div className=\"w-full max-w-md relative z-10\">\n          <Card className=\"shadow-2xl border-0 bg-white/95 backdrop-blur-sm\">\n            <CardHeader className=\"text-center pb-6\">\n              <div className=\"flex justify-center mb-4\">\n                <div className=\"w-16 h-16 rounded-full overflow-hidden border-3 border-green-500 shadow-lg\">\n                  <img\n                    src={logoPath}\n                    alt=\"Meow Meow Pet Shop Logo\"\n                    className=\"h-16 w-16 rounded-full object-cover\"\n                  />\n                </div>\n              </div>\n\n              <CardTitle className=\"text-3xl font-bold text-meow-green\">\n                Check Your Email\n              </CardTitle>\n              <CardDescription className=\"text-gray-600 text-lg\">\n                We've sent password reset instructions to your email\n              </CardDescription>\n            </CardHeader>\n\n            <CardContent className=\"space-y-6\">\n              <div className=\"text-center\">\n                <p className=\"text-gray-600 mb-4\">\n                  We sent a password reset link to:\n                </p>\n                <p className=\"font-semibold text-meow-green bg-green-50 px-4 py-2 rounded-lg\">\n                  {email}\n                </p>\n              </div>\n\n              <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                <h4 className=\"font-semibold text-blue-800 mb-2\">Next Steps:</h4>\n                <ul className=\"text-sm text-blue-700 space-y-1\">\n                  <li>• Check your email inbox (and spam folder)</li>\n                  <li>• Click the reset link in the email</li>\n                  <li>• Create a new password</li>\n                  <li>• Sign in with your new password</li>\n                </ul>\n              </div>\n\n              <div className=\"space-y-3\">\n                <Link href=\"/sign-in\">\n                  <Button className=\"w-full h-12 bg-gradient-to-r from-meow-yellow to-yellow-400 hover:from-yellow-400 hover:to-meow-yellow text-meow-green-dark font-semibold\">\n                    Back to Sign In\n                  </Button>\n                </Link>\n\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setIsSubmitted(false)}\n                  className=\"w-full h-12 border-meow-green text-meow-green hover:bg-green-50\"\n                >\n                  Try Different Email\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 via-white to-yellow-50 flex items-center justify-center px-4 py-8\">\n      <div className=\"absolute inset-0 bg-[radial-gradient(circle_at_50%_50%,rgba(38,115,45,0.1),transparent_50%)]\" />\n\n      <div className=\"w-full max-w-md relative z-10\">\n        <div className=\"mb-6\">\n          <Link href=\"/sign-in\">\n            <Button variant=\"ghost\" className=\"text-meow-green hover:text-meow-green-dark hover:bg-green-50 p-2\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Sign In\n            </Button>\n          </Link>\n        </div>\n\n        <Card className=\"shadow-2xl border-0 bg-white/95 backdrop-blur-sm\">\n          <CardHeader className=\"text-center pb-6\">\n            <div className=\"flex justify-center mb-4\">\n              <div className=\"w-16 h-16 rounded-full overflow-hidden border-3 border-green-500 shadow-lg\">\n                <img\n                  src={logoPath}\n                  alt=\"Meow Meow Pet Shop Logo\"\n                  className=\"h-16 w-16 rounded-full object-cover\"\n                />\n              </div>\n            </div>\n\n            <CardTitle className=\"text-3xl font-bold text-meow-green\">\n              Forgot Password?\n            </CardTitle>\n            <CardDescription className=\"text-gray-600 text-lg\">\n              Enter your email to reset your password\n            </CardDescription>\n          </CardHeader>\n\n          <CardContent className=\"space-y-6\">\n            <form onSubmit={handleSubmit} className=\"space-y-5\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\" className=\"text-meow-green font-medium\">\n                  Email Address\n                </Label>\n                <div className=\"relative\">\n                  <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder=\"Enter your email address\"\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                    className=\"pl-10 h-12 border-gray-200 focus:border-meow-yellow focus:ring-meow-yellow/20\"\n                    required\n                  />\n                </div>\n              </div>\n\n              <Button\n                type=\"submit\"\n                disabled={loading}\n                className=\"w-full h-12 bg-gradient-to-r from-meow-yellow to-yellow-400 hover:from-yellow-400 hover:to-meow-yellow text-meow-green-dark font-semibold text-lg shadow-lg hover:shadow-xl transition-all duration-200\"\n              >\n                {loading ? (\n                  <div className=\"flex items-center\">\n                    <div className=\"w-5 h-5 border-2 border-meow-green-dark border-t-transparent rounded-full animate-spin mr-2\" />\n                    Sending Reset Email...\n                  </div>\n                ) : (\n                  'Send Reset Email'\n                )}\n              </Button>\n            </form>\n\n            <div className=\"text-center\">\n              <p className=\"text-gray-600 text-sm\">\n                Remember your password?{' '}\n                <Link href=\"/sign-in\">\n                  <Button variant=\"link\" className=\"text-meow-green hover:text-meow-green-dark p-0 h-auto\">\n                    Sign in here\n                  </Button>\n                </Link>\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"text-center mt-6 text-gray-500 text-sm\">\n          <p>© 2025 Meow Meow Pet Shop. All rights reserved.</p>\n        </div>\n      </div>\n    </div>\n  )\n}","size_bytes":9442},"client/src/pages/home.tsx":{"content":"\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport HeroBanner from \"@/components/sections/hero-banner\";\nimport CategoriesGrid from \"@/components/sections/categories-grid\";\nimport FeaturedCategories from \"@/components/sections/featured-categories\";\nimport FlashSale from \"@/components/sections/flash-sale\";\nimport BestsellersCats from \"@/components/sections/bestsellers-cats\";\nimport BestsellersDogs from \"@/components/sections/bestsellers-dogs\";\nimport RepackFood from \"@/components/sections/repack-food\";\nimport FeaturedBrands from \"@/components/sections/featured-brands\";\nimport NewlyLaunched from \"@/components/sections/newly-launched\";\nimport MembershipBanner from \"@/components/sections/membership-banner\";\nimport BlogPreview from \"@/components/sections/blog-preview\";\nimport Testimonials from \"@/components/sections/testimonials\";\n\nexport default function Home() {\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <Header />\n      \n      <div className=\"flex flex-col lg:flex-row\">\n        <Sidebar />\n        \n        <main className=\"flex-1 w-full lg:w-auto\">\n          <div className=\"space-y-8 md:space-y-12\">\n            <HeroBanner />\n            <div className=\"px-4 lg:px-6\">\n              <CategoriesGrid />\n              <FeaturedCategories />\n              <FlashSale />\n              <BestsellersCats />\n              <BestsellersDogs />\n              <RepackFood />\n              <FeaturedBrands />\n              <NewlyLaunched />\n              <MembershipBanner />\n              <BlogPreview />\n              <Testimonials />\n            </div>\n          </div>\n        </main>\n      </div>\n      \n      <Footer />\n    </div>\n  );\n}\n","size_bytes":1771},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/privilege-club.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Check, Crown, Star, Gift, Heart } from 'lucide-react';\nimport Header from '@/components/layout/header';\nimport Footer from '@/components/layout/footer';\n\nconst membershipTiers = [\n  {\n    name: 'Silver Paw',\n    price: '৳299',\n    period: '/month',\n    color: 'from-gray-400 to-gray-600',\n    icon: Heart,\n    benefits: [\n      '5% discount on all products',\n      'Free delivery on orders over ৳1,500',\n      'Monthly pet care tips newsletter',\n      'Birthday treats for your pet',\n      'Priority customer support'\n    ]\n  },\n  {\n    name: 'Golden Paw',\n    price: '৳599',\n    period: '/month',\n    color: 'from-yellow-400 to-yellow-600',\n    icon: Star,\n    popular: true,\n    benefits: [\n      '10% discount on all products',\n      'Free delivery on all orders',\n      'Monthly premium pet box',\n      'Exclusive access to new products',\n      'Free monthly vet consultation',\n      'Pet grooming discounts',\n      '24/7 pet care helpline'\n    ]\n  },\n  {\n    name: 'Diamond Paw',\n    price: '৳999',\n    period: '/month',\n    color: 'from-blue-400 to-purple-600',\n    icon: Crown,\n    benefits: [\n      '15% discount on all products',\n      'Free same-day delivery',\n      'Premium monthly pet box',\n      'Personal pet advisor',\n      'Free quarterly health checkup',\n      'VIP grooming services',\n      'Exclusive member events',\n      'Emergency pet care support',\n      'Custom meal planning'\n    ]\n  }\n];\n\nexport default function PrivilegeClubPage() {\n  const [selectedTier, setSelectedTier] = useState<string | null>(null);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-blue-50\">\n      <Header />\n      \n      {/* Hero Section */}\n      <section className=\"pt-24 pb-16 px-4\">\n        <div className=\"max-w-7xl mx-auto text-center\">\n          <div className=\"flex justify-center mb-6\">\n            <Gift className=\"h-16 w-16 text-green-600\" />\n          </div>\n          <h1 className=\"text-4xl md:text-6xl font-bold text-gray-900 mb-6\">\n            Join Our <span className=\"text-green-600\">Privilege Club</span>\n          </h1>\n          <p className=\"text-xl text-gray-600 max-w-3xl mx-auto mb-8\">\n            Give your furry friends the royal treatment they deserve. Exclusive benefits, \n            premium services, and endless love for your beloved pets.\n          </p>\n          <Badge variant=\"secondary\" className=\"text-lg px-6 py-2\">\n            Over 10,000+ Happy Pet Parents\n          </Badge>\n        </div>\n      </section>\n\n      {/* Membership Tiers */}\n      <section className=\"pb-16 px-4\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            {membershipTiers.map((tier) => {\n              const IconComponent = tier.icon;\n              return (\n                <Card \n                  key={tier.name}\n                  className={`relative transition-all duration-300 hover:scale-105 ${\n                    tier.popular ? 'ring-2 ring-green-500 shadow-xl' : 'hover:shadow-lg'\n                  } ${selectedTier === tier.name ? 'ring-2 ring-blue-500' : ''}`}\n                  data-testid={`card-membership-${tier.name.toLowerCase().replace(' ', '-')}`}\n                >\n                  {tier.popular && (\n                    <Badge className=\"absolute -top-3 left-1/2 transform -translate-x-1/2 bg-green-600\">\n                      Most Popular\n                    </Badge>\n                  )}\n                  \n                  <CardHeader className=\"text-center pb-4\">\n                    <div className={`w-16 h-16 mx-auto rounded-full bg-gradient-to-r ${tier.color} flex items-center justify-center mb-4`}>\n                      <IconComponent className=\"h-8 w-8 text-white\" />\n                    </div>\n                    <CardTitle className=\"text-2xl font-bold\">{tier.name}</CardTitle>\n                    <div className=\"text-3xl font-bold text-gray-900\">\n                      {tier.price}\n                      <span className=\"text-sm font-normal text-gray-500\">{tier.period}</span>\n                    </div>\n                  </CardHeader>\n\n                  <CardContent className=\"space-y-4\">\n                    <ul className=\"space-y-3\">\n                      {tier.benefits.map((benefit, index) => (\n                        <li key={index} className=\"flex items-start gap-3\">\n                          <Check className=\"h-5 w-5 text-green-600 mt-0.5 flex-shrink-0\" />\n                          <span className=\"text-gray-700\">{benefit}</span>\n                        </li>\n                      ))}\n                    </ul>\n\n                    <Button \n                      className={`w-full mt-6 ${\n                        tier.popular \n                          ? 'bg-green-600 hover:bg-green-700' \n                          : 'bg-gray-900 hover:bg-gray-800'\n                      }`}\n                      onClick={() => setSelectedTier(tier.name)}\n                      data-testid={`button-select-${tier.name.toLowerCase().replace(' ', '-')}`}\n                    >\n                      {selectedTier === tier.name ? 'Selected' : 'Choose Plan'}\n                    </Button>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* Benefits Overview */}\n      <section className=\"py-16 px-4 bg-white\">\n        <div className=\"max-w-7xl mx-auto\">\n          <h2 className=\"text-3xl font-bold text-center mb-12\">Why Join Our Privilege Club?</h2>\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            {[\n              {\n                icon: Gift,\n                title: 'Exclusive Rewards',\n                description: 'Get special discounts and rewards just for being a member'\n              },\n              {\n                icon: Heart,\n                title: 'Pet Care Support',\n                description: '24/7 access to pet care experts and veterinary advice'\n              },\n              {\n                icon: Star,\n                title: 'Premium Products',\n                description: 'Early access to new and premium pet products'\n              },\n              {\n                icon: Crown,\n                title: 'VIP Treatment',\n                description: 'Priority service and personalized pet care solutions'\n              }\n            ].map((benefit, index) => {\n              const IconComponent = benefit.icon;\n              return (\n                <div key={index} className=\"text-center\">\n                  <div className=\"w-16 h-16 mx-auto mb-4 bg-green-100 rounded-full flex items-center justify-center\">\n                    <IconComponent className=\"h-8 w-8 text-green-600\" />\n                  </div>\n                  <h3 className=\"text-xl font-semibold mb-2\">{benefit.title}</h3>\n                  <p className=\"text-gray-600\">{benefit.description}</p>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":7238},"client/src/pages/products.tsx":{"content":"import { useState, useEffect } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'\nimport Header from '@/components/layout/header'\nimport Footer from '@/components/layout/footer'\nimport CollapsibleSidebar from '@/components/product/collapsible-sidebar'\nimport ProductCard from '@/components/product/product-card'\nimport AnalyticsBar from '@/components/product/analytics-bar'\nimport { getProductsByCategory, categories, type Product } from '@/lib/product-data'\nimport { Search, Filter, Grid, List } from 'lucide-react'\nimport { cn } from '@/lib/utils'\nimport { useLocation } from 'wouter'\n\nexport default function ProductsPage() {\n  const [location] = useLocation()\n  const [selectedCategory, setSelectedCategory] = useState<string>('cat-food')\n  const [searchQuery, setSearchQuery] = useState('')\n  const [sortBy, setSortBy] = useState('name')\n  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid')\n\n  // Handle URL parameters for category selection\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search)\n    const categoryParam = urlParams.get('category')\n    if (categoryParam && categories.find(cat => cat.id === categoryParam)) {\n      setSelectedCategory(categoryParam)\n    }\n  }, [location])\n\n  const products = getProductsByCategory(selectedCategory)\n  const categoryName = categories.find(cat => cat.id === selectedCategory)?.name || 'Products'\n\n  // Filter and sort products\n  const filteredProducts = products\n    .filter(product => \n      product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      product.description.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      product.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()))\n    )\n    .sort((a, b) => {\n      switch (sortBy) {\n        case 'price-low':\n          return a.price - b.price\n        case 'price-high':\n          return b.price - a.price\n        case 'rating':\n          return b.rating - a.rating\n        case 'reviews':\n          return b.reviews - a.reviews\n        case 'name':\n        default:\n          return a.name.localeCompare(b.name)\n      }\n    })\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n\n      <div className=\"flex\">\n        {/* Sidebar */}\n        <CollapsibleSidebar \n          selectedCategory={selectedCategory}\n          onCategorySelect={setSelectedCategory}\n        />\n\n        {/* Main Content */}\n        <div className=\"flex-1 p-4 sm:p-6 lg:ml-0\">\n          {/* Header */}\n          <div className=\"mb-6 sm:mb-8 pt-4\">\n            <h1 className=\"text-2xl sm:text-3xl font-bold text-[#26732d] mb-2 animate-fade-in\">\n              {categoryName}\n            </h1>\n            <p className=\"text-gray-600 animate-slide-up text-sm sm:text-base\">\n              Discover our premium selection of {categoryName.toLowerCase()} products\n            </p>\n          </div>\n\n          {/* Analytics Section */}\n          <AnalyticsBar categoryId={selectedCategory} className=\"animate-fade-in\" />\n\n          {/* Filters and Search */}\n          <div className=\"flex flex-col sm:flex-row gap-3 sm:gap-4 mb-6 sm:mb-8 animate-slide-up\">\n            {/* Search */}\n            <div className=\"relative flex-1\">\n              <Search size={18} className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" />\n              <Input\n                placeholder=\"Search products...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10 h-10\"\n              />\n            </div>\n\n            {/* Sort */}\n            <Select value={sortBy} onValueChange={setSortBy}>\n              <SelectTrigger className=\"w-full sm:w-48\">\n                <SelectValue placeholder=\"Sort by\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"name\">Name (A-Z)</SelectItem>\n                <SelectItem value=\"price-low\">Price (Low to High)</SelectItem>\n                <SelectItem value=\"price-high\">Price (High to Low)</SelectItem>\n                <SelectItem value=\"rating\">Highest Rated</SelectItem>\n                <SelectItem value=\"reviews\">Most Reviews</SelectItem>\n              </SelectContent>\n            </Select>\n\n            {/* View Mode */}\n            <div className=\"flex rounded-lg border border-gray-200 overflow-hidden\">\n              <Button\n                variant={viewMode === 'grid' ? 'default' : 'ghost'}\n                size=\"sm\"\n                onClick={() => setViewMode('grid')}\n                className=\"rounded-none h-10 px-3\"\n              >\n                <Grid size={16} />\n              </Button>\n              <Button\n                variant={viewMode === 'list' ? 'default' : 'ghost'}\n                size=\"sm\"\n                onClick={() => setViewMode('list')}\n                className=\"rounded-none h-10 px-3\"\n              >\n                <List size={16} />\n              </Button>\n            </div>\n          </div>\n\n          {/* Products Grid/List */}\n          {filteredProducts.length === 0 ? (\n            <div className=\"text-center py-8 sm:py-12\">\n              <div className=\"text-gray-400 mb-4\">\n                <Search size={40} className=\"mx-auto\" />\n              </div>\n              <h3 className=\"text-lg sm:text-xl font-semibold text-gray-600 mb-2\">No products found</h3>\n              <p className=\"text-gray-500 text-sm sm:text-base\">\n                Try adjusting your search terms or browse other categories\n              </p>\n            </div>\n          ) : (\n            <div className={cn(\n              'grid gap-4 sm:gap-6',\n              viewMode === 'grid' \n                ? 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4' \n                : 'grid-cols-1'\n            )}>\n              {filteredProducts.map((product, index) => (\n                <div\n                  key={product.id}\n                  className=\"animate-fade-in\"\n                  style={{ animationDelay: `${index * 0.05}s` } as React.CSSProperties}\n                >\n                  <ProductCard\n                    product={product}\n                    className={cn(\n                      viewMode === 'list' && 'sm:flex sm:flex-row sm:h-48'\n                    )}\n                  />\n                </div>\n              ))}\n            </div>\n          )}\n\n          {/* Results Info */}\n          <div className=\"mt-6 sm:mt-8 text-center text-gray-600 animate-fade-in text-sm sm:text-base\">\n            Showing {filteredProducts.length} of {products.length} products\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  )\n}","size_bytes":6797},"client/src/pages/reflex.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Search, Filter } from 'lucide-react';\nimport Header from '@/components/layout/header';\nimport Footer from '@/components/layout/footer';\nimport ProductCard from '@/components/product/product-card';\nimport AnalyticsBar from '@/components/product/analytics-bar';\nimport { getProductsByCategory, type Product } from '@/lib/product-data';\n\nconst reflexCategories = [\n  'Cat Food',\n  'Dog Food',\n  'Puppy Food',\n  'Kitten Food',\n  'Senior Pet Food',\n  'Grain-Free',\n  'Premium Line',\n  'Natural Formula'\n];\n\nexport default function ReflexPage() {\n  const [selectedCategory, setSelectedCategory] = useState<string>('All');\n  const [searchQuery, setSearchQuery] = useState('');\n  \n  // Get dynamic products from centralized data\n  const allProducts = getProductsByCategory('reflex');\n  \n  // Filter products based on search and category\n  const filteredProducts = allProducts.filter(product => {\n    const matchesCategory = selectedCategory === 'All';\n    const matchesSearch = product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         product.description.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         product.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()));\n    return matchesCategory && matchesSearch;\n  });\n\n  const handleCategoryFilter = (category: string) => {\n    setSelectedCategory(category);\n  };\n\n  const handleSearch = (query: string) => {\n    setSearchQuery(query);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      \n      {/* Hero Section */}\n      <section className=\"pt-24 pb-8 px-4 bg-gradient-to-r from-green-600 to-blue-600 text-white\">\n        <div className=\"max-w-7xl mx-auto\">\n          <h1 className=\"text-4xl md:text-5xl font-bold mb-4\">Reflex Premium Pet Nutrition</h1>\n          <p className=\"text-xl opacity-90 mb-6\">Premium quality pet food from Turkey's leading brand</p>\n          \n          {/* Search Bar */}\n          <div className=\"relative max-w-md\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n            <Input\n              placeholder=\"Search Reflex products...\"\n              className=\"pl-10 bg-white text-gray-900\"\n              value={searchQuery}\n              onChange={(e) => handleSearch(e.target.value)}\n              data-testid=\"input-search-reflex\"\n            />\n          </div>\n        </div>\n      </section>\n\n      {/* Main Content */}\n      <section className=\"py-8 px-4\">\n        <div className=\"max-w-7xl mx-auto lg:flex lg:gap-8\">\n          {/* Sidebar */}\n          <aside className=\"lg:w-1/4 mb-8 lg:mb-0\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Filter className=\"h-5 w-5\" />\n                  Categories\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <Button\n                    variant={selectedCategory === 'All' ? 'default' : 'ghost'}\n                    className=\"w-full justify-start\"\n                    onClick={() => handleCategoryFilter('All')}\n                    data-testid=\"button-category-all\"\n                  >\n                    All Categories\n                  </Button>\n                  {reflexCategories.map((category) => (\n                    <Button\n                      key={category}\n                      variant={selectedCategory === category ? 'default' : 'ghost'}\n                      className=\"w-full justify-start\"\n                      onClick={() => handleCategoryFilter(category)}\n                      data-testid={`button-category-${category.toLowerCase().replace(/\\s+/g, '-')}`}\n                    >\n                      {category}\n                    </Button>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </aside>\n\n          {/* Products Grid */}\n          <main className=\"lg:w-3/4\">\n            {/* Analytics Bar */}\n            <AnalyticsBar categoryId=\"reflex\" className=\"mb-6\" />\n            \n            <div className=\"flex justify-between items-center mb-6\">\n              <h2 className=\"text-2xl font-bold\">\n                {selectedCategory === 'All' ? 'All Reflex Products' : selectedCategory}\n              </h2>\n              <p className=\"text-gray-600\">{filteredProducts.length} products found</p>\n            </div>\n\n            <div className=\"grid sm:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {filteredProducts.map((product) => (\n                <ProductCard key={product.id} product={product} />\n              ))}\n            </div>\n\n            {/* No Products Message */}\n            {filteredProducts.length === 0 && (\n              <div className=\"text-center py-12\">\n                <p className=\"text-gray-500 text-lg\">No products found matching your criteria.</p>\n                <Button\n                  variant=\"outline\"\n                  className=\"mt-4\"\n                  onClick={() => {\n                    setSearchQuery('');\n                    setSelectedCategory('All');\n                  }}\n                >\n                  Clear Filters\n                </Button>\n              </div>\n            )}\n          </main>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":5642},"client/src/pages/reset-password.tsx":{"content":"import { useState, useEffect } from 'react'\nimport { Link, useLocation } from 'wouter'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { supabase } from '@/lib/supabase'\nimport { useToast } from '@/hooks/use-toast'\nimport { Lock, Eye, EyeOff, ArrowLeft, PawPrint, Check } from 'lucide-react'\n\nexport default function ResetPasswordPage() {\n  const [, setLocation] = useLocation()\n  const [loading, setLoading] = useState(false)\n  const [showPassword, setShowPassword] = useState(false)\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false)\n  const [formData, setFormData] = useState({\n    password: '',\n    confirmPassword: ''\n  })\n  const { toast } = useToast()\n\n  useEffect(() => {\n    // Check if we have the session from the password reset link\n    const handleAuthStateChange = () => {\n      supabase.auth.getSession().then(({ data: { session } }) => {\n        if (!session) {\n          toast({\n            title: 'Invalid Reset Link',\n            description: 'This password reset link is invalid or has expired. Please request a new one.',\n            variant: 'destructive',\n          })\n          setLocation('/forgot-password')\n        }\n      })\n    }\n\n    handleAuthStateChange()\n  }, [setLocation, toast])\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    \n    if (formData.password !== formData.confirmPassword) {\n      toast({\n        title: 'Password Mismatch',\n        description: 'Passwords do not match',\n        variant: 'destructive',\n      })\n      return\n    }\n\n    if (formData.password.length < 6) {\n      toast({\n        title: 'Password Too Short',\n        description: 'Password must be at least 6 characters long',\n        variant: 'destructive',\n      })\n      return\n    }\n\n    setLoading(true)\n\n    try {\n      const { error } = await supabase.auth.updateUser({\n        password: formData.password\n      })\n      \n      if (error) {\n        toast({\n          title: 'Reset Failed',\n          description: error.message,\n          variant: 'destructive',\n        })\n      } else {\n        toast({\n          title: 'Password Updated',\n          description: 'Your password has been successfully updated',\n        })\n        setLocation('/sign-in')\n      }\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: 'An unexpected error occurred',\n        variant: 'destructive',\n      })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }))\n  }\n\n  const passwordStrength = (password: string) => {\n    let strength = 0\n    if (password.length >= 6) strength++\n    if (password.match(/[a-z]/) && password.match(/[A-Z]/)) strength++\n    if (password.match(/\\d/)) strength++\n    if (password.match(/[^a-zA-Z\\d]/)) strength++\n    return strength\n  }\n\n  const getStrengthColor = (strength: number) => {\n    if (strength === 0) return 'bg-gray-200'\n    if (strength === 1) return 'bg-red-400'\n    if (strength === 2) return 'bg-yellow-400'\n    if (strength === 3) return 'bg-blue-400'\n    return 'bg-green-400'\n  }\n\n  const getStrengthText = (strength: number) => {\n    if (strength === 0) return 'Enter password'\n    if (strength === 1) return 'Weak'\n    if (strength === 2) return 'Fair'\n    if (strength === 3) return 'Good'\n    return 'Strong'\n  }\n\n  const strength = passwordStrength(formData.password)\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 via-white to-yellow-50 flex items-center justify-center px-4 py-8\">\n      <div className=\"absolute inset-0 bg-[radial-gradient(circle_at_50%_50%,rgba(38,115,45,0.1),transparent_50%)]\" />\n      \n      <div className=\"w-full max-w-md relative z-10\">\n        <div className=\"mb-6\">\n          <Link href=\"/sign-in\">\n            <Button variant=\"ghost\" className=\"text-meow-green hover:text-meow-green-dark hover:bg-green-50 p-2\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Sign In\n            </Button>\n          </Link>\n        </div>\n\n        <Card className=\"shadow-2xl border-0 bg-white/95 backdrop-blur-sm\">\n          <CardHeader className=\"text-center pb-6\">\n            <div className=\"flex justify-center mb-4\">\n              <div className=\"w-16 h-16 bg-gradient-to-br from-meow-green to-meow-green-dark rounded-full flex items-center justify-center\">\n                <PawPrint className=\"w-8 h-8 text-white\" />\n              </div>\n            </div>\n            \n            <CardTitle className=\"text-3xl font-bold text-meow-green\">\n              Reset Password\n            </CardTitle>\n            <CardDescription className=\"text-gray-600 text-lg\">\n              Enter your new password below\n            </CardDescription>\n          </CardHeader>\n\n          <CardContent className=\"space-y-6\">\n            <form onSubmit={handleSubmit} className=\"space-y-5\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\" className=\"text-meow-green font-medium\">\n                  New Password\n                </Label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\n                  <Input\n                    id=\"password\"\n                    type={showPassword ? 'text' : 'password'}\n                    placeholder=\"Enter your new password\"\n                    value={formData.password}\n                    onChange={(e) => handleInputChange('password', e.target.value)}\n                    className=\"pl-10 pr-10 h-12 border-gray-200 focus:border-meow-yellow focus:ring-meow-yellow/20\"\n                    required\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                  >\n                    {showPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\n                  </button>\n                </div>\n                \n                {formData.password && (\n                  <div className=\"space-y-1\">\n                    <div className=\"flex space-x-1\">\n                      {[1, 2, 3, 4].map((level) => (\n                        <div\n                          key={level}\n                          className={`h-1 flex-1 rounded-full ${\n                            level <= strength ? getStrengthColor(strength) : 'bg-gray-200'\n                          }`}\n                        />\n                      ))}\n                    </div>\n                    <p className=\"text-xs text-gray-500\">\n                      Password strength: {getStrengthText(strength)}\n                    </p>\n                  </div>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"confirmPassword\" className=\"text-meow-green font-medium\">\n                  Confirm New Password\n                </Label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\n                  <Input\n                    id=\"confirmPassword\"\n                    type={showConfirmPassword ? 'text' : 'password'}\n                    placeholder=\"Confirm your new password\"\n                    value={formData.confirmPassword}\n                    onChange={(e) => handleInputChange('confirmPassword', e.target.value)}\n                    className=\"pl-10 pr-10 h-12 border-gray-200 focus:border-meow-yellow focus:ring-meow-yellow/20\"\n                    required\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                    className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                  >\n                    {showConfirmPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\n                  </button>\n                </div>\n                \n                {formData.confirmPassword && (\n                  <div className=\"flex items-center space-x-1 text-xs\">\n                    {formData.password === formData.confirmPassword ? (\n                      <>\n                        <Check className=\"w-3 h-3 text-green-500\" />\n                        <span className=\"text-green-600\">Passwords match</span>\n                      </>\n                    ) : (\n                      <>\n                        <div className=\"w-3 h-3 rounded-full bg-red-500\" />\n                        <span className=\"text-red-600\">Passwords don't match</span>\n                      </>\n                    )}\n                  </div>\n                )}\n              </div>\n\n              <Button\n                type=\"submit\"\n                disabled={loading || formData.password !== formData.confirmPassword || formData.password.length < 6}\n                className=\"w-full h-12 bg-gradient-to-r from-meow-yellow to-yellow-400 hover:from-yellow-400 hover:to-meow-yellow text-meow-green-dark font-semibold text-lg shadow-lg hover:shadow-xl transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                {loading ? (\n                  <div className=\"flex items-center\">\n                    <div className=\"w-5 h-5 border-2 border-meow-green-dark border-t-transparent rounded-full animate-spin mr-2\" />\n                    Updating Password...\n                  </div>\n                ) : (\n                  'Update Password'\n                )}\n              </Button>\n            </form>\n\n            <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n              <h4 className=\"font-semibold text-blue-800 mb-2 text-sm\">Password Requirements:</h4>\n              <ul className=\"text-xs text-blue-700 space-y-1\">\n                <li>• At least 6 characters long</li>\n                <li>• Mix of uppercase and lowercase letters (recommended)</li>\n                <li>• Include numbers and special characters (recommended)</li>\n              </ul>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"text-center mt-6 text-gray-500 text-sm\">\n          <p>© 2025 Meow Meow Pet Shop. All rights reserved.</p>\n        </div>\n      </div>\n    </div>\n  )\n}","size_bytes":10687},"client/src/pages/sign-in.tsx":{"content":"import { useState } from 'react'\nimport { Link, useLocation } from 'wouter'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { signIn } from '@/lib/supabase'\nimport { useToast } from '@/hooks/use-toast'\nimport { useAuth } from '@/hooks/use-auth'\nimport { Mail, Lock, Eye, EyeOff, ArrowLeft, PawPrint, Shield } from 'lucide-react'\nconst logoPath = '/logo.png'\n\nexport default function SignInPage() {\n  const [, setLocation] = useLocation()\n  const [loading, setLoading] = useState(false)\n  const [showPassword, setShowPassword] = useState(false)\n  const [showAdminLogin, setShowAdminLogin] = useState(false)\n  const [formData, setFormData] = useState({\n    email: '',\n    password: ''\n  })\n  const [adminFormData, setAdminFormData] = useState({\n    username: '',\n    password: ''\n  })\n  const { toast } = useToast()\n  const { user, refreshAuth } = useAuth()\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setLoading(true)\n\n    try {\n      const { data, error } = await signIn(formData.email, formData.password)\n      \n      if (error) {\n        toast({\n          title: 'Sign In Failed',\n          description: error.message,\n          variant: 'destructive',\n        })\n      } else if (data?.user) {\n        // Refresh auth state to ensure UI updates\n        refreshAuth()\n        \n        toast({\n          title: 'Welcome back!',\n          description: 'You have successfully signed in.',\n        })\n        \n        // Small delay to ensure auth state is updated\n        setTimeout(() => {\n          setLocation('/')\n        }, 100)\n      }\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: 'An unexpected error occurred',\n        variant: 'destructive',\n      })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }))\n  }\n\n  const handleAdminInputChange = (field: string, value: string) => {\n    setAdminFormData(prev => ({ ...prev, [field]: value }))\n  }\n\n  const handleAdminSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setLoading(true)\n\n    try {\n      // Check admin credentials\n      if (adminFormData.username === 'admin' && adminFormData.password === 'admin123') {\n        const adminUser = {\n          id: 'admin-123',\n          email: 'admin@meowmeowpetshop.com',\n          name: 'Admin',\n          role: 'admin',\n          firstName: 'Admin',\n          lastName: 'User'\n        }\n        \n        localStorage.setItem('auth_user', JSON.stringify(adminUser))\n        \n        // Refresh auth state immediately\n        refreshAuth()\n        \n        toast({\n          title: 'Admin Login Successful',\n          description: 'Welcome to admin panel!',\n        })\n        \n        // Small delay to ensure auth state is updated, then redirect\n        setTimeout(() => {\n          setLocation('/admin')\n        }, 100)\n      } else {\n        toast({\n          title: 'Invalid Credentials',\n          description: 'Please check your admin username and password.',\n          variant: 'destructive',\n        })\n      }\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: 'An unexpected error occurred',\n        variant: 'destructive',\n      })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 via-white to-yellow-50 flex items-center justify-center px-4 py-8\">\n      {/* Background Pattern */}\n      <div className=\"absolute inset-0 bg-[radial-gradient(circle_at_50%_50%,rgba(38,115,45,0.1),transparent_50%)]\" />\n      \n      <div className=\"w-full max-w-md relative z-10\">\n        {/* Back to Home Button */}\n        <div className=\"mb-6\">\n          <Link href=\"/\">\n            <Button variant=\"ghost\" className=\"text-meow-green hover:text-meow-green-dark hover:bg-green-50 p-2\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Home\n            </Button>\n          </Link>\n        </div>\n\n        {/* Main Card */}\n        <Card className=\"shadow-2xl border-0 bg-white/95 backdrop-blur-sm\">\n          <CardHeader className=\"text-center pb-6\">\n            {/* Logo */}\n            <div className=\"flex justify-center mb-4\">\n              <Link href=\"/\" className=\"hover:opacity-80 transition-opacity\">\n                <img \n                  src={logoPath} \n                  alt=\"Meow Meow Pet Shop Logo\" \n                  className=\"h-16 w-16 rounded-full object-cover border-3 border-meow-green shadow-lg\"\n                />\n              </Link>\n            </div>\n            \n            <CardTitle className=\"text-3xl font-bold text-meow-green\">\n              Welcome Back\n            </CardTitle>\n            <CardDescription className=\"text-gray-600 text-lg\">\n              Sign in to your Meow Meow Pet Shop account\n            </CardDescription>\n          </CardHeader>\n\n          <CardContent className=\"space-y-6\">\n            <form onSubmit={handleSubmit} className=\"space-y-5\">\n              {/* Email Field */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\" className=\"text-meow-green font-medium\">\n                  Email Address\n                </Label>\n                <div className=\"relative\">\n                  <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder=\"Enter your email\"\n                    value={formData.email}\n                    onChange={(e) => handleInputChange('email', e.target.value)}\n                    className=\"pl-10 h-12 border-gray-200 focus:border-meow-yellow focus:ring-meow-yellow/20\"\n                    required\n                  />\n                </div>\n              </div>\n\n              {/* Password Field */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\" className=\"text-meow-green font-medium\">\n                  Password\n                </Label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\n                  <Input\n                    id=\"password\"\n                    type={showPassword ? 'text' : 'password'}\n                    placeholder=\"Enter your password\"\n                    value={formData.password}\n                    onChange={(e) => handleInputChange('password', e.target.value)}\n                    className=\"pl-10 pr-10 h-12 border-gray-200 focus:border-meow-yellow focus:ring-meow-yellow/20\"\n                    required\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                  >\n                    {showPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\n                  </button>\n                </div>\n              </div>\n\n              {/* Forgot Password Link */}\n              <div className=\"text-right\">\n                <Link href=\"/forgot-password\">\n                  <Button variant=\"link\" className=\"text-meow-green hover:text-meow-green-dark p-0 h-auto\">\n                    Forgot your password?\n                  </Button>\n                </Link>\n              </div>\n\n              {/* Sign In Button */}\n              <Button\n                type=\"submit\"\n                disabled={loading}\n                className=\"w-full h-12 bg-gradient-to-r from-meow-yellow to-yellow-400 hover:from-yellow-400 hover:to-meow-yellow text-meow-green-dark font-semibold text-lg shadow-lg hover:shadow-xl transition-all duration-200\"\n              >\n                {loading ? (\n                  <div className=\"flex items-center\">\n                    <div className=\"w-5 h-5 border-2 border-meow-green-dark border-t-transparent rounded-full animate-spin mr-2\" />\n                    Signing In...\n                  </div>\n                ) : (\n                  'Sign In'\n                )}\n              </Button>\n            </form>\n\n            {/* Divider */}\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <span className=\"w-full border-t border-gray-200\" />\n              </div>\n              <div className=\"relative flex justify-center text-sm\">\n                <span className=\"px-4 bg-white text-gray-500\">Don't have an account?</span>\n              </div>\n            </div>\n\n            {/* Sign Up Link */}\n            <div className=\"text-center\">\n              <Link href=\"/sign-up\">\n                <Button variant=\"outline\" className=\"w-full h-12 border-meow-green text-meow-green hover:bg-green-50 hover:border-meow-green-dark hover:text-meow-green-dark font-semibold\">\n                  Create New Account\n                </Button>\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Admin Login Section */}\n        <div className=\"mt-6\">\n          <div className=\"relative\">\n            <div className=\"absolute inset-0 flex items-center\">\n              <span className=\"w-full border-t border-gray-300\" />\n            </div>\n            <div className=\"relative flex justify-center text-sm\">\n              <span className=\"px-4 bg-gradient-to-br from-green-50 via-white to-yellow-50 text-gray-500\">or</span>\n            </div>\n          </div>\n          \n          <div className=\"mt-6\">\n            <Button\n              onClick={() => setShowAdminLogin(!showAdminLogin)}\n              variant=\"outline\"\n              className=\"w-full h-12 border-2 border-red-200 text-red-600 hover:bg-red-50 hover:border-red-300 font-semibold\"\n            >\n              <Shield className=\"w-5 h-5 mr-2\" />\n              {showAdminLogin ? 'Hide Admin Login' : 'Admin Login'}\n            </Button>\n          </div>\n\n          {/* Admin Login Form */}\n          {showAdminLogin && (\n            <Card className=\"mt-4 shadow-lg border-2 border-red-100 bg-red-50/50 backdrop-blur-sm\">\n              <CardHeader className=\"text-center pb-4\">\n                <CardTitle className=\"text-xl font-bold text-red-600 flex items-center justify-center\">\n                  <Shield className=\"w-5 h-5 mr-2\" />\n                  Admin Access\n                </CardTitle>\n                <CardDescription className=\"text-red-500\">\n                  Authorized personnel only\n                </CardDescription>\n              </CardHeader>\n              \n              <CardContent>\n                <form onSubmit={handleAdminSubmit} className=\"space-y-4\">\n                  {/* Admin Username */}\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"admin-username\" className=\"text-red-600 font-medium\">\n                      Username\n                    </Label>\n                    <Input\n                      id=\"admin-username\"\n                      type=\"text\"\n                      placeholder=\"Enter admin username\"\n                      value={adminFormData.username}\n                      onChange={(e) => handleAdminInputChange('username', e.target.value)}\n                      className=\"h-10 border-red-200 focus:border-red-400 focus:ring-red-400/20\"\n                      required\n                    />\n                  </div>\n\n                  {/* Admin Password */}\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"admin-password\" className=\"text-red-600 font-medium\">\n                      Password\n                    </Label>\n                    <Input\n                      id=\"admin-password\"\n                      type=\"password\"\n                      placeholder=\"Enter admin password\"\n                      value={adminFormData.password}\n                      onChange={(e) => handleAdminInputChange('password', e.target.value)}\n                      className=\"h-10 border-red-200 focus:border-red-400 focus:ring-red-400/20\"\n                      required\n                    />\n                  </div>\n\n                  {/* Admin Login Button */}\n                  <Button\n                    type=\"submit\"\n                    disabled={loading}\n                    className=\"w-full h-10 bg-red-600 hover:bg-red-700 text-white font-semibold\"\n                  >\n                    {loading ? (\n                      <div className=\"flex items-center\">\n                        <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2\" />\n                        Signing In...\n                      </div>\n                    ) : (\n                      'Access Admin Panel'\n                    )}\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n\n        {/* Footer */}\n        <div className=\"text-center mt-6 text-gray-500 text-sm\">\n          <p>© 2025 Meow Meow Pet Shop. All rights reserved.</p>\n          <div className=\"flex justify-center space-x-4 mt-2\">\n            <Link href=\"/privacy\">\n              <Button variant=\"link\" className=\"text-gray-500 hover:text-meow-green p-0 h-auto text-sm\">\n                Privacy Policy\n              </Button>\n            </Link>\n            <span>•</span>\n            <Link href=\"/terms\">\n              <Button variant=\"link\" className=\"text-gray-500 hover:text-meow-green p-0 h-auto text-sm\">\n                Terms of Service\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}","size_bytes":13933},"client/src/pages/sign-up.tsx":{"content":"import { useState } from 'react'\nimport { Link, useLocation } from 'wouter'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Checkbox } from '@/components/ui/checkbox'\nimport { signUp } from '@/lib/supabase'\nimport { useToast } from '@/hooks/use-toast'\nimport { Mail, Lock, Eye, EyeOff, ArrowLeft, PawPrint, User, Check } from 'lucide-react'\nconst logoPath = '/logo.png'\n\nexport default function SignUpPage() {\n  const [, setLocation] = useLocation()\n  const [loading, setLoading] = useState(false)\n  const [showPassword, setShowPassword] = useState(false)\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false)\n  const [agreedToTerms, setAgreedToTerms] = useState(false)\n  const [formData, setFormData] = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    password: '',\n    confirmPassword: ''\n  })\n  const { toast } = useToast()\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    \n    if (!agreedToTerms) {\n      toast({\n        title: 'Terms Required',\n        description: 'Please agree to the Terms of Service and Privacy Policy',\n        variant: 'destructive',\n      })\n      return\n    }\n\n    if (formData.password !== formData.confirmPassword) {\n      toast({\n        title: 'Password Mismatch',\n        description: 'Passwords do not match',\n        variant: 'destructive',\n      })\n      return\n    }\n\n    if (formData.password.length < 6) {\n      toast({\n        title: 'Password Too Short',\n        description: 'Password must be at least 6 characters long',\n        variant: 'destructive',\n      })\n      return\n    }\n\n    setLoading(true)\n\n    try {\n      console.log('Starting sign up process...')\n      const result = await signUp(\n        formData.email, \n        formData.password, \n        formData.firstName, \n        formData.lastName\n      )\n      \n      console.log('Sign up result:', result)\n      \n      if (result.error) {\n        console.error('Sign up error:', result.error)\n        toast({\n          title: 'Sign Up Failed',\n          description: result.error.message || 'An error occurred during sign up',\n          variant: 'destructive',\n        })\n      } else {\n        console.log('Sign up successful')\n        toast({\n          title: 'Account Created!',\n          description: 'Please check your email to verify your account.',\n        })\n        setLocation('/sign-in')\n      }\n    } catch (error) {\n      console.error('Unexpected error during sign up:', error)\n      toast({\n        title: 'Network Error',\n        description: 'Unable to connect to authentication service. Please try again.',\n        variant: 'destructive',\n      })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }))\n  }\n\n  const passwordStrength = (password: string) => {\n    let strength = 0\n    if (password.length >= 6) strength++\n    if (password.match(/[a-z]/) && password.match(/[A-Z]/)) strength++\n    if (password.match(/\\d/)) strength++\n    if (password.match(/[^a-zA-Z\\d]/)) strength++\n    return strength\n  }\n\n  const getStrengthColor = (strength: number) => {\n    if (strength === 0) return 'bg-gray-200'\n    if (strength === 1) return 'bg-red-400'\n    if (strength === 2) return 'bg-yellow-400'\n    if (strength === 3) return 'bg-blue-400'\n    return 'bg-green-400'\n  }\n\n  const getStrengthText = (strength: number) => {\n    if (strength === 0) return 'Enter password'\n    if (strength === 1) return 'Weak'\n    if (strength === 2) return 'Fair'\n    if (strength === 3) return 'Good'\n    return 'Strong'\n  }\n\n  const strength = passwordStrength(formData.password)\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 via-white to-yellow-50 flex items-center justify-center px-4 py-8\">\n      {/* Background Pattern */}\n      <div className=\"absolute inset-0 bg-[radial-gradient(circle_at_50%_50%,rgba(38,115,45,0.1),transparent_50%)]\" />\n      \n      <div className=\"w-full max-w-md relative z-10\">\n        {/* Back to Home Button */}\n        <div className=\"mb-6\">\n          <Link href=\"/\">\n            <Button variant=\"ghost\" className=\"text-meow-green hover:text-meow-green-dark hover:bg-green-50 p-2\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Home\n            </Button>\n          </Link>\n        </div>\n\n        {/* Main Card */}\n        <Card className=\"shadow-2xl border-0 bg-white/95 backdrop-blur-sm\">\n          <CardHeader className=\"text-center pb-6\">\n            {/* Logo */}\n            <div className=\"flex justify-center mb-4\">\n              <Link href=\"/\" className=\"hover:opacity-80 transition-opacity\">\n                <img \n                  src={logoPath} \n                  alt=\"Meow Meow Pet Shop Logo\" \n                  className=\"h-16 w-16 rounded-full object-cover border-3 border-meow-green shadow-lg\"\n                />\n              </Link>\n            </div>\n            \n            <CardTitle className=\"text-3xl font-bold text-meow-green\">\n              Join Our Pack\n            </CardTitle>\n            <CardDescription className=\"text-gray-600 text-lg\">\n              Create your Meow Meow Pet Shop account\n            </CardDescription>\n          </CardHeader>\n\n          <CardContent className=\"space-y-5\">\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              {/* Name Fields */}\n              <div className=\"grid grid-cols-2 gap-3\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"firstName\" className=\"text-meow-green font-medium text-sm\">\n                    First Name\n                  </Label>\n                  <div className=\"relative\">\n                    <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                    <Input\n                      id=\"firstName\"\n                      type=\"text\"\n                      placeholder=\"First name\"\n                      value={formData.firstName}\n                      onChange={(e) => handleInputChange('firstName', e.target.value)}\n                      className=\"pl-9 h-11 border-gray-200 focus:border-meow-yellow focus:ring-meow-yellow/20 text-sm\"\n                      required\n                    />\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"lastName\" className=\"text-meow-green font-medium text-sm\">\n                    Last Name\n                  </Label>\n                  <div className=\"relative\">\n                    <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                    <Input\n                      id=\"lastName\"\n                      type=\"text\"\n                      placeholder=\"Last name\"\n                      value={formData.lastName}\n                      onChange={(e) => handleInputChange('lastName', e.target.value)}\n                      className=\"pl-9 h-11 border-gray-200 focus:border-meow-yellow focus:ring-meow-yellow/20 text-sm\"\n                      required\n                    />\n                  </div>\n                </div>\n              </div>\n\n              {/* Email Field */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\" className=\"text-meow-green font-medium\">\n                  Email Address\n                </Label>\n                <div className=\"relative\">\n                  <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder=\"Enter your email\"\n                    value={formData.email}\n                    onChange={(e) => handleInputChange('email', e.target.value)}\n                    className=\"pl-10 h-12 border-gray-200 focus:border-meow-yellow focus:ring-meow-yellow/20\"\n                    required\n                  />\n                </div>\n              </div>\n\n              {/* Password Field */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\" className=\"text-meow-green font-medium\">\n                  Password\n                </Label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\n                  <Input\n                    id=\"password\"\n                    type={showPassword ? 'text' : 'password'}\n                    placeholder=\"Create a password\"\n                    value={formData.password}\n                    onChange={(e) => handleInputChange('password', e.target.value)}\n                    className=\"pl-10 pr-10 h-12 border-gray-200 focus:border-meow-yellow focus:ring-meow-yellow/20\"\n                    required\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                  >\n                    {showPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\n                  </button>\n                </div>\n                \n                {/* Password Strength Indicator */}\n                {formData.password && (\n                  <div className=\"space-y-1\">\n                    <div className=\"flex space-x-1\">\n                      {[1, 2, 3, 4].map((level) => (\n                        <div\n                          key={level}\n                          className={`h-1 flex-1 rounded-full ${\n                            level <= strength ? getStrengthColor(strength) : 'bg-gray-200'\n                          }`}\n                        />\n                      ))}\n                    </div>\n                    <p className=\"text-xs text-gray-500\">\n                      Password strength: {getStrengthText(strength)}\n                    </p>\n                  </div>\n                )}\n              </div>\n\n              {/* Confirm Password Field */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"confirmPassword\" className=\"text-meow-green font-medium\">\n                  Confirm Password\n                </Label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\n                  <Input\n                    id=\"confirmPassword\"\n                    type={showConfirmPassword ? 'text' : 'password'}\n                    placeholder=\"Confirm your password\"\n                    value={formData.confirmPassword}\n                    onChange={(e) => handleInputChange('confirmPassword', e.target.value)}\n                    className=\"pl-10 pr-10 h-12 border-gray-200 focus:border-meow-yellow focus:ring-meow-yellow/20\"\n                    required\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                    className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                  >\n                    {showConfirmPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\n                  </button>\n                </div>\n                \n                {/* Password Match Indicator */}\n                {formData.confirmPassword && (\n                  <div className=\"flex items-center space-x-1 text-xs\">\n                    {formData.password === formData.confirmPassword ? (\n                      <>\n                        <Check className=\"w-3 h-3 text-green-500\" />\n                        <span className=\"text-green-600\">Passwords match</span>\n                      </>\n                    ) : (\n                      <>\n                        <div className=\"w-3 h-3 rounded-full bg-red-500\" />\n                        <span className=\"text-red-600\">Passwords don't match</span>\n                      </>\n                    )}\n                  </div>\n                )}\n              </div>\n\n              {/* Terms Agreement */}\n              <div className=\"flex items-start space-x-3 pt-2\">\n                <Checkbox\n                  id=\"terms\"\n                  checked={agreedToTerms}\n                  onCheckedChange={(checked) => setAgreedToTerms(checked === true)}\n                  className=\"mt-0.5 border-gray-300 data-[state=checked]:bg-meow-green data-[state=checked]:border-meow-green\"\n                />\n                <div className=\"text-sm text-gray-600 leading-relaxed\">\n                  <Label htmlFor=\"terms\" className=\"cursor-pointer\">\n                    I agree to the{' '}\n                    <Link href=\"/terms\">\n                      <Button variant=\"link\" className=\"text-meow-green hover:text-meow-green-dark p-0 h-auto text-sm underline\">\n                        Terms of Service\n                      </Button>\n                    </Link>{' '}\n                    and{' '}\n                    <Link href=\"/privacy\">\n                      <Button variant=\"link\" className=\"text-meow-green hover:text-meow-green-dark p-0 h-auto text-sm underline\">\n                        Privacy Policy\n                      </Button>\n                    </Link>\n                  </Label>\n                </div>\n              </div>\n\n              {/* Sign Up Button */}\n              <Button\n                type=\"submit\"\n                disabled={loading || !agreedToTerms}\n                className=\"w-full h-12 bg-gradient-to-r from-meow-yellow to-yellow-400 hover:from-yellow-400 hover:to-meow-yellow text-meow-green-dark font-semibold text-lg shadow-lg hover:shadow-xl transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                {loading ? (\n                  <div className=\"flex items-center\">\n                    <div className=\"w-5 h-5 border-2 border-meow-green-dark border-t-transparent rounded-full animate-spin mr-2\" />\n                    Creating Account...\n                  </div>\n                ) : (\n                  'Create Account'\n                )}\n              </Button>\n            </form>\n\n            {/* Divider */}\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <span className=\"w-full border-t border-gray-200\" />\n              </div>\n              <div className=\"relative flex justify-center text-sm\">\n                <span className=\"px-4 bg-white text-gray-500\">Already have an account?</span>\n              </div>\n            </div>\n\n            {/* Sign In Link */}\n            <div className=\"text-center\">\n              <Link href=\"/sign-in\">\n                <Button variant=\"outline\" className=\"w-full h-12 border-meow-green text-meow-green hover:bg-green-50 hover:border-meow-green-dark hover:text-meow-green-dark font-semibold\">\n                  Sign In Instead\n                </Button>\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Footer */}\n        <div className=\"text-center mt-6 text-gray-500 text-sm\">\n          <p>© 2025 Meow Meow Pet Shop. All rights reserved.</p>\n        </div>\n      </div>\n    </div>\n  )\n}","size_bytes":15567},"client/src/components/auth/auth-modal.tsx":{"content":"import { useState } from 'react'\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport { signIn, signUp } from '@/lib/supabase'\nimport { useToast } from '@/hooks/use-toast'\nimport { Mail, Lock, User } from 'lucide-react'\n\ninterface AuthModalProps {\n  isOpen: boolean\n  onClose: () => void\n}\n\nexport default function AuthModal({ isOpen, onClose }: AuthModalProps) {\n  const [loading, setLoading] = useState(false)\n  const [signInData, setSignInData] = useState({ email: '', password: '' })\n  const [signUpData, setSignUpData] = useState({ email: '', password: '', confirmPassword: '' })\n  const { toast } = useToast()\n\n  const handleSignIn = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setLoading(true)\n\n    try {\n      const { error } = await signIn(signInData.email, signInData.password)\n      \n      if (error) {\n        toast({\n          title: 'Sign In Failed',\n          description: error.message,\n          variant: 'destructive',\n        })\n      } else {\n        toast({\n          title: 'Welcome back!',\n          description: 'You have successfully signed in.',\n        })\n        onClose()\n      }\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: 'An unexpected error occurred',\n        variant: 'destructive',\n      })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleSignUp = async (e: React.FormEvent) => {\n    e.preventDefault()\n    \n    if (signUpData.password !== signUpData.confirmPassword) {\n      toast({\n        title: 'Password Mismatch',\n        description: 'Passwords do not match',\n        variant: 'destructive',\n      })\n      return\n    }\n\n    setLoading(true)\n\n    try {\n      const { error } = await signUp(signUpData.email, signUpData.password)\n      \n      if (error) {\n        toast({\n          title: 'Sign Up Failed',\n          description: error.message,\n          variant: 'destructive',\n        })\n      } else {\n        toast({\n          title: 'Account Created!',\n          description: 'Please check your email to verify your account.',\n        })\n        onClose()\n      }\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: 'An unexpected error occurred',\n        variant: 'destructive',\n      })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"text-center text-[#26732d]\">Welcome to Meow Meow Pet Shop</DialogTitle>\n        </DialogHeader>\n\n        <Tabs defaultValue=\"signin\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"signin\">Sign In</TabsTrigger>\n            <TabsTrigger value=\"signup\">Sign Up</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"signin\" className=\"space-y-4\">\n            <form onSubmit={handleSignIn} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"signin-email\" className=\"flex items-center gap-2\">\n                  <Mail size={16} />\n                  Email\n                </Label>\n                <Input\n                  id=\"signin-email\"\n                  type=\"email\"\n                  value={signInData.email}\n                  onChange={(e) => setSignInData({ ...signInData, email: e.target.value })}\n                  placeholder=\"your@email.com\"\n                  required\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"signin-password\" className=\"flex items-center gap-2\">\n                  <Lock size={16} />\n                  Password\n                </Label>\n                <Input\n                  id=\"signin-password\"\n                  type=\"password\"\n                  value={signInData.password}\n                  onChange={(e) => setSignInData({ ...signInData, password: e.target.value })}\n                  placeholder=\"Your password\"\n                  required\n                />\n              </div>\n              <Button\n                type=\"submit\"\n                variant=\"meowGreen\"\n                className=\"w-full\"\n                disabled={loading}\n              >\n                {loading ? 'Signing In...' : 'Sign In'}\n              </Button>\n            </form>\n          </TabsContent>\n\n          <TabsContent value=\"signup\" className=\"space-y-4\">\n            <form onSubmit={handleSignUp} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"signup-email\" className=\"flex items-center gap-2\">\n                  <Mail size={16} />\n                  Email\n                </Label>\n                <Input\n                  id=\"signup-email\"\n                  type=\"email\"\n                  value={signUpData.email}\n                  onChange={(e) => setSignUpData({ ...signUpData, email: e.target.value })}\n                  placeholder=\"your@email.com\"\n                  required\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"signup-password\" className=\"flex items-center gap-2\">\n                  <Lock size={16} />\n                  Password\n                </Label>\n                <Input\n                  id=\"signup-password\"\n                  type=\"password\"\n                  value={signUpData.password}\n                  onChange={(e) => setSignUpData({ ...signUpData, password: e.target.value })}\n                  placeholder=\"Create password\"\n                  required\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"signup-confirm\" className=\"flex items-center gap-2\">\n                  <Lock size={16} />\n                  Confirm Password\n                </Label>\n                <Input\n                  id=\"signup-confirm\"\n                  type=\"password\"\n                  value={signUpData.confirmPassword}\n                  onChange={(e) => setSignUpData({ ...signUpData, confirmPassword: e.target.value })}\n                  placeholder=\"Confirm password\"\n                  required\n                />\n              </div>\n              <Button\n                type=\"submit\"\n                variant=\"meow\"\n                className=\"w-full\"\n                disabled={loading}\n              >\n                {loading ? 'Creating Account...' : 'Create Account'}\n              </Button>\n            </form>\n          </TabsContent>\n        </Tabs>\n      </DialogContent>\n    </Dialog>\n  )\n}","size_bytes":6812},"client/src/components/layout/footer.tsx":{"content":"import { Facebook, Instagram, Youtube, MessageCircle, MapPin, Phone, Mail, Clock } from 'lucide-react';\nconst logoPath = '/logo.png';\n\nexport default function Footer() {\n  return (\n    <footer className=\"meow-green text-white py-12\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n          {/* Company Info */}\n          <div>\n            <div className=\"flex items-center mb-4\">\n              <img src={logoPath} alt=\"Meow Meow Pet Shop Logo\" className=\"h-12 w-12 mr-3\" />\n              <div>\n                <h3 className=\"text-xl font-bold text-meow-yellow\">Meow Meow</h3>\n                <p className=\"text-sm\">Pet Shop</p>\n              </div>\n            </div>\n            <p className=\"text-gray-300 mb-4\">Your trusted partner for premium pet food and accessories in Savar, Bangladesh. We care for your pets like family.</p>\n            <div className=\"flex space-x-4\">\n              <a href=\"#\" className=\"text-meow-yellow hover:text-yellow-300 transition-colors\">\n                <Facebook size={20} />\n              </a>\n              <a href=\"#\" className=\"text-meow-yellow hover:text-yellow-300 transition-colors\">\n                <Instagram size={20} />\n              </a>\n              <a href=\"#\" className=\"text-meow-yellow hover:text-yellow-300 transition-colors\">\n                <Youtube size={20} />\n              </a>\n              <a href=\"#\" className=\"text-meow-yellow hover:text-yellow-300 transition-colors\">\n                <MessageCircle size={20} />\n              </a>\n            </div>\n          </div>\n\n          {/* Quick Links */}\n          <div>\n            <h4 className=\"font-bold text-meow-yellow mb-4\">Quick Links</h4>\n            <ul className=\"space-y-2\">\n              <li><a href=\"#\" className=\"text-gray-300 hover:text-meow-yellow transition-colors\">Home</a></li>\n              <li><a href=\"#\" className=\"text-gray-300 hover:text-meow-yellow transition-colors\">Cat Food</a></li>\n              <li><a href=\"#\" className=\"text-gray-300 hover:text-meow-yellow transition-colors\">Dog Food</a></li>\n              <li><a href=\"#\" className=\"text-gray-300 hover:text-meow-yellow transition-colors\">Toys & Accessories</a></li>\n              <li><a href=\"#\" className=\"text-gray-300 hover:text-meow-yellow transition-colors\">Grooming</a></li>\n              <li><a href=\"#\" className=\"text-gray-300 hover:text-meow-yellow transition-colors\">Health Care</a></li>\n            </ul>\n          </div>\n\n          {/* Policies */}\n          <div>\n            <h4 className=\"font-bold text-meow-yellow mb-4\">Policies</h4>\n            <ul className=\"space-y-2\">\n              <li><a href=\"#\" className=\"text-gray-300 hover:text-meow-yellow transition-colors\">Privacy Policy</a></li>\n              <li><a href=\"#\" className=\"text-gray-300 hover:text-meow-yellow transition-colors\">Return Policy</a></li>\n              <li><a href=\"#\" className=\"text-gray-300 hover:text-meow-yellow transition-colors\">Terms of Service</a></li>\n              <li><a href=\"#\" className=\"text-gray-300 hover:text-meow-yellow transition-colors\">Shipping Policy</a></li>\n              <li><a href=\"#\" className=\"text-gray-300 hover:text-meow-yellow transition-colors\">Quality Guarantee</a></li>\n              <li><a href=\"#\" className=\"text-gray-300 hover:text-meow-yellow transition-colors\">Helpline</a></li>\n            </ul>\n          </div>\n\n          {/* Contact Info */}\n          <div>\n            <h4 className=\"font-bold text-meow-yellow mb-4\">Contact Info</h4>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center\">\n                <MapPin size={16} className=\"mr-3 text-meow-yellow\" />\n                <span className=\"text-gray-300\">Savar, Dhaka, Bangladesh</span>\n              </div>\n              <div className=\"flex items-center\">\n                <Phone size={16} className=\"mr-3 text-meow-yellow\" />\n                <span className=\"text-gray-300\">+880-1234-567890</span>\n              </div>\n              <div className=\"flex items-center\">\n                <Mail size={16} className=\"mr-3 text-meow-yellow\" />\n                <span className=\"text-gray-300\">info@meowmeowpetshop.com</span>\n              </div>\n              <div className=\"flex items-center\">\n                <Clock size={16} className=\"mr-3 text-meow-yellow\" />\n                <span className=\"text-gray-300\">Daily: 9 AM - 9 PM</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Trust Badges & Payment Methods */}\n        <div className=\"border-t border-gray-600 mt-8 pt-8\">\n          <div className=\"grid md:grid-cols-2 gap-8 mb-6\">\n            <div className=\"text-center md:text-left\">\n              <h4 className=\"font-bold text-meow-yellow mb-4\">Trust & Security</h4>\n              <div className=\"flex justify-center md:justify-start space-x-4 flex-wrap mb-4\">\n                <div className=\"bg-green-100 text-green-800 px-3 py-2 rounded-lg text-sm font-medium\">🔒 100% Secure</div>\n                <div className=\"bg-blue-100 text-blue-800 px-3 py-2 rounded-lg text-sm font-medium\">🛡️ SSL Protected</div>\n                <div className=\"bg-yellow-100 text-yellow-800 px-3 py-2 rounded-lg text-sm font-medium\">⭐ Trusted by 10K+</div>\n              </div>\n            </div>\n            <div className=\"text-center md:text-right\">\n              <h4 className=\"font-bold text-meow-yellow mb-4\">We Accept</h4>\n              <div className=\"flex justify-center md:justify-end space-x-3 flex-wrap\">\n                <div className=\"bg-white text-black px-3 py-1 rounded text-sm font-medium\">bKash</div>\n                <div className=\"bg-white text-black px-3 py-1 rounded text-sm font-medium\">Nagad</div>\n                <div className=\"bg-white text-black px-3 py-1 rounded text-sm font-medium\">Rocket</div>\n                <div className=\"bg-white text-black px-3 py-1 rounded text-sm font-medium\">VISA</div>\n                <div className=\"bg-white text-black px-3 py-1 rounded text-sm font-medium\">MasterCard</div>\n                <div className=\"bg-white text-black px-3 py-1 rounded text-sm font-medium\">Cash on Delivery</div>\n              </div>\n            </div>\n          </div>\n          <div className=\"text-center text-gray-400 text-sm border-t border-gray-600 pt-4\">\n            <div className=\"flex items-center justify-center gap-4 mb-2\">\n              <div className=\"flex items-center gap-2\">\n              <span className=\"text-white font-medium text-xs\">Follow:</span>\n            </div>\n              <p>&copy; 2025 Meow Meow Pet Shop. All rights reserved.</p>\n              <img src={logoPath} alt=\"Meow Meow\" className=\"h-8 w-8\" />\n            </div>\n            <p>Developed with ❤️ for pet lovers in Bangladesh</p>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}","size_bytes":6871},"client/src/components/layout/header.tsx":{"content":"import { useState, useRef, useEffect } from 'react';\nimport { Search, User, ShoppingCart, Phone, Truck, Shield, Facebook, Instagram, LogOut, Menu, ChevronDown, LogIn } from 'lucide-react';\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { useAuth } from '@/hooks/use-auth';\nimport { signOut } from '@/lib/supabase';\nimport { useToast } from '@/hooks/use-toast';\nimport { useCart } from '@/contexts/cart-context';\nimport { Link, useLocation } from 'wouter';\nimport { searchProducts, type SearchableProduct } from '@/lib/search-data';\nconst logoPath = '/logo.png';\n\nexport default function Header() {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [showSearchResults, setShowSearchResults] = useState(false);\n  const [searchResults, setSearchResults] = useState<SearchableProduct[]>([]);\n  const [showMobileMenu, setShowMobileMenu] = useState(false);\n  const searchRef = useRef<HTMLDivElement>(null);\n  const { user, loading } = useAuth();\n  const { toast } = useToast();\n  const { state: cartState } = useCart();\n  const [, setLocation] = useLocation();\n\n  const handleSignOut = async () => {\n    // Check if it's an admin user (stored in localStorage)\n    const storedUser = localStorage.getItem('auth_user');\n    if (storedUser) {\n      localStorage.removeItem('auth_user');\n      window.location.reload(); // Refresh to update auth state\n      toast({ title: 'Signed out successfully', description: 'Come back soon!' });\n      return;\n    }\n\n    // Regular Supabase sign out\n    const { error } = await signOut();\n    if (error) {\n      toast({ title: 'Error', description: error.message, variant: 'destructive' });\n    } else {\n      toast({ title: 'Signed out successfully', description: 'Come back soon!' });\n    }\n  };\n\n  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const query = e.target.value;\n    setSearchQuery(query);\n    if (query.trim()) {\n      const results = searchProducts(query);\n      setSearchResults(results);\n      setShowSearchResults(true);\n    } else {\n      setShowSearchResults(false);\n      setSearchResults([]);\n    }\n  };\n\n  const handleSearchSelect = (product: SearchableProduct) => {\n    setLocation(product.route);\n    setSearchQuery('');\n    setShowSearchResults(false);\n  };\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (searchRef.current && !searchRef.current.contains(event.target as Node)) {\n        setShowSearchResults(false);\n      }\n    };\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, []);\n\n  const navigationItems = [\n    { name: 'Home', path: '/' },\n    { name: 'Privilege Club', path: '/privilege-club' },\n    { name: 'Categories', path: '#', subItems: [\n        { name: 'Cat Food', path: '/cat-food' },\n        { name: 'Dog Food', path: '/dog-food' },\n        { name: 'Cat Toys', path: '/cat-toys' },\n        { name: 'Cat Litter', path: '/cat-litter' },\n      ] },\n    { name: 'Reflex Brand', path: '/reflex' },\n    { name: 'Blog', path: '/blog' },\n    { name: 'All Products', path: '/products' }\n  ];\n\n  return (\n    <>\n      {/* Top Announcement Bar - Will scroll away */}\n      <div className=\"bg-[#38603d] text-white py-2 text-sm overflow-hidden relative z-30\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"flex flex-col lg:flex-row lg:justify-between lg:items-center gap-2\">\n            <div className=\"flex flex-wrap items-center gap-3\">\n              <div className=\"flex items-center bg-[#2d4f31] px-3 py-1 rounded-full text-xs\">\n                <Phone size={12} className=\"mr-1\" />\n                <span>+880-1234-567890</span>\n              </div>\n              <div className=\"flex items-center bg-[#2d4f31] px-3 py-1 rounded-full text-xs\">\n                <Truck size={12} className=\"mr-1\" />\n                <span>Free delivery over ৳2000</span>\n              </div>\n              <div className=\"flex items-center bg-[#2d4f31] px-3 py-1 rounded-full text-xs\">\n                <Shield size={12} className=\"mr-1\" />\n                <span>Quality guarantee</span>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-white font-medium text-xs\">Follow:</span>\n              <a href=\"#\" className=\"text-white hover:text-black transition-colors p-1 rounded\">\n                <Facebook size={14} />\n              </a>\n              <a href=\"#\" className=\"text-white hover:text-black transition-colors p-1 rounded\">\n                <Instagram size={14} />\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Header - Fixed position below announcement bar */}\n      <header className=\"bg-white shadow-md sticky top-0 z-50 border-b border-gray-200\">\n        <div className=\"container mx-auto px-4 py-3\">\n          <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4 lg:gap-8\">\n            {/* Logo + Search */}\n            <div className=\"flex flex-col lg:flex-row lg:items-center lg:gap-8 w-full\">\n              <Link href=\"/\" className=\"flex items-center hover:opacity-80 transition-opacity\">\n                <img src={logoPath} alt=\"Meow Meow Pet Shop Logo\" className=\"h-10 w-10 mr-2\" />\n                <div>\n                  <h1 className=\"text-lg font-bold text-[#26732d]\">Meow Meow</h1>\n                  <p className=\"text-xs text-gray-600\">Pet Shop</p>\n                </div>\n              </Link>\n\n              <div className=\"flex-1 mt-4 lg:mt-0\" ref={searchRef}>\n                <div className=\"relative\">\n                  <Input type=\"text\" placeholder=\"Search for pet food, toys, accessories...\" value={searchQuery} onChange={handleSearchChange} className=\"w-full py-2 px-4 pr-12 border-2 border-gray-200 rounded-lg focus:border-[#ffde59] focus:outline-none text-sm\" data-testid=\"input-global-search\" />\n                  <Button size=\"sm\" className=\"absolute right-2 top-1/2 transform -translate-y-1/2 bg-[#ffde59] text-black px-3 py-1 rounded-md hover:bg-[#ffd73e] transition-colors\" data-testid=\"button-search\">\n                    <Search size={14} />\n                  </Button>\n\n                  {showSearchResults && searchResults.length > 0 && (\n                    <Card className=\"absolute top-full left-0 right-0 mt-1 z-50 max-h-96 overflow-y-auto\">\n                      <CardContent className=\"p-0\">\n                        {searchResults.map((product) => (\n                          <div key={product.id} className=\"p-3 hover:bg-gray-50 cursor-pointer border-b last:border-b-0\" onClick={() => handleSearchSelect(product)} data-testid={`search-result-${product.id}`}>\n                            <div className=\"flex justify-between items-start\">\n                              <div>\n                                <h4 className=\"font-medium text-sm\">{product.name}</h4>\n                                <p className=\"text-xs text-gray-600\">{product.brand} • {product.category}</p>\n                                <p className=\"text-xs text-blue-600\">{product.page}</p>\n                              </div>\n                              <span className=\"text-sm font-bold text-green-600\">{product.price}</span>\n                            </div>\n                          </div>\n                        ))}\n                      </CardContent>\n                    </Card>\n                  )}\n\n                  {showSearchResults && searchResults.length === 0 && searchQuery.trim() && (\n                    <Card className=\"absolute top-full left-0 right-0 mt-1 z-50\">\n                      <CardContent className=\"p-4 text-center text-gray-500 text-sm\">\n                        No products found for \"{searchQuery}\"\n                      </CardContent>\n                    </Card>\n                  )}\n                </div>\n              </div>\n            </div>\n\n            {/* Account + Cart */}\n            <div className=\"flex items-center space-x-4\">\n              {!loading && user ? (\n                <div className=\"flex items-center space-x-3\">\n                  {/* Circular Avatar */}\n                  <div className=\"relative group\">\n                    <Link href=\"/dashboard\">\n                      <div className=\"w-10 h-10 rounded-full bg-gradient-to-br from-[#26732d] to-[#1d5624] flex items-center justify-center text-white font-semibold text-sm shadow-md hover:shadow-lg transition-all duration-200 cursor-pointer hover:scale-105\">\n                        {(user.firstName?.[0] || user.name?.[0] || user.email?.[0] || 'U').toUpperCase()}\n                      </div>\n                    </Link>\n                    {/* Tooltip */}\n                    <div className=\"absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-1 bg-gray-800 text-white text-xs rounded-md opacity-0 group-hover:opacity-100 transition-opacity duration-200 whitespace-nowrap z-50\">\n                      {user.firstName && user.lastName \n                        ? `${user.firstName} ${user.lastName}` \n                        : user.name || user.email?.split('@')[0]}\n                      <div className=\"text-xs opacity-75 mt-1\">\n                        Click to view dashboard\n                      </div>\n                    </div>\n                  </div>\n                  <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-700 hover:text-[#26732d]\" onClick={handleSignOut}>\n                    <LogOut size={18} />\n                    <span className=\"ml-1\">Sign Out</span>\n                  </Button>\n                </div>\n              ) : !loading ? (\n                <div className=\"flex items-center space-x-2\">\n                  <Link href=\"/sign-in\">\n                    <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-700 hover:text-[#26732d]\" data-testid=\"button-sign-in-desktop\">\n                      <User size={18} />\n                      <span className=\"ml-1\">Sign In</span>\n                    </Button>\n                  </Link>\n                  <Link href=\"/sign-up\">\n                    <Button variant=\"outline\" size=\"sm\" className=\"text-[#26732d] border-[#26732d] hover:bg-green-50\" data-testid=\"button-sign-up-desktop\">\n                      <span>Sign Up</span>\n                    </Button>\n                  </Link>\n                </div>\n              ) : (\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-10 h-10 rounded-full bg-gray-200 animate-pulse\"></div>\n                </div>\n              )}\n              <Link href=\"/cart\">\n                <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-700 hover:text-[#26732d] relative\" data-testid=\"button-cart\">\n                  <ShoppingCart size={18} />\n                  <span className=\"ml-1\">Cart</span>\n                  {cartState.itemCount > 0 && (\n                    <span className=\"absolute -top-1 -right-1 bg-[#ffde59] text-black text-xs rounded-full h-4 w-4 flex items-center justify-center font-bold\">\n                      {cartState.itemCount}\n                    </span>\n                  )}\n                </Button>\n              </Link>\n            </div>\n          </div>\n\n          <nav className=\"mt-4 border-t pt-4 relative\">\n            <div className=\"flex flex-wrap items-center gap-6\">\n              {navigationItems.map((item) => (\n                <div key={item.name} className=\"relative group\">\n                  {item.subItems ? (\n                    <div>\n                      <Button variant=\"ghost\" className=\"text-gray-700 hover:text-[#26732d] font-medium flex items-center gap-1\" data-testid={`nav-${item.name.toLowerCase().replace(/\\s+/g, '-')}`}>\n                        {item.name}\n                        <ChevronDown size={16} />\n                      </Button>\n                      <div className=\"absolute top-full left-0 mt-1 bg-white shadow-lg rounded-lg border py-2 min-w-48 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-50\">\n                        {item.subItems.map((subItem) => (\n                          <Link key={subItem.name} href={subItem.path} className=\"block px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 hover:text-[#26732d] transition-colors\" data-testid={`nav-sub-${subItem.name.toLowerCase().replace(/\\s+/g, '-')}`}>\n                            {subItem.name}\n                          </Link>\n                        ))}\n                      </div>\n                    </div>\n                  ) : (\n                    <Link href={item.path}>\n                      <Button variant=\"ghost\" className=\"text-gray-700 hover:text-[#26732d] font-medium\" data-testid={`nav-${item.name.toLowerCase().replace(/\\s+/g, '-')}`}>\n                        {item.name}\n                      </Button>\n                    </Link>\n                  )}\n                </div>\n              ))}\n            </div>\n          </nav>\n        </div>\n      </header>\n\n\n    </>\n  );\n}\n","size_bytes":13189},"client/src/components/layout/sidebar.tsx":{"content":"\nimport { useState } from 'react';\nimport { Cat, Dog, Bone, SprayCan, Plus, Heart, Menu, X, Crown, Gamepad2, Package, Stethoscope, Shirt, Gem } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\n\nexport default function Sidebar() {\n  const [isCollapsed, setIsCollapsed] = useState(false);\n\n  const categories = [\n    { icon: Crown, label: 'Cat Food', href: '#' },\n    { icon: Gamepad2, label: 'Cat Toys', href: '#' },\n    { icon: Package, label: 'Cat Litter', href: '#' },\n    { icon: Stethoscope, label: 'Cat Care & Health', href: '#' },\n    { icon: Shirt, label: 'Clothing, Beds & Carrier', href: '#' },\n    { icon: Gem, label: 'Cat Accessories', href: '#' },\n    { icon: Dog, label: 'Dog Food', href: '#' },\n    { icon: Plus, label: 'Dog Health & Accessories', href: '#' },\n    { icon: Bone, label: 'Rabbit Food & Accessories', href: '#' },\n    { icon: SprayCan, label: 'Bird Food & Accessories', href: '#' },\n  ];\n\n  const toggleSidebar = () => {\n    setIsCollapsed(!isCollapsed);\n  };\n\n  return (\n    <aside className={cn(\n      'bg-white shadow-lg min-h-screen transition-all duration-300 ease-in-out',\n      'hidden lg:block',\n      isCollapsed ? 'w-16' : 'w-64'\n    )}>\n      <div className=\"p-4\">\n        {/* Toggle Button */}\n        <div className=\"flex justify-between items-center mb-4\">\n          {!isCollapsed && (\n            <h3 className=\"font-bold text-meow-green\">Categories</h3>\n          )}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={toggleSidebar}\n            className=\"hover:bg-gray-100 p-2\"\n            title={isCollapsed ? \"Expand sidebar\" : \"Collapse sidebar\"}\n          >\n            {isCollapsed ? <Menu size={16} /> : <X size={16} />}\n          </Button>\n        </div>\n\n        {/* Categories List */}\n        <ul className=\"space-y-2\">\n          {categories.map((category, index) => {\n            const IconComponent = category.icon;\n            return (\n              <li key={index}>\n                <a \n                  href={category.href} \n                  className={cn(\n                    \"flex items-center py-2 px-3 text-gray-700 hover:bg-yellow-50 hover:text-meow-green rounded transition-colors\",\n                    isCollapsed && \"justify-center px-2\"\n                  )}\n                  title={isCollapsed ? category.label : undefined}\n                >\n                  <IconComponent size={16} className={cn(\n                    \"text-meow-green\",\n                    isCollapsed ? \"mr-0\" : \"mr-3\"\n                  )} />\n                  {!isCollapsed && (\n                    <span className=\"transition-opacity duration-300\">\n                      {category.label}\n                    </span>\n                  )}\n                </a>\n              </li>\n            );\n          })}\n        </ul>\n\n        {/* Special Offers Box - Only show when expanded */}\n        {!isCollapsed && (\n          <div className=\"mt-8 meow-yellow p-4 rounded-lg transition-all duration-300\">\n            <h4 className=\"font-bold text-meow-green mb-2\">Special Offer!</h4>\n            <p className=\"text-sm text-gray-700 mb-3\">Get 5% off on your first order</p>\n            <Button className=\"meow-green text-white px-4 py-2 rounded text-sm hover-meow-green w-full\">\n              Claim Now\n            </Button>\n          </div>\n        )}\n\n        {/* Collapsed Special Offer Icon */}\n        {isCollapsed && (\n          <div className=\"mt-8 flex justify-center\">\n            <div className=\"w-8 h-8 bg-yellow-400 rounded-full flex items-center justify-center cursor-pointer hover:bg-yellow-500 transition-colors\" title=\"Special Offer Available\">\n              <span className=\"text-xs font-bold text-green-700\">%</span>\n            </div>\n          </div>\n        )}\n      </div>\n    </aside>\n  );\n}\n","size_bytes":3843},"client/src/components/product/analytics-bar.tsx":{"content":"import { Card, CardContent } from '@/components/ui/card'\nimport { Badge } from '@/components/ui/badge'\nimport { TrendingDown, TrendingUp, Star, Trophy } from 'lucide-react'\nimport { getCategoryAnalytics } from '@/lib/product-data'\nimport { cn } from '@/lib/utils'\n\ninterface AnalyticsBarProps {\n  categoryId: string\n  className?: string\n}\n\nexport default function AnalyticsBar({ categoryId, className }: AnalyticsBarProps) {\n  const analytics = getCategoryAnalytics(categoryId)\n\n  if (!analytics.lowestPriced) {\n    return null\n  }\n\n  const analyticsItems = [\n    {\n      icon: TrendingDown,\n      title: 'Lowest Priced',\n      product: analytics.lowestPriced,\n      iconColor: 'text-green-500',\n      bgColor: 'bg-green-50',\n    },\n    {\n      icon: TrendingUp,\n      title: 'Highest Priced',\n      product: analytics.highestPriced,\n      iconColor: 'text-blue-500',\n      bgColor: 'bg-blue-50',\n    },\n    {\n      icon: Star,\n      title: 'Highest Rated',\n      product: analytics.highestRated,\n      iconColor: 'text-yellow-500',\n      bgColor: 'bg-yellow-50',\n    },\n    {\n      icon: Trophy,\n      title: 'Best Seller',\n      product: analytics.bestSeller,\n      iconColor: 'text-purple-500',\n      bgColor: 'bg-purple-50',\n    },\n  ]\n\n  return (\n    <div className={cn('grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-8', className)}>\n      {analyticsItems.map((item, index) => {\n        const Icon = item.icon\n        const product = item.product\n\n        if (!product) return null\n\n        return (\n          <Card \n            key={index} \n            className={cn(\n              'hover-lift animate-fade-in border-l-4',\n              item.bgColor,\n              item.iconColor.replace('text-', 'border-')\n            )}\n            style={{ animationDelay: `${index * 0.1}s` } as React.CSSProperties}\n          >\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-start space-x-3\">\n                <div className={cn('p-2 rounded-full', item.bgColor.replace('50', '100'))}>\n                  <Icon size={20} className={item.iconColor} />\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-sm font-medium text-gray-600 mb-1\">{item.title}</p>\n                  <h4 className=\"font-semibold text-[#26732d] text-sm mb-2 line-clamp-2\">\n                    {product.name}\n                  </h4>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-lg font-bold text-[#26732d]\">\n                      ৳{product.price.toLocaleString()}\n                    </span>\n                    {item.title === 'Highest Rated' && (\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        {product.rating} ⭐\n                      </Badge>\n                    )}\n                    {item.title === 'Best Seller' && product.isBestSeller && (\n                      <Badge className=\"bg-yellow-500 text-white text-xs\">\n                        Best\n                      </Badge>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )\n      })}\n    </div>\n  )\n}","size_bytes":3240},"client/src/components/product/collapsible-sidebar.tsx":{"content":"import { useState } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { ScrollArea } from '@/components/ui/scroll-area'\nimport { Badge } from '@/components/ui/badge'\nimport { categories, getProductsByCategory } from '@/lib/product-data'\nimport { Menu, X, Cat, Dog, Heart, Gift, ShoppingBag, Stethoscope, Gamepad2, Package, Star } from 'lucide-react'\nimport { cn } from '@/lib/utils'\n\ninterface CollapsibleSidebarProps {\n  selectedCategory: string | null\n  onCategorySelect: (categoryId: string) => void\n}\n\nconst categoryIcons = {\n  'cat-food': Cat,\n  'dog-food': Dog,\n  'cat-toys': Gamepad2,\n  'cat-litter': Package,\n  'toys-treats': Gift,\n  'grooming': ShoppingBag,\n  'health-care': Stethoscope,\n  'accessories': Heart,\n  'reflex': Star,\n}\n\nexport default function CollapsibleSidebar({ selectedCategory, onCategorySelect }: CollapsibleSidebarProps) {\n  const [isCollapsed, setIsCollapsed] = useState(false)\n\n  const toggleSidebar = () => {\n    setIsCollapsed(!isCollapsed)\n  }\n\n  return (\n    <>\n      {/* Mobile Toggle Button */}\n      <Button\n        variant=\"outline\"\n        size=\"sm\"\n        className=\"lg:hidden fixed top-4 left-4 z-50 bg-white shadow-lg\"\n        onClick={toggleSidebar}\n      >\n        {isCollapsed ? <Menu size={20} /> : <X size={20} />}\n      </Button>\n\n      {/* Sidebar */}\n      <div\n        className={cn(\n          'fixed lg:relative left-0 top-0 h-full bg-white border-r border-gray-200 transition-all duration-300 z-40',\n          isCollapsed ? 'w-0 lg:w-16 overflow-hidden' : 'w-64 lg:w-64',\n          'lg:translate-x-0',\n          isCollapsed && 'lg:overflow-visible'\n        )}\n      >\n        {/* Desktop Toggle Button */}\n        <div className=\"hidden lg:flex justify-end p-4 border-b border-gray-200\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={toggleSidebar}\n            className=\"hover:bg-gray-100\"\n          >\n            {isCollapsed ? <Menu size={20} /> : <X size={20} />}\n          </Button>\n        </div>\n\n        {/* Sidebar Content */}\n        <div className={cn('h-full', isCollapsed && 'lg:hidden')}>\n          <div className=\"p-4 border-b border-gray-200\">\n            <h2 className=\"text-lg font-semibold text-[#26732d]\">Categories</h2>\n          </div>\n\n          <ScrollArea className=\"h-[calc(100vh-120px)]\">\n            <div className=\"p-4 space-y-2\">\n              {categories.map((category) => {\n                const Icon = categoryIcons[category.id as keyof typeof categoryIcons]\n                const productCount = getProductsByCategory(category.id).length\n                const isSelected = selectedCategory === category.id\n\n                return (\n                  <Button\n                    key={category.id}\n                    variant={isSelected ? \"meow\" : \"ghost\"}\n                    className={cn(\n                      'w-full justify-start text-left h-auto p-3 hover:bg-[#f0f8ff] transition-colors',\n                      isSelected && 'bg-[#ffde59] text-[#26732d] hover:bg-[#ffd73e]'\n                    )}\n                    onClick={() => onCategorySelect(category.id)}\n                  >\n                    <div className=\"flex items-center space-x-3 w-full\">\n                      <Icon size={20} className={isSelected ? 'text-[#26732d]' : 'text-gray-600'} />\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"font-medium truncate\">{category.name}</div>\n                        <div className=\"flex items-center mt-1 space-x-2\">\n                          <Badge \n                            variant=\"secondary\" \n                            className={cn(\n                              'text-xs',\n                              isSelected ? 'bg-[#26732d] text-white' : 'bg-gray-100 text-gray-600'\n                            )}\n                          >\n                            {productCount} items\n                          </Badge>\n                        </div>\n                      </div>\n                    </div>\n                  </Button>\n                )\n              })}\n            </div>\n          </ScrollArea>\n        </div>\n\n        {/* Collapsed Mini Icons */}\n        {isCollapsed && (\n          <div className=\"hidden lg:block absolute left-0 top-20 w-16 bg-white border-r border-gray-200\">\n            <div className=\"py-4 space-y-2\">\n              {categories.map((category) => {\n                const Icon = categoryIcons[category.id as keyof typeof categoryIcons]\n                const isSelected = selectedCategory === category.id\n\n                return (\n                  <Button\n                    key={category.id}\n                    variant={isSelected ? \"meow\" : \"ghost\"}\n                    size=\"sm\"\n                    className={cn(\n                      'w-12 h-12 mx-2 p-0 hover:bg-[#f0f8ff]',\n                      isSelected && 'bg-[#ffde59] text-[#26732d] hover:bg-[#ffd73e]'\n                    )}\n                    onClick={() => onCategorySelect(category.id)}\n                    title={category.name}\n                  >\n                    <Icon size={20} />\n                  </Button>\n                )\n              })}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Mobile Overlay */}\n      {!isCollapsed && (\n        <div\n          className=\"lg:hidden fixed inset-0 bg-black bg-opacity-50 z-30\"\n          onClick={toggleSidebar}\n        />\n      )}\n    </>\n  )\n}","size_bytes":5445},"client/src/components/product/product-card.tsx":{"content":"import { useState } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { Card, CardContent } from '@/components/ui/card'\nimport { Heart, ShoppingCart, Star, Check } from 'lucide-react'\nimport { Product } from '@/lib/product-data'\nimport { useCart } from '@/contexts/cart-context'\nimport { useToast } from '@/hooks/use-toast'\nimport { cn } from '@/lib/utils'\n\ninterface ProductCardProps {\n  product: Product\n  className?: string\n}\n\nexport default function ProductCard({ product, className }: ProductCardProps) {\n  const [isLiked, setIsLiked] = useState(false)\n  const [isAddingToCart, setIsAddingToCart] = useState(false)\n  const { addItem, getItemQuantity } = useCart()\n  const { toast } = useToast()\n  \n  const itemQuantity = getItemQuantity(product.id)\n  const isInCart = itemQuantity > 0\n\n  const handleAddToCart = async () => {\n    if (product.stock === 0) return\n    \n    setIsAddingToCart(true)\n    \n    try {\n      addItem({\n        id: product.id,\n        name: product.name,\n        price: product.price,\n        image: product.image,\n        maxStock: product.stock\n      })\n      \n      toast({\n        title: \"Added to cart\",\n        description: `${product.name} has been added to your cart.`,\n      })\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add item to cart. Please try again.\",\n        variant: \"destructive\",\n      })\n    } finally {\n      setIsAddingToCart(false)\n    }\n  }\n\n  const renderStars = (rating: number) => {\n    return Array.from({ length: 5 }, (_, index) => (\n      <Star \n        key={index} \n        size={14} \n        className={index < rating ? 'text-yellow-500 fill-current' : 'text-gray-300'} \n      />\n    ))\n  }\n\n  const getBadgeColor = (product: Product) => {\n    if (product.isBestSeller) return 'bg-yellow-500 text-white'\n    if (product.isNew) return 'bg-blue-500 text-white'\n    if (product.isLowStock) return 'bg-red-500 text-white'\n    return 'bg-gray-500 text-white'\n  }\n\n  const getBadgeText = (product: Product) => {\n    if (product.isBestSeller) return 'Best Seller'\n    if (product.isNew) return 'New'\n    if (product.isLowStock) return 'Low Stock'\n    return null\n  }\n\n  const badgeText = getBadgeText(product)\n\n  return (\n    <Card className={cn('group hover-lift animate-fade-in relative overflow-hidden', className)}>\n      {/* Badges */}\n      {badgeText && (\n        <Badge \n          className={cn(\n            'absolute top-3 left-3 z-10 text-xs font-bold',\n            getBadgeColor(product)\n          )}\n        >\n          {badgeText}\n        </Badge>\n      )}\n\n      {/* Like Button */}\n      <Button\n        variant=\"ghost\"\n        size=\"sm\"\n        className=\"absolute top-3 right-3 z-10 bg-white bg-opacity-80 hover:bg-white p-2 rounded-full\"\n        onClick={() => setIsLiked(!isLiked)}\n      >\n        <Heart \n          size={16} \n          className={cn(\n            'transition-colors',\n            isLiked ? 'text-red-500 fill-current' : 'text-gray-400 hover:text-red-500'\n          )} \n        />\n      </Button>\n\n      {/* Product Image */}\n      <div className=\"relative overflow-hidden\">\n        <img \n          src={product.image} \n          alt={product.name} \n          className=\"w-full h-48 object-cover transition-transform duration-300 group-hover:scale-105\" \n          loading=\"lazy\"\n          decoding=\"async\"\n        />\n        <div className=\"absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-10 transition-opacity duration-300\"></div>\n      </div>\n\n      <CardContent className=\"p-4\">\n        {/* Product Name */}\n        <h3 className=\"font-semibold text-[#26732d] mb-2 line-clamp-2 group-hover:text-[#1e5d26] transition-colors\">\n          {product.name}\n        </h3>\n\n        {/* Rating */}\n        <div className=\"flex items-center mb-3\">\n          <div className=\"flex items-center mr-2\">\n            {renderStars(product.rating)}\n          </div>\n          <span className=\"text-sm text-gray-600\">\n            ({product.reviews} reviews)\n          </span>\n        </div>\n\n        {/* Tags */}\n        {product.tags.length > 0 && (\n          <div className=\"flex flex-wrap gap-1 mb-3\">\n            {product.tags.slice(0, 2).map((tag, index) => (\n              <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                {tag}\n              </Badge>\n            ))}\n          </div>\n        )}\n\n        {/* Price and Add to Cart */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex flex-col\">\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-lg font-bold text-[#26732d]\">\n                ৳{product.price.toLocaleString()}\n              </span>\n              {product.originalPrice && (\n                <span className=\"text-sm text-gray-500 line-through\">\n                  ৳{product.originalPrice.toLocaleString()}\n                </span>\n              )}\n            </div>\n            <div className=\"text-xs text-gray-500 mt-1\">\n              Stock: {product.stock} units\n            </div>\n          </div>\n          \n          <Button \n            variant={isInCart ? \"default\" : \"meow\"}\n            size=\"sm\"\n            className=\"px-3 py-2 rounded-lg shadow-sm btn-bounce\"\n            disabled={product.stock === 0 || isAddingToCart}\n            onClick={handleAddToCart}\n          >\n            {isAddingToCart ? (\n              <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n            ) : isInCart ? (\n              <Check size={16} />\n            ) : (\n              <ShoppingCart size={16} />\n            )}\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}","size_bytes":5764},"client/src/components/sections/bestsellers-cats.tsx":{"content":"import { Cat } from 'lucide-react';\nimport ProductCard from '@/components/ui/product-card';\n\nexport default function BestsellersCats() {\n  const products = [\n    {\n      id: 5,\n      name: 'Premium Dry Cat Food (5kg)',\n      image: 'https://images.unsplash.com/photo-1589924691995-400dc9ecc119?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      price: 2400,\n      rating: 5,\n      reviews: 124,\n      badge: 'BESTSELLER',\n      badgeColor: 'yellow',\n      stockStatus: 'In Stock'\n    },\n    {\n      id: 6,\n      name: 'Interactive Cat Wand Toy',\n      image: 'https://images.unsplash.com/photo-1601758228041-f3b2795255f1?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      price: 350,\n      rating: 4,\n      reviews: 89,\n      badge: 'NEW',\n      badgeColor: 'blue',\n      stockStatus: 'In Stock'\n    },\n    {\n      id: 7,\n      name: 'Premium Scratching Post',\n      image: 'https://images.unsplash.com/photo-1615789591457-74a63395c990?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      price: 1800,\n      rating: 5,\n      reviews: 156,\n      stockStatus: 'Low Stock'\n    },\n    {\n      id: 8,\n      name: 'Self-Cleaning Litter Box',\n      image: 'https://images.unsplash.com/photo-1574158622682-e40e69881006?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      price: 4500,\n      rating: 4,\n      reviews: 67,\n      stockStatus: 'In Stock'\n    }\n  ];\n\n  return (\n    <section className=\"section-spacing bg-gray-50\">\n      <div className=\"responsive-container\">\n        <h2 className=\"text-2xl sm:text-3xl font-bold text-center text-[#26732d] mb-8 flex flex-col sm:flex-row items-center justify-center gap-3 animate-fade-in\">\n          <Cat size={32} className=\"text-[#26732d]\" />\n          Bestsellers for Cats\n        </h2>\n        <div className=\"responsive-grid\">\n          {products.map((product, index) => (\n            <div \n              key={product.id} \n              className=\"hover-lift animate-fade-in\"\n              style={{ animationDelay: `${index * 0.1}s` }}\n            >\n              <ProductCard product={product} />\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":2139},"client/src/components/sections/bestsellers-dogs.tsx":{"content":"import { Dog } from 'lucide-react';\nimport ProductCard from '@/components/ui/product-card';\n\nexport default function BestsellersDogs() {\n  const products = [\n    {\n      id: 9,\n      name: 'Premium Dog Food (10kg)',\n      image: 'https://images.unsplash.com/photo-1583337130417-3346a1be7dee?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      price: 3200,\n      rating: 5,\n      reviews: 203,\n      badge: 'BESTSELLER',\n      badgeColor: 'yellow',\n      stockStatus: 'In Stock'\n    },\n    {\n      id: 10,\n      name: 'Heavy Duty Rope Toy',\n      image: 'https://images.unsplash.com/photo-1601758228041-f3b2795255f1?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      price: 450,\n      rating: 4,\n      reviews: 142,\n      stockStatus: 'In Stock'\n    },\n    {\n      id: 11,\n      name: 'Adjustable Dog Harness',\n      image: 'https://images.unsplash.com/photo-1615789591457-74a63395c990?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      price: 950,\n      rating: 5,\n      reviews: 98,\n      badge: 'NEW',\n      badgeColor: 'blue',\n      stockStatus: 'In Stock'\n    },\n    {\n      id: 12,\n      name: 'Interactive Puzzle Feeder',\n      image: 'https://images.unsplash.com/photo-1534361960057-19889db9621e?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      price: 1200,\n      rating: 4,\n      reviews: 76,\n      stockStatus: 'Low Stock'\n    }\n  ];\n\n  return (\n    <section className=\"section-spacing bg-white\">\n      <div className=\"responsive-container\">\n        <h2 className=\"text-2xl sm:text-3xl font-bold text-center text-[#26732d] mb-8 flex flex-col sm:flex-row items-center justify-center gap-3 animate-fade-in\">\n          <Dog size={32} className=\"text-[#26732d]\" />\n          Bestsellers for Dogs\n        </h2>\n        <div className=\"responsive-grid\">\n          {products.map((product, index) => (\n            <div \n              key={product.id} \n              className=\"hover-lift animate-fade-in\"\n              style={{ animationDelay: `${index * 0.1}s` }}\n            >\n              <ProductCard product={product} />\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":2131},"client/src/components/sections/blog-preview.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { ArrowRight, BookOpen } from 'lucide-react';\n\nexport default function BlogPreview() {\n  const articles = [\n    {\n      id: 1,\n      title: '10 Essential Tips for New Pet Owners',\n      excerpt: 'Starting your journey as a pet parent? Here are the essential tips every new pet owner should know to ensure their furry friend stays happy and healthy.',\n      image: 'https://images.unsplash.com/photo-1601758228041-f3b2795255f1?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=200',\n      date: 'March 15, 2024',\n      slug: 'essential-tips-new-pet-owners'\n    },\n    {\n      id: 2,\n      title: 'Complete Guide to Pet Nutrition',\n      excerpt: 'Understanding what to feed your pets and when is crucial for their health. Learn about the nutritional requirements for different pets and life stages.',\n      image: 'https://images.unsplash.com/photo-1583337130417-3346a1be7dee?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=200',\n      date: 'March 12, 2024',\n      slug: 'complete-pet-nutrition-guide'\n    },\n    {\n      id: 3,\n      title: 'Professional Grooming at Home',\n      excerpt: 'Learn how to groom your pets like a professional at home. From basic brushing techniques to nail trimming, we cover everything you need to know.',\n      image: 'https://images.unsplash.com/photo-1628009368231-7bb7cfcb0def?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=200',\n      date: 'March 10, 2024',\n      slug: 'professional-grooming-at-home'\n    }\n  ];\n\n  return (\n    <section className=\"py-12 bg-gray-50\">\n      <div className=\"container mx-auto px-4\">\n        <h2 className=\"text-3xl font-bold text-center text-[#26732d] mb-8 flex items-center justify-center gap-3\">\n          <BookOpen size={32} className=\"text-[#26732d]\" />\n          Pet Care Tips & News\n        </h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          {articles.map(article => (\n            <article key={article.id} className=\"rounded-xl bg-white p-4 shadow hover:shadow-md transition-all duration-300 transform hover:scale-105\">\n              <img \n                src={article.image} \n                alt={article.title} \n                className=\"rounded-md mb-3 w-full h-48 object-cover\" \n              />\n              <div className=\"mb-2\">\n                <span className=\"text-xs bg-blue-100 text-blue-600 px-2 py-1 rounded-full font-medium\">#Nutrition</span>\n                <span className=\"text-xs bg-green-100 text-green-600 px-2 py-1 rounded-full font-medium ml-2\">#Grooming</span>\n              </div>\n              <h3 className=\"font-semibold text-lg mb-2 text-[#26732d]\">{article.title}</h3>\n              <p className=\"text-sm text-gray-600 mb-2\">{article.date}</p>\n              <p className=\"text-sm text-gray-700 mb-4\">{article.excerpt}</p>\n              <button className=\"text-[#26732d] font-medium mt-2 inline-flex items-center hover:text-[#1e5d26] transition-colors\">\n                Read More <ArrowRight size={16} className=\"ml-1\" />\n              </button>\n            </article>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3111},"client/src/components/sections/categories-grid.tsx":{"content":"import { useState } from 'react';\nimport { Cat, Dog, Heart, Gift, ShoppingBag, Menu, X } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport { Link } from 'wouter';\n\nexport default function CategoriesGrid() {\n  const [isCollapsed, setIsCollapsed] = useState(false);\n\n  const categories = [\n    {\n      id: 'cat-food',\n      name: 'Cat Food & Treats',\n      icon: Cat,\n      image: 'https://images.unsplash.com/photo-1574158622682-e40e69881006?w=500&q=80',\n      count: '120+ Products',\n      color: 'bg-purple-100 text-purple-600'\n    },\n    {\n      id: 'dog-food',\n      name: 'Dog Food & Treats',\n      icon: Dog,\n      image: 'https://images.unsplash.com/photo-1588943211346-0908a1fb0b01?w=500&q=80',\n      count: '150+ Products',\n      color: 'bg-blue-100 text-blue-600'\n    },\n    {\n      id: 'toys-treats',\n      name: 'Pet Toys & Treats',\n      icon: Gift,\n      image: 'https://images.unsplash.com/photo-1601758228041-f3b2795255f1?w=500&q=80',\n      count: '80+ Products',\n      color: 'bg-green-100 text-green-600'\n    },\n    {\n      id: 'health-care',\n      name: 'Pet Care & Health',\n      icon: Heart,\n      image: 'https://images.unsplash.com/photo-1589941013453-ec89f33b5e95?w=500&q=80',\n      count: '60+ Products',\n      color: 'bg-red-100 text-red-600'\n    },\n    {\n      id: 'grooming',\n      name: 'Grooming',\n      icon: ShoppingBag,\n      image: 'https://images.unsplash.com/photo-1628009368231-7bb7cfcb0def?w=500&q=80',\n      count: '45+ Products',\n      color: 'bg-yellow-100 text-yellow-600'\n    },\n    {\n      id: 'accessories',\n      name: 'Accessories',\n      icon: Heart,\n      image: 'https://images.unsplash.com/photo-1615789591457-74a63395c990?w=500&q=80',\n      count: '90+ Products',\n      color: 'bg-pink-100 text-pink-600'\n    }\n  ];\n\n  return (\n    <section className=\"section-spacing bg-white relative\">\n      <div className=\"responsive-container\">\n        {/* Toggle Button - Top Left */}\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          className=\"absolute top-4 left-4 z-10 bg-white shadow-lg\"\n          onClick={() => setIsCollapsed(!isCollapsed)}\n        >\n          {isCollapsed ? <Menu size={20} /> : <X size={20} />}\n        </Button>\n\n        {/* Header */}\n        <div className={cn(\n          'transition-all duration-300 overflow-hidden',\n          isCollapsed ? 'max-h-0 opacity-0 mb-0' : 'max-h-96 opacity-100 mb-8'\n        )}>\n          <h2 className=\"text-2xl sm:text-3xl font-bold text-center text-[#26732d] flex flex-col sm:flex-row items-center justify-center gap-3 animate-fade-in pt-12\">\n            <ShoppingBag size={32} className=\"text-[#26732d]\" />\n            Shop by Category\n          </h2>\n        </div>\n\n        {/* Categories Grid */}\n        <div className={cn(\n          'transition-all duration-500 overflow-hidden',\n          isCollapsed ? 'max-h-0 opacity-0' : 'max-h-[1000px] opacity-100'\n        )}>\n          <div className=\"responsive-grid\">\n            {categories.map((category, index) => {\n              const IconComponent = category.icon;\n              return (\n                <Link \n                  key={category.id} \n                  href={`/products?category=${category.id}`}\n                  className=\"group cursor-pointer hover-lift animate-fade-in block\"\n                  style={{ animationDelay: `${index * 0.1}s` } as React.CSSProperties}\n                >\n                  <div className=\"relative overflow-hidden rounded-xl shadow-md\">\n                    <img \n                      src={category.image} \n                      alt={category.name}\n                      className=\"w-full h-48 object-cover transition-transform duration-300 group-hover:scale-110\"\n                      loading=\"lazy\"\n                      decoding=\"async\"\n                    />\n                    <div className=\"absolute inset-0 bg-black bg-opacity-40 group-hover:bg-opacity-50 transition-all duration-300\"></div>\n                    <div className=\"absolute inset-0 flex flex-col items-center justify-center text-white p-4\">\n                      <div className={`p-3 rounded-full ${category.color} mb-3 animate-scale-up group-hover:scale-110 transition-transform duration-300`}>\n                        <IconComponent size={24} />\n                      </div>\n                      <h3 className=\"text-base sm:text-lg font-bold text-center mb-2\">{category.name}</h3>\n                      <p className=\"text-xs sm:text-sm text-gray-200\">{category.count}</p>\n                    </div>\n                  </div>\n                </Link>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Horizontal Product Access */}\n        {!isCollapsed && (\n          <div className=\"mt-8 text-center animate-fade-in\">\n            <p className=\"text-gray-600 mb-4\">Browse products horizontally by category</p>\n            <div className=\"flex flex-wrap justify-center gap-2\">\n              {categories.map((category) => (\n                <Link \n                  key={category.id}\n                  href={`/products?category=${category.id}`}\n                  className=\"px-4 py-2 bg-[#26732d] text-white rounded-full hover:bg-[#1e5d26] transition-colors text-sm\"\n                >\n                  {category.name}\n                </Link>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n    </section>\n  );\n}","size_bytes":5424},"client/src/components/sections/featured-brands.tsx":{"content":"export default function FeaturedBrands() {\n  const brands = [\n    'ROYAL CANIN',\n    'HILLS',\n    'PEDIGREE', \n    'WHISKAS',\n    'PURINA',\n    'IAMS'\n  ];\n\n  return (\n    <section className=\"py-8 bg-gray-50\">\n      <div className=\"container mx-auto px-4\">\n        <h3 className=\"text-2xl font-bold text-center text-meow-green mb-6\">Featured Brands</h3>\n        <div className=\"flex items-center justify-center space-x-8 overflow-x-auto\">\n          {brands.map((brand, index) => (\n            <div key={index} className=\"flex flex-col items-center min-w-32 cursor-pointer hover:opacity-80 transition-opacity\">\n              <div className=\"w-24 h-16 bg-gray-200 rounded-lg flex items-center justify-center mb-2\">\n                <span className=\"text-gray-600 font-bold text-xs text-center\">{brand}</span>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":910},"client/src/components/sections/featured-categories.tsx":{"content":"export default function FeaturedCategories() {\n  const categories = [\n    {\n      name: 'Cat Food',\n      image: 'https://images.unsplash.com/photo-1589924691995-400dc9ecc119?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300'\n    },\n    {\n      name: 'Dog Food', \n      image: 'https://images.unsplash.com/photo-1583337130417-3346a1be7dee?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300'\n    },\n    {\n      name: 'Toys',\n      image: 'https://images.unsplash.com/photo-1601758228041-f3b2795255f1?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300'\n    },\n    {\n      name: 'Grooming',\n      image: 'https://images.unsplash.com/photo-1628009368231-7bb7cfcb0def?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300'\n    },\n    {\n      name: 'Accessories',\n      image: 'https://images.unsplash.com/photo-1615789591457-74a63395c990?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300'\n    },\n    {\n      name: 'Health Care',\n      image: 'https://images.unsplash.com/photo-1628009368231-7bb7cfcb0def?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300'\n    }\n  ];\n\n  return (\n    <section className=\"section-spacing bg-gray-50\">\n      <div className=\"responsive-container\">\n        <h3 className=\"text-2xl sm:text-3xl font-bold text-center text-[#26732d] mb-8 animate-fade-in\">Shop by Category</h3>\n        <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-4 md:gap-6\">\n          {categories.map((category, index) => (\n            <div \n              key={index} \n              className=\"bg-white rounded-lg shadow-md hover-lift p-4 sm:p-6 text-center group cursor-pointer animate-fade-in\"\n              style={{ animationDelay: `${index * 0.1}s` }}\n            >\n              <img \n                src={category.image} \n                alt={category.name} \n                className=\"w-12 h-12 sm:w-16 sm:h-16 mx-auto mb-3 rounded-lg object-cover group-hover:scale-110 transition-transform duration-300\" \n                loading=\"lazy\"\n                decoding=\"async\"\n              />\n              <h4 className=\"font-semibold text-[#26732d] text-sm sm:text-base\">{category.name}</h4>\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2184},"client/src/components/sections/flash-sale.tsx":{"content":"import { Flame } from 'lucide-react';\nimport ProductCard from '@/components/ui/product-card';\n\nexport default function FlashSale() {\n  const flashSaleProducts = [\n    {\n      id: 1,\n      name: 'Premium Wet Cat Food (12 pack)',\n      image: 'https://images.unsplash.com/photo-1574158622682-e40e69881006?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      price: 1200,\n      originalPrice: 2400,\n      discount: 50,\n      badge: '50% OFF',\n      badgeColor: 'red'\n    },\n    {\n      id: 2,\n      name: 'Interactive Dog Chew Toys',\n      image: 'https://images.unsplash.com/photo-1601758228041-f3b2795255f1?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      price: 800,\n      originalPrice: 1333,\n      discount: 40,\n      badge: '40% OFF',\n      badgeColor: 'red'\n    },\n    {\n      id: 3,\n      name: 'Professional Grooming Kit',\n      image: 'https://images.unsplash.com/photo-1589941013453-ec89f33b5e95?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      price: 1950,\n      originalPrice: 3000,\n      discount: 35,\n      badge: '35% OFF',\n      badgeColor: 'red'\n    },\n    {\n      id: 4,\n      name: 'Premium Training Treats',\n      image: 'https://images.unsplash.com/photo-1583337130417-3346a1be7dee?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      price: 600,\n      originalPrice: 1091,\n      discount: 45,\n      badge: '45% OFF',\n      badgeColor: 'red'\n    }\n  ];\n\n  return (\n    <section className=\"section-spacing bg-red-50\">\n      <div className=\"responsive-container\">\n        <div className=\"text-center mb-8\">\n          <div className=\"flex flex-col sm:flex-row items-center gap-2 sm:gap-4 bg-red-100 px-4 sm:px-6 py-3 rounded-lg mb-6 w-fit mx-auto border-2 border-red-200 animate-scale-up\">\n            <Flame className=\"text-red-600\" size={24} />\n            <span className=\"text-red-600 font-bold text-lg\">Flash Sale</span>\n            <span className=\"text-sm text-red-600 font-medium\">Limited Time Offers</span>\n          </div>\n        </div>\n\n        <div className=\"responsive-grid\">\n          {flashSaleProducts.map((product, index) => (\n            <div \n              key={product.id} \n              className=\"hover-lift animate-fade-in\"\n              style={{ animationDelay: `${index * 0.1}s` }}\n            >\n              <ProductCard product={product} />\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":2389},"client/src/components/sections/hero-banner.tsx":{"content":"\nimport { Button } from '@/components/ui/button';\nimport { ShoppingBag } from 'lucide-react';\n\nexport default function HeroBanner() {\n  return (\n    <section className=\"relative overflow-hidden bg-white\">\n      {/* Responsive Banner Image */}\n      <div className=\"relative w-full\">\n        <div className=\"relative w-full h-[300px] md:h-[400px] lg:h-[500px]\">\n          <img\n            src=\"/Banner_Meow.png\"\n            alt=\"Meow Meow Pet Shop - Special Offer - Everything for Your Pet - Up to 70% Off\"\n            className=\"w-full h-full object-cover\"\n            loading=\"eager\"\n            onError={(e) => {\n              // Show fallback content if image fails to load\n              const target = e.currentTarget;\n              target.style.display = 'none';\n              const fallback = target.nextElementSibling as HTMLElement;\n              if (fallback) fallback.style.display = 'flex';\n            }}\n          />\n          \n          {/* Fallback content - hidden by default */}\n          <div className=\"w-full h-full bg-gradient-to-r from-yellow-400 via-orange-400 to-red-400 items-center justify-center hidden\">\n            <div className=\"text-center text-white p-8\">\n              <h1 className=\"text-4xl md:text-6xl font-bold mb-4 drop-shadow-lg\">\n                Special Offer!\n              </h1>\n              <p className=\"text-xl md:text-2xl mb-4 drop-shadow\">\n                Everything for Your Pet\n              </p>\n              <p className=\"text-lg md:text-xl font-bold drop-shadow\">\n                Up to 70% Off\n              </p>\n              <Button \n                variant=\"default\" \n                size=\"lg\"\n                className=\"mt-6 bg-white text-orange-600 hover:bg-gray-100 font-bold px-8 py-3\"\n              >\n                <ShoppingBag size={20} className=\"mr-2\" />\n                Shop Now\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Additional promotional content below banner */}\n      <div className=\"bg-gradient-to-r from-yellow-50 to-orange-50 py-6 px-4 text-center\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"hidden md:block mb-4\">\n            <h2 className=\"text-2xl lg:text-3xl font-bold text-gray-800 mb-2\">\n              Premium Pet Food & Accessories in Savar\n            </h2>\n          </div>\n          <div className=\"flex flex-col sm:flex-row items-center justify-center gap-4\">\n            <div className=\"bg-green-600 text-white px-4 py-2 rounded-lg font-semibold\">\n              5% OFF your first order!\n            </div>\n            <Button \n              variant=\"default\" \n              size=\"lg\"\n              className=\"bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-lg font-semibold flex items-center gap-2\"\n            >\n              <ShoppingBag size={20} />\n              Start Shopping\n            </Button>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2960},"client/src/components/sections/membership-banner.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { Percent, Truck, Star } from 'lucide-react';\nconst logoPath = '/logo.png';\n\nexport default function MembershipBanner() {\n  return (\n    <section className=\"section-spacing bg-gradient-to-r from-purple-600 to-purple-800\">\n      <div className=\"responsive-container\">\n        <div className=\"bg-white rounded-2xl p-6 sm:p-8 text-center max-w-4xl mx-auto shadow-2xl animate-scale-up\">\n          <div className=\"flex flex-col sm:flex-row items-center justify-center mb-6\">\n            <img src={logoPath} alt=\"Privilege Meow Club\" className=\"h-12 w-12 sm:h-16 sm:w-16 sm:mr-4 mb-3 sm:mb-0\" />\n            <div>\n              <h3 className=\"text-2xl sm:text-3xl font-bold text-[#26732d]\">Privilege Meow Club</h3>\n              <p className=\"text-gray-600\">Exclusive Membership Program</p>\n            </div>\n          </div>\n          \n          <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-6 mb-8\">\n            <div className=\"text-center animate-fade-in\">\n              <div className=\"bg-[#ffde59] w-14 h-14 sm:w-16 sm:h-16 rounded-full flex items-center justify-center mx-auto mb-3 hover:scale-110 transition-transform duration-300\">\n                <Percent size={24} className=\"text-[#26732d]\" />\n              </div>\n              <h4 className=\"font-bold text-[#26732d]\">15% Discount</h4>\n              <p className=\"text-sm text-gray-600\">On all purchases</p>\n            </div>\n            <div className=\"text-center animate-fade-in\" style={{ animationDelay: '0.1s' }}>\n              <div className=\"bg-[#ffde59] w-14 h-14 sm:w-16 sm:h-16 rounded-full flex items-center justify-center mx-auto mb-3 hover:scale-110 transition-transform duration-300\">\n                <Truck size={24} className=\"text-[#26732d]\" />\n              </div>\n              <h4 className=\"font-bold text-[#26732d]\">Free Delivery</h4>\n              <p className=\"text-sm text-gray-600\">On orders above ৳1000</p>\n            </div>\n            <div className=\"text-center animate-fade-in\" style={{ animationDelay: '0.2s' }}>\n              <div className=\"bg-[#ffde59] w-14 h-14 sm:w-16 sm:h-16 rounded-full flex items-center justify-center mx-auto mb-3 hover:scale-110 transition-transform duration-300\">\n                <Star size={24} className=\"text-[#26732d]\" />\n              </div>\n              <h4 className=\"font-bold text-[#26732d]\">Priority Support</h4>\n              <p className=\"text-sm text-gray-600\">24/7 dedicated support</p>\n            </div>\n          </div>\n          \n          <div className=\"bg-[#26732d] text-white p-6 rounded-xl mb-6 animate-scale-up\">\n            <div className=\"text-3xl sm:text-4xl font-bold mb-2\">৳5,000</div>\n            <div className=\"text-base sm:text-lg\">Lifetime Membership</div>\n          </div>\n          \n          <Button \n            variant=\"meow\" \n            size=\"lg\" \n            className=\"px-6 sm:px-8 py-3 rounded-lg text-base sm:text-lg btn-bounce\"\n          >\n            Join Privilege Meow Club\n          </Button>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3081},"client/src/components/sections/newly-launched.tsx":{"content":"import { Sparkles } from 'lucide-react';\nimport ProductCard from '@/components/ui/product-card';\n\nexport default function NewlyLaunched() {\n  const products = [\n    {\n      id: 13,\n      name: 'Orthopedic Pet Bed',\n      image: 'https://images.unsplash.com/photo-1584464491033-06628f3a6b7b?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      price: 2800,\n      rating: 5,\n      reviews: 0,\n      badge: 'JUST IN',\n      badgeColor: 'blue',\n      stockStatus: 'In Stock',\n      isNew: true\n    },\n    {\n      id: 14,\n      name: 'Smart Auto Feeder',\n      image: 'https://images.unsplash.com/photo-1534361960057-19889db9621e?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      price: 5500,\n      rating: 4,\n      reviews: 0,\n      badge: 'JUST IN',\n      badgeColor: 'blue',\n      stockStatus: 'In Stock',\n      isNew: true\n    },\n    {\n      id: 15,\n      name: 'Eco-Friendly Toy Set',\n      image: 'https://images.unsplash.com/photo-1625316708582-7c38734be31d?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      price: 1200,\n      rating: 5,\n      reviews: 0,\n      badge: 'JUST IN',\n      badgeColor: 'blue',\n      stockStatus: 'In Stock',\n      isNew: true\n    },\n    {\n      id: 16,\n      name: 'Premium Travel Carrier',\n      image: 'https://images.unsplash.com/photo-1615789591457-74a63395c990?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      price: 3800,\n      rating: 4,\n      reviews: 0,\n      badge: 'JUST IN',\n      badgeColor: 'blue',\n      stockStatus: 'In Stock',\n      isNew: true\n    }\n  ];\n\n  return (\n    <section className=\"py-12 bg-[#f0f8ff]\">\n      <div className=\"container mx-auto px-4\">\n        <h2 className=\"text-3xl font-bold text-center text-[#26732d] mb-8 flex items-center justify-center gap-3\">\n          <Sparkles size={32} className=\"text-[#26732d]\" />\n          Newly Launched\n        </h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {products.map(product => (\n            <div key={product.id} className=\"transform hover:scale-105 hover:shadow-lg transition-all duration-300 ease-in-out relative\">\n              <div className=\"absolute top-2 left-2 bg-blue-600 text-white px-2 py-1 rounded text-xs font-medium flex items-center gap-1 z-10\">\n                <Sparkles size={12} />\n                JUST IN\n              </div>\n              <ProductCard product={product} />\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2457},"client/src/components/sections/repack-food.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Heart, Plus, Minus, Package } from 'lucide-react';\n\nexport default function RepackFood() {\n  const [quantities, setQuantities] = useState<{ [key: number]: number }>({\n    1: 1,\n    2: 1,\n    3: 1\n  });\n\n  const updateQuantity = (id: number, delta: number) => {\n    setQuantities(prev => ({\n      ...prev,\n      [id]: Math.max(1, (prev[id] || 1) + delta)\n    }));\n  };\n\n  const products = [\n    {\n      id: 1,\n      name: 'Bulk Cat Food Repack (20kg)',\n      description: 'Premium quality, repackaged for savings',\n      image: 'https://images.unsplash.com/photo-1615497001839-b0a0eac3274c?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      price: 6400,\n      originalPrice: 8000,\n      savings: 20,\n      badge: 'BULK SAVE'\n    },\n    {\n      id: 2,\n      name: 'Bulk Dog Food Repack (25kg)',\n      description: 'Economical choice for multiple dogs',\n      image: 'https://images.unsplash.com/photo-1623387641168-d9803ddd3f35?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      price: 7200,\n      originalPrice: 9600,\n      savings: 25,\n      badge: 'COMBO DEAL'\n    },\n    {\n      id: 3,\n      name: 'Mixed Pet Treats (5kg)',\n      description: 'Assorted treats for cats and dogs',\n      image: 'https://images.unsplash.com/photo-1583337130417-3346a1be7dee?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300',\n      price: 2800,\n      originalPrice: 3500,\n      savings: 20,\n      badge: 'BULK SAVE'\n    }\n  ];\n\n  return (\n    <section className=\"py-12\">\n      <div className=\"container mx-auto px-4\">\n        <h2 className=\"text-3xl font-bold text-center text-[#26732d] mb-8 flex items-center justify-center gap-3\">\n          <Package size={32} className=\"text-[#26732d]\" />\n          Repack Food - Bulk Save!\n        </h2>\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n          {products.map(product => (\n            <div key={product.id} className=\"bg-white rounded-lg shadow-md hover:shadow-lg transition-all duration-300 transform hover:scale-105 relative min-h-[400px] flex flex-col\">\n              <div className=\"absolute top-2 left-2 bg-yellow-400 text-[#26732d] px-2 py-1 rounded-full text-xs font-bold flex items-center gap-1 z-10\">\n                <Package size={14} />\n                {product.badge}\n              </div>\n              <div className=\"absolute top-2 right-2 z-10\">\n                <button className=\"bg-white bg-opacity-80 p-1.5 rounded-full text-gray-400 hover:text-red-500 transition-colors shadow-sm\">\n                  <Heart size={18} />\n                </button>\n              </div>\n\n              <div className=\"flex flex-col h-full\">\n                <div className=\"relative\">\n                  <img \n                    src={product.image} \n                    alt={product.name} \n                    className=\"w-full h-48 object-cover rounded-t-lg\" \n                  />\n                </div>\n                <div className=\"p-4 flex-1 flex flex-col\">\n                  <h4 className=\"font-semibold mb-2 text-base text-[#26732d]\">{product.name}</h4>\n                  <p className=\"text-sm text-gray-600 mb-3 flex-1\">{product.description}</p>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex flex-col\">\n                        <span className=\"text-lg font-bold text-[#26732d]\">৳{product.price.toLocaleString()}</span>\n                        <span className=\"text-sm text-gray-500 line-through\">৳{product.originalPrice.toLocaleString()}</span>\n                      </div>\n                      <span className=\"bg-yellow-400 text-[#26732d] font-bold text-xs px-2 py-1 rounded-full whitespace-nowrap\">\n                        Save {product.savings}%\n                      </span>\n                    </div>\n                    <div className=\"flex items-center justify-between gap-2\">\n                      <div className=\"flex items-center space-x-1\">\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          className=\"h-8 w-8 p-0\"\n                          onClick={() => updateQuantity(product.id, -1)}\n                        >\n                          <Minus size={14} />\n                        </Button>\n                        <span className=\"font-medium px-2 min-w-[2rem] text-center\">{quantities[product.id]}</span>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          className=\"h-8 w-8 p-0\"\n                          onClick={() => updateQuantity(product.id, 1)}\n                        >\n                          <Plus size={14} />\n                        </Button>\n                      </div>\n                      <Button className=\"bg-[#26732d] text-white px-3 py-1.5 rounded-lg hover:bg-[#1e5d26] transition-colors text-sm flex-1 max-w-[120px]\">\n                        Add to Cart\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":5278},"client/src/components/sections/testimonials.tsx":{"content":"import { Star, MessageCircle } from 'lucide-react';\n\nexport default function Testimonials() {\n  const testimonials = [\n    {\n      id: 1,\n      name: 'Sarah Rahman',\n      role: 'Cat Parent, Savar',\n      image: 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?ixlib=rb-4.0.3&auto=format&fit=crop&w=150&h=150',\n      text: 'Meow Meow Pet Shop has the best quality pet food in Savar! My cat Luna loves their premium kibble and the delivery is always on time. Highly recommended!',\n      rating: 5\n    },\n    {\n      id: 2,\n      name: 'Ahmed Hassan',\n      role: 'Dog Parent, Savar',\n      image: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=150&h=150',\n      text: 'Amazing service and products! I\\'ve been buying dog food and toys from here for 2 years. The staff is knowledgeable and always helps me choose the right products for Max.',\n      rating: 5\n    },\n    {\n      id: 3,\n      name: 'Maria Sultana',\n      role: 'Professional Groomer, Dhaka',\n      image: 'https://images.unsplash.com/photo-1494790108755-2616b612b786?ixlib=rb-4.0.3&auto=format&fit=crop&w=150&h=150',\n      text: 'As a professional pet groomer, I only recommend the best. Meow Meow Pet Shop has excellent grooming supplies and their bulk pricing helps my business. Great quality!',\n      rating: 5\n    }\n  ];\n\n  const renderStars = (rating: number) => {\n    return Array.from({ length: 5 }, (_, index) => (\n      <Star \n        key={index} \n        size={16} \n        className={index < rating ? 'text-yellow-500 fill-current' : 'text-gray-300'} \n      />\n    ));\n  };\n\n  return (\n    <section className=\"section-spacing bg-gray-50\">\n      <div className=\"responsive-container\">\n        <h2 className=\"text-2xl sm:text-3xl font-bold text-center text-[#26732d] mb-8 flex flex-col sm:flex-row items-center justify-center gap-3 animate-fade-in\">\n          <MessageCircle size={32} className=\"text-[#26732d]\" />\n          What Our Customers Say\n        </h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          {testimonials.map((testimonial, index) => (\n            <div \n              key={testimonial.id} \n              className=\"flex flex-col items-center text-center bg-white rounded-xl p-6 hover-lift animate-fade-in\"\n              style={{ animationDelay: `${index * 0.1}s` }}\n            >\n              <img \n                src={testimonial.image} \n                alt={testimonial.name} \n                className=\"w-16 h-16 rounded-full mb-4 object-cover border-4 border-[#ffde59] hover:scale-110 transition-transform duration-300\" \n                loading=\"lazy\"\n                decoding=\"async\"\n              />\n              <div className=\"flex justify-center mb-3\">\n                {renderStars(testimonial.rating)}\n              </div>\n              <p className=\"text-gray-700 mb-4 italic text-sm leading-relaxed\">\"{testimonial.text}\"</p>\n              <div className=\"font-bold text-[#26732d] text-lg\">{testimonial.name}</div>\n              <div className=\"text-sm text-gray-500\">{testimonial.role}</div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":3171},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }","size_bytes":1418},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }","size_bytes":1127},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-all duration-200 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 hover:shadow-md active:scale-95\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90 hover:shadow-lg\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90 hover:shadow-lg\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground hover:shadow-md\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80 hover:shadow-md\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline hover:no-underline\",\n        meow: \"bg-[#ffde59] text-[#26732d] hover:bg-[#ffd73e] hover:shadow-lg font-medium\",\n        meowGreen: \"bg-[#26732d] text-white hover:bg-[#1e5d26] hover:shadow-lg font-medium\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2211},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/countdown-timer.tsx":{"content":"import { useState, useEffect } from 'react';\n\ninterface CountdownTimerProps {\n  initialHours: number;\n  initialMinutes: number;\n  initialSeconds: number;\n}\n\nexport default function CountdownTimer({ \n  initialHours, \n  initialMinutes, \n  initialSeconds \n}: CountdownTimerProps) {\n  const [time, setTime] = useState({\n    hours: initialHours,\n    minutes: initialMinutes,\n    seconds: initialSeconds\n  });\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setTime(prevTime => {\n        let { hours, minutes, seconds } = prevTime;\n        \n        seconds--;\n        if (seconds < 0) {\n          seconds = 59;\n          minutes--;\n          if (minutes < 0) {\n            minutes = 59;\n            hours--;\n            if (hours < 0) {\n              hours = 23;\n            }\n          }\n        }\n        \n        return { hours, minutes, seconds };\n      });\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, []);\n\n  const formatTime = (value: number) => value.toString().padStart(2, '0');\n\n  return (\n    <div className=\"flex items-center space-x-2\">\n      <div className=\"bg-white bg-opacity-20 rounded-lg px-2 py-1 text-center\">\n        <div className=\"text-lg font-bold\">{formatTime(time.hours)}</div>\n        <div className=\"text-xs uppercase\">Hr</div>\n      </div>\n      <div className=\"text-white font-bold\">:</div>\n      <div className=\"bg-white bg-opacity-20 rounded-lg px-2 py-1 text-center\">\n        <div className=\"text-lg font-bold\">{formatTime(time.minutes)}</div>\n        <div className=\"text-xs uppercase\">Min</div>\n      </div>\n      <div className=\"text-white font-bold\">:</div>\n      <div className=\"bg-white bg-opacity-20 rounded-lg px-2 py-1 text-center\">\n        <div className=\"text-lg font-bold\">{formatTime(time.seconds)}</div>\n        <div className=\"text-xs uppercase\">Sec</div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1860},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/product-card.tsx":{"content":"import { Heart, ShoppingCart, Star } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\n\ninterface Product {\n  id: number;\n  name: string;\n  image: string;\n  price: number;\n  originalPrice?: number;\n  discount?: number;\n  rating?: number;\n  reviews?: number;\n  badge?: string;\n  badgeColor?: string;\n  stockStatus?: string;\n  isNew?: boolean;\n}\n\ninterface ProductCardProps {\n  product: Product;\n}\n\nexport default function ProductCard({ product }: ProductCardProps) {\n  const getBadgeStyles = (color?: string) => {\n    switch (color) {\n      case 'red':\n        return 'bg-red-600 text-white';\n      case 'blue':\n        return 'bg-blue-500 text-white';\n      case 'yellow':\n        return 'meow-yellow text-black';\n      case 'green':\n        return 'bg-green-600 text-white';\n      case 'purple':\n        return 'bg-purple-600 text-white';\n      default:\n        return 'bg-gray-600 text-white';\n    }\n  };\n\n  const getStockStatusStyles = (status?: string) => {\n    switch (status) {\n      case 'In Stock':\n        return 'text-green-600';\n      case 'Low Stock':\n        return 'text-orange-600';\n      case 'Out of Stock':\n        return 'text-red-600';\n      default:\n        return 'text-gray-600';\n    }\n  };\n\n  const renderStars = (rating?: number) => {\n    if (!rating) return <span className=\"text-gray-600 text-sm\">(New)</span>;\n    \n    return (\n      <div className=\"flex items-center\">\n        {Array.from({ length: 5 }, (_, index) => (\n          <Star \n            key={index} \n            size={14} \n            className={index < rating ? 'text-yellow-500 fill-current' : 'text-gray-300'} \n          />\n        ))}\n        {product.reviews !== undefined && (\n          <span className=\"text-gray-600 text-sm ml-1\">({product.reviews} reviews)</span>\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"bg-white rounded-xl shadow-md hover-lift relative overflow-hidden group animate-fade-in\">\n      {product.badge && (\n        <div className={`absolute top-3 left-3 px-3 py-1 rounded-full text-sm font-bold ${getBadgeStyles(product.badgeColor)} z-10 animate-scale-up`}>\n          {product.badge}\n        </div>\n      )}\n      \n      <div className=\"absolute top-3 right-3 z-10\">\n        <button className=\"bg-white bg-opacity-80 p-2 rounded-full text-gray-400 hover:text-red-500 transition-all duration-200 shadow-sm hover:shadow-md hover:bg-white hover:bg-opacity-100 active:scale-95\">\n          <Heart size={18} />\n        </button>\n      </div>\n      \n      <div className=\"relative overflow-hidden\">\n        <img \n          src={product.image} \n          alt={product.name} \n          className=\"w-full h-48 object-cover transition-transform duration-300 group-hover:scale-105\" \n          loading=\"lazy\"\n          decoding=\"async\"\n        />\n        <div className=\"absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-10 transition-all duration-300\"></div>\n      </div>\n      \n      <div className=\"p-4\">\n        <h4 className=\"font-semibold mb-2 text-[#26732d] group-hover:text-[#1e5d26] transition-colors\">{product.name}</h4>\n        \n        <div className=\"mb-3\">\n          {renderStars(product.rating)}\n        </div>\n        \n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex flex-col\">\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-lg font-bold text-[#26732d]\">\n                ৳{product.price.toLocaleString()}\n              </span>\n              {product.originalPrice && (\n                <span className=\"text-sm text-gray-500 line-through\">\n                  ৳{product.originalPrice.toLocaleString()}\n                </span>\n              )}\n            </div>\n            {product.stockStatus && (\n              <div className={`text-xs font-medium ${getStockStatusStyles(product.stockStatus)} mt-1`}>\n                {product.stockStatus}\n              </div>\n            )}\n          </div>\n          \n          <Button \n            variant=\"meow\"\n            size=\"sm\"\n            className=\"px-3 py-2 rounded-lg shadow-sm btn-bounce\"\n          >\n            <ShoppingCart size={16} />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4220},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }","size_bytes":1641},"client/src/components/ui/select.tsx":{"content":"import * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName = SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}","size_bytes":5612},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }","size_bytes":1882},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/admin-setup.ts":{"content":"import bcrypt from \"bcrypt\";\nimport { db } from \"./db\";\nimport { users } from \"@shared/schema\";\nimport { eq } from \"drizzle-orm\";\n\nexport async function createAdminAccount() {\n  try {\n    // Check if admin account already exists by email\n    const existingAdmin = await db\n      .select()\n      .from(users)\n      .where(eq(users.email, \"admin@gmail.com\"))\n      .limit(1);\n\n    if (existingAdmin.length > 0) {\n      console.log(\"Admin account already exists\");\n      return;\n    }\n\n    // Hash the admin password\n    const hashedPassword = await bcrypt.hash(\"meowmeow123\", 10);\n\n    // Create the admin account with email\n    const [adminUser] = await db\n      .insert(users)\n      .values({\n        username: \"admin\",\n        password: hashedPassword,\n        email: \"admin@gmail.com\",\n        firstName: \"System\",\n        lastName: \"Administrator\",\n        role: \"admin\",\n        isActive: true,\n      })\n      .returning();\n\n    console.log(\"Admin account created successfully:\", adminUser.email);\n  } catch (error) {\n    console.error(\"Error creating admin account:\", error);\n  }\n}","size_bytes":1086},"client/src/contexts/cart-context.tsx":{"content":"import { createContext, useContext, useReducer, useEffect } from 'react';\n\nexport interface CartItem {\n  id: string;\n  name: string;\n  price: number;\n  image: string;\n  quantity: number;\n  maxStock: number;\n}\n\ninterface CartState {\n  items: CartItem[];\n  total: number;\n  itemCount: number;\n}\n\ntype CartAction =\n  | { type: 'ADD_ITEM'; payload: Omit<CartItem, 'quantity'> }\n  | { type: 'REMOVE_ITEM'; payload: string }\n  | { type: 'UPDATE_QUANTITY'; payload: { id: string; quantity: number } }\n  | { type: 'CLEAR_CART' }\n  | { type: 'LOAD_CART'; payload: CartItem[] };\n\ninterface CartContextType {\n  state: CartState;\n  addItem: (item: Omit<CartItem, 'quantity'>) => void;\n  removeItem: (id: string) => void;\n  updateQuantity: (id: string, quantity: number) => void;\n  clearCart: () => void;\n  getItemQuantity: (id: string) => number;\n}\n\nconst CartContext = createContext<CartContextType | undefined>(undefined);\n\nconst CART_STORAGE_KEY = 'meow-meow-cart';\n\nfunction cartReducer(state: CartState, action: CartAction): CartState {\n  switch (action.type) {\n    case 'ADD_ITEM': {\n      const existingItem = state.items.find(item => item.id === action.payload.id);\n      \n      if (existingItem) {\n        // If item exists, increase quantity (up to max stock)\n        const newQuantity = Math.min(existingItem.quantity + 1, existingItem.maxStock);\n        const updatedItems = state.items.map(item =>\n          item.id === action.payload.id\n            ? { ...item, quantity: newQuantity }\n            : item\n        );\n        \n        return {\n          ...state,\n          items: updatedItems,\n          total: calculateTotal(updatedItems),\n          itemCount: calculateItemCount(updatedItems),\n        };\n      } else {\n        // Add new item with quantity 1\n        const newItem: CartItem = { ...action.payload, quantity: 1 };\n        const updatedItems = [...state.items, newItem];\n        \n        return {\n          ...state,\n          items: updatedItems,\n          total: calculateTotal(updatedItems),\n          itemCount: calculateItemCount(updatedItems),\n        };\n      }\n    }\n    \n    case 'REMOVE_ITEM': {\n      const updatedItems = state.items.filter(item => item.id !== action.payload);\n      return {\n        ...state,\n        items: updatedItems,\n        total: calculateTotal(updatedItems),\n        itemCount: calculateItemCount(updatedItems),\n      };\n    }\n    \n    case 'UPDATE_QUANTITY': {\n      const { id, quantity } = action.payload;\n      \n      if (quantity <= 0) {\n        // Remove item if quantity is 0 or less\n        const updatedItems = state.items.filter(item => item.id !== id);\n        return {\n          ...state,\n          items: updatedItems,\n          total: calculateTotal(updatedItems),\n          itemCount: calculateItemCount(updatedItems),\n        };\n      }\n      \n      const updatedItems = state.items.map(item =>\n        item.id === id\n          ? { ...item, quantity: Math.min(quantity, item.maxStock) }\n          : item\n      );\n      \n      return {\n        ...state,\n        items: updatedItems,\n        total: calculateTotal(updatedItems),\n        itemCount: calculateItemCount(updatedItems),\n      };\n    }\n    \n    case 'CLEAR_CART':\n      return {\n        items: [],\n        total: 0,\n        itemCount: 0,\n      };\n    \n    case 'LOAD_CART': {\n      const items = action.payload;\n      return {\n        items,\n        total: calculateTotal(items),\n        itemCount: calculateItemCount(items),\n      };\n    }\n    \n    default:\n      return state;\n  }\n}\n\nfunction calculateTotal(items: CartItem[]): number {\n  return items.reduce((total, item) => total + (item.price * item.quantity), 0);\n}\n\nfunction calculateItemCount(items: CartItem[]): number {\n  return items.reduce((count, item) => count + item.quantity, 0);\n}\n\nexport function CartProvider({ children }: { children: React.ReactNode }) {\n  const [state, dispatch] = useReducer(cartReducer, {\n    items: [],\n    total: 0,\n    itemCount: 0,\n  });\n\n  // Load cart from localStorage on mount\n  useEffect(() => {\n    try {\n      const savedCart = localStorage.getItem(CART_STORAGE_KEY);\n      if (savedCart) {\n        const parsedCart = JSON.parse(savedCart);\n        dispatch({ type: 'LOAD_CART', payload: parsedCart });\n      }\n    } catch (error) {\n      console.error('Failed to load cart from localStorage:', error);\n    }\n  }, []);\n\n  // Save cart to localStorage whenever cart changes\n  useEffect(() => {\n    try {\n      localStorage.setItem(CART_STORAGE_KEY, JSON.stringify(state.items));\n    } catch (error) {\n      console.error('Failed to save cart to localStorage:', error);\n    }\n  }, [state.items]);\n\n  const addItem = (item: Omit<CartItem, 'quantity'>) => {\n    dispatch({ type: 'ADD_ITEM', payload: item });\n  };\n\n  const removeItem = (id: string) => {\n    dispatch({ type: 'REMOVE_ITEM', payload: id });\n  };\n\n  const updateQuantity = (id: string, quantity: number) => {\n    dispatch({ type: 'UPDATE_QUANTITY', payload: { id, quantity } });\n  };\n\n  const clearCart = () => {\n    dispatch({ type: 'CLEAR_CART' });\n  };\n\n  const getItemQuantity = (id: string): number => {\n    const item = state.items.find(item => item.id === id);\n    return item ? item.quantity : 0;\n  };\n\n  const value: CartContextType = {\n    state,\n    addItem,\n    removeItem,\n    updateQuantity,\n    clearCart,\n    getItemQuantity,\n  };\n\n  return (\n    <CartContext.Provider value={value}>\n      {children}\n    </CartContext.Provider>\n  );\n}\n\nexport function useCart() {\n  const context = useContext(CartContext);\n  if (context === undefined) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n}","size_bytes":5636},"client/src/pages/cart.tsx":{"content":"import { useState } from 'react';\nimport { Link } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { Minus, Plus, Trash2, ShoppingBag, ArrowLeft } from 'lucide-react';\nimport { useCart } from '@/contexts/cart-context';\nimport Header from '@/components/layout/header';\nimport Footer from '@/components/footer';\n\nexport default function CartPage() {\n  const { state, updateQuantity, removeItem, clearCart } = useCart();\n  const [isClearing, setIsClearing] = useState(false);\n\n  const handleQuantityChange = (id: string, newQuantity: number) => {\n    if (newQuantity > 0) {\n      updateQuantity(id, newQuantity);\n    }\n  };\n\n  const handleClearCart = () => {\n    setIsClearing(true);\n    clearCart();\n    setTimeout(() => setIsClearing(false), 500);\n  };\n\n  const formatPrice = (price: number) => {\n    return `৳${price.toLocaleString()}`;\n  };\n\n  if (state.items.length === 0) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Header />\n        \n        <div className=\"pt-24 pb-8\">\n          <div className=\"max-w-4xl mx-auto px-4\">\n            <div className=\"text-center py-16\">\n              <ShoppingBag className=\"h-24 w-24 text-gray-300 mx-auto mb-6\" />\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-4\">Your Cart is Empty</h1>\n              <p className=\"text-gray-600 mb-8\">\n                Looks like you haven't added any items to your cart yet.\n              </p>\n              <Link href=\"/products\">\n                <Button size=\"lg\">\n                  <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                  Continue Shopping\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      \n      <div className=\"pt-24 pb-8\">\n        <div className=\"max-w-4xl mx-auto px-4\">\n          <div className=\"flex items-center justify-between mb-8\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">Shopping Cart</h1>\n              <p className=\"text-gray-600 mt-2\">\n                {state.itemCount} {state.itemCount === 1 ? 'item' : 'items'} in your cart\n              </p>\n            </div>\n            \n            <Button \n              variant=\"outline\" \n              onClick={handleClearCart}\n              disabled={isClearing}\n            >\n              {isClearing ? 'Clearing...' : 'Clear Cart'}\n            </Button>\n          </div>\n\n          <div className=\"grid lg:grid-cols-3 gap-8\">\n            {/* Cart Items */}\n            <div className=\"lg:col-span-2 space-y-4\">\n              {state.items.map((item) => (\n                <Card key={item.id}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex gap-4\">\n                      <img\n                        src={item.image}\n                        alt={item.name}\n                        className=\"w-24 h-24 object-cover rounded-lg\"\n                      />\n                      \n                      <div className=\"flex-1\">\n                        <h3 className=\"font-semibold text-lg mb-2\">{item.name}</h3>\n                        <p className=\"text-green-600 font-bold text-lg mb-4\">\n                          {formatPrice(item.price)}\n                        </p>\n                        \n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center gap-2\">\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleQuantityChange(item.id, item.quantity - 1)}\n                              disabled={item.quantity <= 1}\n                            >\n                              <Minus className=\"h-4 w-4\" />\n                            </Button>\n                            \n                            <Input\n                              type=\"number\"\n                              value={item.quantity}\n                              onChange={(e) => {\n                                const newQuantity = parseInt(e.target.value) || 1;\n                                if (newQuantity <= item.maxStock) {\n                                  handleQuantityChange(item.id, newQuantity);\n                                }\n                              }}\n                              className=\"w-20 text-center\"\n                              min=\"1\"\n                              max={item.maxStock}\n                            />\n                            \n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleQuantityChange(item.id, item.quantity + 1)}\n                              disabled={item.quantity >= item.maxStock}\n                            >\n                              <Plus className=\"h-4 w-4\" />\n                            </Button>\n                            \n                            <Badge variant=\"secondary\" className=\"ml-2\">\n                              Max: {item.maxStock}\n                            </Badge>\n                          </div>\n                          \n                          <Button\n                            variant=\"destructive\"\n                            size=\"sm\"\n                            onClick={() => removeItem(item.id)}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                      \n                      <div className=\"text-right\">\n                        <p className=\"text-lg font-bold\">\n                          {formatPrice(item.price * item.quantity)}\n                        </p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n            {/* Order Summary */}\n            <div className=\"lg:col-span-1\">\n              <Card className=\"sticky top-24\">\n                <CardHeader>\n                  <CardTitle>Order Summary</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex justify-between\">\n                    <span>Subtotal ({state.itemCount} items)</span>\n                    <span>{formatPrice(state.total)}</span>\n                  </div>\n                  \n                  <div className=\"flex justify-between\">\n                    <span>Shipping</span>\n                    <span className=\"text-green-600\">Free</span>\n                  </div>\n                  \n                  <Separator />\n                  \n                  <div className=\"flex justify-between text-lg font-bold\">\n                    <span>Total</span>\n                    <span>{formatPrice(state.total)}</span>\n                  </div>\n                  \n                  <Button className=\"w-full\" size=\"lg\">\n                    Proceed to Checkout\n                  </Button>\n                  \n                  <Link href=\"/products\">\n                    <Button variant=\"outline\" className=\"w-full\">\n                      <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                      Continue Shopping\n                    </Button>\n                  </Link>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":7836},"client/src/pages/profile.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { User, Mail, Phone, MapPin, Edit, Save, X } from \"lucide-react\";\n\nexport default function ProfilePage() {\n  const { user, signOut } = useAuth();\n  const [isEditing, setIsEditing] = useState(false);\n  const [formData, setFormData] = useState({\n    firstName: user?.firstName || \"\",\n    lastName: user?.lastName || \"\",\n    email: user?.email || \"\",\n    phone: \"\",\n    address: \"\"\n  });\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleSave = () => {\n    // Here you would typically update user profile via API\n    console.log(\"Saving profile:\", formData);\n    setIsEditing(false);\n  };\n\n  const handleCancel = () => {\n    setFormData({\n      firstName: user?.firstName || \"\",\n      lastName: user?.lastName || \"\",\n      email: user?.email || \"\",\n      phone: \"\",\n      address: \"\"\n    });\n    setIsEditing(false);\n  };\n\n  if (!user) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <h1 className=\"text-2xl font-bold text-center\">\n          Please sign in to view your profile\n        </h1>\n      </div>\n    );\n  }\n\n  const initials = `${user.firstName?.[0] || ''}${user.lastName?.[0] || ''}`.toUpperCase();\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-4xl\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold mb-2\">My Profile</h1>\n        <p className=\"text-muted-foreground\">\n          Manage your account settings and personal information\n        </p>\n      </div>\n\n      <div className=\"grid gap-6\">\n        {/* Profile Overview */}\n        <Card>\n          <CardHeader className=\"pb-4\">\n            <div className=\"flex items-center space-x-4\">\n              <Avatar className=\"w-16 h-16\">\n                <AvatarFallback className=\"text-lg font-semibold bg-primary text-primary-foreground\">\n                  {initials}\n                </AvatarFallback>\n              </Avatar>\n              <div>\n                <CardTitle className=\"text-xl\">{user.firstName} {user.lastName}</CardTitle>\n                <CardDescription>{user.email}</CardDescription>\n                <div className=\"flex items-center mt-1\">\n                  <span className={`inline-flex px-2 py-1 text-xs rounded-full ${\n                    user.role === 'admin' \n                      ? 'bg-purple-100 text-purple-800' \n                      : 'bg-green-100 text-green-800'\n                  }`}>\n                    {user.role === 'admin' ? 'Administrator' : 'Customer'}\n                  </span>\n                </div>\n              </div>\n              <div className=\"ml-auto\">\n                {!isEditing ? (\n                  <Button variant=\"outline\" onClick={() => setIsEditing(true)}>\n                    <Edit className=\"w-4 h-4 mr-2\" />\n                    Edit Profile\n                  </Button>\n                ) : (\n                  <div className=\"flex space-x-2\">\n                    <Button onClick={handleSave}>\n                      <Save className=\"w-4 h-4 mr-2\" />\n                      Save\n                    </Button>\n                    <Button variant=\"outline\" onClick={handleCancel}>\n                      <X className=\"w-4 h-4 mr-2\" />\n                      Cancel\n                    </Button>\n                  </div>\n                )}\n              </div>\n            </div>\n          </CardHeader>\n        </Card>\n\n        {/* Personal Information */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <User className=\"w-5 h-5 mr-2\" />\n              Personal Information\n            </CardTitle>\n            <CardDescription>\n              Your personal details and contact information\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"firstName\">First Name</Label>\n                <Input\n                  id=\"firstName\"\n                  value={formData.firstName}\n                  onChange={(e) => handleInputChange('firstName', e.target.value)}\n                  disabled={!isEditing}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"lastName\">Last Name</Label>\n                <Input\n                  id=\"lastName\"\n                  value={formData.lastName}\n                  onChange={(e) => handleInputChange('lastName', e.target.value)}\n                  disabled={!isEditing}\n                />\n              </div>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                value={formData.email}\n                onChange={(e) => handleInputChange('email', e.target.value)}\n                disabled={!isEditing}\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"phone\">Phone Number</Label>\n              <Input\n                id=\"phone\"\n                type=\"tel\"\n                value={formData.phone}\n                onChange={(e) => handleInputChange('phone', e.target.value)}\n                disabled={!isEditing}\n                placeholder=\"Enter your phone number\"\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"address\">Address</Label>\n              <Input\n                id=\"address\"\n                value={formData.address}\n                onChange={(e) => handleInputChange('address', e.target.value)}\n                disabled={!isEditing}\n                placeholder=\"Enter your address\"\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Account Actions */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Account Actions</CardTitle>\n            <CardDescription>\n              Manage your account settings and preferences\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex flex-col space-y-2\">\n              <Button variant=\"outline\" className=\"justify-start\">\n                <Mail className=\"w-4 h-4 mr-2\" />\n                Change Password\n              </Button>\n              <Separator />\n              <Button \n                variant=\"destructive\" \n                onClick={signOut}\n                className=\"justify-start\"\n              >\n                Sign Out\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":7051},"client/src/pages/admin/index.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Package, FileEdit, Plus, Trash2, ArrowLeft, Search, \n  Filter, Grid, List, Eye, Edit, Save, X, \n  Home, PawPrint, BookOpen\n} from \"lucide-react\";\n\ninterface Product {\n  id: string;\n  name: string;\n  description: string;\n  price: number;\n  category: string;\n  brand: string;\n  image: string;\n  stock: number;\n  rating: number;\n  status: 'active' | 'inactive' | 'out_of_stock';\n}\n\ninterface BlogPost {\n  id: string;\n  title: string;\n  excerpt: string;\n  content: string;\n  category: string;\n  author: string;\n  publishedAt: string;\n  status: 'draft' | 'published';\n}\n\nconst CATEGORIES = [\n  { id: 'cat-food', name: 'Cat Food' },\n  { id: 'dog-food', name: 'Dog Food' },\n  { id: 'cat-toys', name: 'Cat Toys' },\n  { id: 'cat-litter', name: 'Cat Litter' },\n  { id: 'reflex-brand', name: 'Reflex Brand' }\n];\n\nconst BRANDS = [\n  'Reflex', 'Royal Canin', 'Hill\\'s', 'Purina', 'Whiskas', 'Pedigree', 'Others'\n];\n\nexport default function AdminPage() {\n  const { user, signOut } = useAuth();\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState('products');\n  const [products, setProducts] = useState<Product[]>([]);\n  const [blogPosts, setBlogPosts] = useState<BlogPost[]>([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState('all');\n  const [viewMode, setViewMode] = useState<'grid' | 'list'>('list');\n  const [editingProduct, setEditingProduct] = useState<Product | null>(null);\n  const [editingBlog, setEditingBlog] = useState<BlogPost | null>(null);\n  const [showProductDialog, setShowProductDialog] = useState(false);\n  const [showBlogDialog, setShowBlogDialog] = useState(false);\n\n  // Initialize sample data\n  useEffect(() => {\n    const sampleProducts: Product[] = [\n      {\n        id: '1',\n        name: 'Premium Dry Cat Food - Adult',\n        description: 'High-quality nutrition for adult cats with real chicken',\n        price: 2500,\n        category: 'cat-food',\n        brand: 'Reflex',\n        image: '/api/placeholder/300/300',\n        stock: 150,\n        rating: 4.8,\n        status: 'active'\n      },\n      {\n        id: '2',\n        name: 'Interactive Feather Wand Toy',\n        description: 'Engaging toy for active play and exercise',\n        price: 450,\n        category: 'cat-toys',\n        brand: 'Others',\n        image: '/api/placeholder/300/300',\n        stock: 75,\n        rating: 4.6,\n        status: 'active'\n      },\n      {\n        id: '3',\n        name: 'Premium Puppy Formula',\n        description: 'Specially formulated for growing puppies',\n        price: 3200,\n        category: 'dog-food',\n        brand: 'Reflex',\n        image: '/api/placeholder/300/300',\n        stock: 0,\n        rating: 4.9,\n        status: 'out_of_stock'\n      },\n      {\n        id: '4',\n        name: 'Clumping Cat Litter - Premium',\n        description: 'Superior odor control and easy cleanup',\n        price: 1800,\n        category: 'cat-litter',\n        brand: 'Others',\n        image: '/api/placeholder/300/300',\n        stock: 89,\n        rating: 4.7,\n        status: 'active'\n      }\n    ];\n\n    const sampleBlogs: BlogPost[] = [\n      {\n        id: '1',\n        title: 'Complete Guide to Cat Nutrition',\n        excerpt: 'Everything you need to know about feeding your feline friend',\n        content: 'Proper nutrition is essential for your cat\\'s health and wellbeing...',\n        category: 'Cat Care',\n        author: 'Dr. Sarah Johnson',\n        publishedAt: '2025-01-20',\n        status: 'published'\n      },\n      {\n        id: '2',\n        title: 'Best Dog Training Tips for Beginners',\n        excerpt: 'Start your puppy training journey with these essential tips',\n        content: 'Training your dog is one of the most rewarding experiences...',\n        category: 'Dog Care',\n        author: 'Mark Wilson',\n        publishedAt: '2025-01-18',\n        status: 'published'\n      }\n    ];\n\n    setProducts(sampleProducts);\n    setBlogPosts(sampleBlogs);\n  }, []);\n\n  if (!user || user.role !== 'admin') {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-red-50 to-orange-50 flex items-center justify-center\">\n        <Card className=\"max-w-md mx-auto shadow-lg\">\n          <CardContent className=\"pt-6 text-center\">\n            <div className=\"w-16 h-16 mx-auto mb-4 bg-red-100 rounded-full flex items-center justify-center overflow-hidden\">\n              <img src=\"/logo.png\" alt=\"Meow Meow\" className=\"w-full h-full object-cover\" />\n            </div>\n            <h2 className=\"text-xl font-bold text-gray-900 mb-2\">Access Denied</h2>\n            <p className=\"text-gray-600 mb-4\">Please sign in with admin credentials</p>\n            <Link href=\"/sign-in\">\n              <Button className=\"bg-red-600 hover:bg-red-700\">\n                Go to Sign In\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const filteredProducts = products.filter(product => {\n    const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         product.description.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory = selectedCategory === 'all' || product.category === selectedCategory;\n    return matchesSearch && matchesCategory;\n  });\n\n  const handleSaveProduct = () => {\n    if (!editingProduct) return;\n    \n    if (editingProduct.id === 'new') {\n      const newProduct = { ...editingProduct, id: Date.now().toString() };\n      setProducts([...products, newProduct]);\n      toast({ title: 'Success', description: 'Product added successfully!' });\n    } else {\n      setProducts(products.map(p => p.id === editingProduct.id ? editingProduct : p));\n      toast({ title: 'Success', description: 'Product updated successfully!' });\n    }\n    \n    setEditingProduct(null);\n    setShowProductDialog(false);\n  };\n\n  const handleDeleteProduct = (productId: string) => {\n    if (confirm('Are you sure you want to delete this product?')) {\n      setProducts(products.filter(p => p.id !== productId));\n      toast({ title: 'Success', description: 'Product deleted successfully!' });\n    }\n  };\n\n  const handleSaveBlog = () => {\n    if (!editingBlog) return;\n    \n    if (editingBlog.id === 'new') {\n      const newBlog = { ...editingBlog, id: Date.now().toString() };\n      setBlogPosts([...blogPosts, newBlog]);\n      toast({ title: 'Success', description: 'Blog post added successfully!' });\n    } else {\n      setBlogPosts(blogPosts.map(b => b.id === editingBlog.id ? editingBlog : b));\n      toast({ title: 'Success', description: 'Blog post updated successfully!' });\n    }\n    \n    setEditingBlog(null);\n    setShowBlogDialog(false);\n  };\n\n  const handleDeleteBlog = (blogId: string) => {\n    if (confirm('Are you sure you want to delete this blog post?')) {\n      setBlogPosts(blogPosts.filter(b => b.id !== blogId));\n      toast({ title: 'Success', description: 'Blog post deleted successfully!' });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200 sticky top-0 z-40\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <PawPrint className=\"w-8 h-8 text-green-600\" />\n              <h1 className=\"text-xl font-semibold text-gray-800\">Admin Panel</h1>\n              <Badge className=\"bg-green-100 text-green-800\">Meow Meow Pet Shop</Badge>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <span className=\"text-sm text-gray-600\">Welcome, {user.firstName}</span>\n              <Link href=\"/\">\n                <Button size=\"sm\" variant=\"outline\" className=\"text-gray-600\">\n                  <Home className=\"w-4 h-4 mr-2\" />\n                  Store\n                </Button>\n              </Link>\n              <Button size=\"sm\" variant=\"outline\" onClick={signOut} className=\"text-red-600 border-red-200 hover:bg-red-50\">\n                Sign Out\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-2 lg:w-auto lg:grid-cols-2 bg-white border border-gray-200\">\n            <TabsTrigger value=\"products\" className=\"data-[state=active]:bg-blue-600 data-[state=active]:text-white\">\n              <Package className=\"w-4 h-4 mr-2\" />\n              Products Management\n            </TabsTrigger>\n            <TabsTrigger value=\"blogs\" className=\"data-[state=active]:bg-blue-600 data-[state=active]:text-white\">\n              <BookOpen className=\"w-4 h-4 mr-2\" />\n              Blog Management\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Products Tab */}\n          <TabsContent value=\"products\" className=\"space-y-6\">\n            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n              <div>\n                <h2 className=\"text-2xl font-bold text-gray-900\">Products Management</h2>\n                <p className=\"text-gray-600\">Manage your product catalog across all categories</p>\n              </div>\n              <Button \n                onClick={() => {\n                  setEditingProduct({\n                    id: 'new',\n                    name: '',\n                    description: '',\n                    price: 0,\n                    category: 'cat-food',\n                    brand: 'Others',\n                    image: '',\n                    stock: 0,\n                    rating: 0,\n                    status: 'active'\n                  });\n                  setShowProductDialog(true);\n                }}\n                className=\"bg-blue-600 hover:bg-blue-700\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Product\n              </Button>\n            </div>\n\n            {/* Filters */}\n            <div className=\"flex flex-col sm:flex-row gap-4 bg-white p-4 rounded-lg border\">\n              <div className=\"flex-1\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                  <Input\n                    placeholder=\"Search products...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10\"\n                  />\n                </div>\n              </div>\n              <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                <SelectTrigger className=\"w-full sm:w-48\">\n                  <SelectValue placeholder=\"Category\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Categories</SelectItem>\n                  {CATEGORIES.map(cat => (\n                    <SelectItem key={cat.id} value={cat.id}>{cat.name}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <div className=\"flex border rounded-lg\">\n                <Button\n                  variant={viewMode === 'list' ? 'default' : 'ghost'}\n                  size=\"sm\"\n                  onClick={() => setViewMode('list')}\n                  className=\"rounded-r-none\"\n                >\n                  <List className=\"w-4 h-4\" />\n                </Button>\n                <Button\n                  variant={viewMode === 'grid' ? 'default' : 'ghost'}\n                  size=\"sm\"\n                  onClick={() => setViewMode('grid')}\n                  className=\"rounded-l-none\"\n                >\n                  <Grid className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n\n            {/* Products List */}\n            <div className=\"bg-white rounded-lg border\">\n              {viewMode === 'list' ? (\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead className=\"bg-gray-50 border-b\">\n                      <tr>\n                        <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Product</th>\n                        <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Category</th>\n                        <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Price</th>\n                        <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Stock</th>\n                        <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Status</th>\n                        <th className=\"px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase\">Actions</th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"divide-y divide-gray-200\">\n                      {filteredProducts.map((product) => (\n                        <tr key={product.id} className=\"hover:bg-gray-50\">\n                          <td className=\"px-4 py-4\">\n                            <div className=\"flex items-center\">\n                              <img src={product.image} alt={product.name} className=\"w-12 h-12 rounded-lg object-cover mr-3\" />\n                              <div>\n                                <div className=\"font-medium text-gray-900\">{product.name}</div>\n                                <div className=\"text-sm text-gray-500\">{product.brand}</div>\n                              </div>\n                            </div>\n                          </td>\n                          <td className=\"px-4 py-4\">\n                            <Badge variant=\"outline\">\n                              {CATEGORIES.find(c => c.id === product.category)?.name}\n                            </Badge>\n                          </td>\n                          <td className=\"px-4 py-4 font-medium\">৳{product.price}</td>\n                          <td className=\"px-4 py-4\">{product.stock}</td>\n                          <td className=\"px-4 py-4\">\n                            <Badge variant={product.status === 'active' ? 'default' : 'secondary'}>\n                              {product.status === 'active' ? 'Active' : \n                               product.status === 'out_of_stock' ? 'Out of Stock' : 'Inactive'}\n                            </Badge>\n                          </td>\n                          <td className=\"px-4 py-4 text-right\">\n                            <div className=\"flex items-center justify-end space-x-2\">\n                              <Button\n                                size=\"sm\"\n                                variant=\"ghost\"\n                                onClick={() => {\n                                  setEditingProduct(product);\n                                  setShowProductDialog(true);\n                                }}\n                              >\n                                <Edit className=\"w-4 h-4\" />\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                variant=\"ghost\"\n                                className=\"text-red-600 hover:text-red-900\"\n                                onClick={() => handleDeleteProduct(product.id)}\n                              >\n                                <Trash2 className=\"w-4 h-4\" />\n                              </Button>\n                            </div>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              ) : (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 p-6\">\n                  {filteredProducts.map((product) => (\n                    <Card key={product.id} className=\"hover:shadow-lg transition-shadow\">\n                      <CardHeader className=\"pb-3\">\n                        <img src={product.image} alt={product.name} className=\"w-full h-32 object-cover rounded-lg\" />\n                        <CardTitle className=\"text-lg\">{product.name}</CardTitle>\n                        <CardDescription>{product.description}</CardDescription>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"flex justify-between items-center mb-3\">\n                          <span className=\"text-xl font-bold text-green-600\">৳{product.price}</span>\n                          <Badge variant=\"outline\">{product.brand}</Badge>\n                        </div>\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-sm text-gray-500\">Stock: {product.stock}</span>\n                          <div className=\"flex space-x-1\">\n                            <Button size=\"sm\" variant=\"ghost\" onClick={() => {\n                              setEditingProduct(product);\n                              setShowProductDialog(true);\n                            }}>\n                              <Edit className=\"w-4 h-4\" />\n                            </Button>\n                            <Button size=\"sm\" variant=\"ghost\" className=\"text-red-600\" onClick={() => handleDeleteProduct(product.id)}>\n                              <Trash2 className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              )}\n            </div>\n          </TabsContent>\n\n          {/* Blogs Tab */}\n          <TabsContent value=\"blogs\" className=\"space-y-6\">\n            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n              <div>\n                <h2 className=\"text-2xl font-bold text-gray-900\">Blog Management</h2>\n                <p className=\"text-gray-600\">Create and manage blog posts</p>\n              </div>\n              <Button \n                onClick={() => {\n                  setEditingBlog({\n                    id: 'new',\n                    title: '',\n                    excerpt: '',\n                    content: '',\n                    category: 'Pet Care',\n                    author: user.firstName || 'Admin',\n                    publishedAt: new Date().toISOString().split('T')[0],\n                    status: 'draft'\n                  });\n                  setShowBlogDialog(true);\n                }}\n                className=\"bg-purple-600 hover:bg-purple-700\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Blog Post\n              </Button>\n            </div>\n\n            <div className=\"grid gap-6\">\n              {blogPosts.map((blog) => (\n                <Card key={blog.id} className=\"hover:shadow-lg transition-shadow\">\n                  <CardHeader>\n                    <div className=\"flex justify-between items-start\">\n                      <div className=\"flex-1\">\n                        <CardTitle className=\"text-xl\">{blog.title}</CardTitle>\n                        <CardDescription className=\"mt-2\">{blog.excerpt}</CardDescription>\n                        <div className=\"flex items-center gap-4 mt-3 text-sm text-gray-500\">\n                          <span>By {blog.author}</span>\n                          <span>•</span>\n                          <span>{blog.publishedAt}</span>\n                          <Badge variant={blog.status === 'published' ? 'default' : 'secondary'}>\n                            {blog.status}\n                          </Badge>\n                        </div>\n                      </div>\n                      <div className=\"flex space-x-2\">\n                        <Button size=\"sm\" variant=\"ghost\" onClick={() => {\n                          setEditingBlog(blog);\n                          setShowBlogDialog(true);\n                        }}>\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                        <Button size=\"sm\" variant=\"ghost\" className=\"text-red-600\" onClick={() => handleDeleteBlog(blog.id)}>\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardHeader>\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      {/* Product Dialog */}\n      <Dialog open={showProductDialog} onOpenChange={setShowProductDialog}>\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>\n              {editingProduct?.id === 'new' ? 'Add New Product' : 'Edit Product'}\n            </DialogTitle>\n            <DialogDescription>\n              {editingProduct?.id === 'new' ? 'Create a new product for your store' : 'Update product information'}\n            </DialogDescription>\n          </DialogHeader>\n          \n          {editingProduct && (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"name\">Product Name</Label>\n                  <Input\n                    id=\"name\"\n                    value={editingProduct.name}\n                    onChange={(e) => setEditingProduct({...editingProduct, name: e.target.value})}\n                    placeholder=\"Enter product name\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"price\">Price (৳)</Label>\n                  <Input\n                    id=\"price\"\n                    type=\"number\"\n                    value={editingProduct.price}\n                    onChange={(e) => setEditingProduct({...editingProduct, price: parseInt(e.target.value) || 0})}\n                    placeholder=\"0\"\n                  />\n                </div>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"description\">Description</Label>\n                <Textarea\n                  id=\"description\"\n                  value={editingProduct.description}\n                  onChange={(e) => setEditingProduct({...editingProduct, description: e.target.value})}\n                  placeholder=\"Enter product description\"\n                  rows={3}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-3 gap-4\">\n                <div>\n                  <Label htmlFor=\"category\">Category</Label>\n                  <Select value={editingProduct.category} onValueChange={(value) => setEditingProduct({...editingProduct, category: value})}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {CATEGORIES.map(cat => (\n                        <SelectItem key={cat.id} value={cat.id}>{cat.name}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"brand\">Brand</Label>\n                  <Select value={editingProduct.brand} onValueChange={(value) => setEditingProduct({...editingProduct, brand: value})}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {BRANDS.map(brand => (\n                        <SelectItem key={brand} value={brand}>{brand}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"stock\">Stock</Label>\n                  <Input\n                    id=\"stock\"\n                    type=\"number\"\n                    value={editingProduct.stock}\n                    onChange={(e) => setEditingProduct({...editingProduct, stock: parseInt(e.target.value) || 0})}\n                    placeholder=\"0\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"image\">Image URL</Label>\n                  <Input\n                    id=\"image\"\n                    value={editingProduct.image}\n                    onChange={(e) => setEditingProduct({...editingProduct, image: e.target.value})}\n                    placeholder=\"https://example.com/image.jpg\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"status\">Status</Label>\n                  <Select value={editingProduct.status} onValueChange={(value) => setEditingProduct({...editingProduct, status: value as any})}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"active\">Active</SelectItem>\n                      <SelectItem value=\"inactive\">Inactive</SelectItem>\n                      <SelectItem value=\"out_of_stock\">Out of Stock</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </div>\n          )}\n\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowProductDialog(false)}>\n              Cancel\n            </Button>\n            <Button onClick={handleSaveProduct} className=\"bg-blue-600 hover:bg-blue-700\">\n              <Save className=\"w-4 h-4 mr-2\" />\n              Save Product\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Blog Dialog */}\n      <Dialog open={showBlogDialog} onOpenChange={setShowBlogDialog}>\n        <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>\n              {editingBlog?.id === 'new' ? 'Add New Blog Post' : 'Edit Blog Post'}\n            </DialogTitle>\n            <DialogDescription>\n              {editingBlog?.id === 'new' ? 'Create a new blog post' : 'Update blog post'}\n            </DialogDescription>\n          </DialogHeader>\n          \n          {editingBlog && (\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"blog-title\">Title</Label>\n                <Input\n                  id=\"blog-title\"\n                  value={editingBlog.title}\n                  onChange={(e) => setEditingBlog({...editingBlog, title: e.target.value})}\n                  placeholder=\"Enter blog title\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"blog-excerpt\">Excerpt</Label>\n                <Input\n                  id=\"blog-excerpt\"\n                  value={editingBlog.excerpt}\n                  onChange={(e) => setEditingBlog({...editingBlog, excerpt: e.target.value})}\n                  placeholder=\"Brief description of the blog post\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"blog-content\">Content</Label>\n                <Textarea\n                  id=\"blog-content\"\n                  value={editingBlog.content}\n                  onChange={(e) => setEditingBlog({...editingBlog, content: e.target.value})}\n                  placeholder=\"Write your blog content here...\"\n                  rows={8}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-3 gap-4\">\n                <div>\n                  <Label htmlFor=\"blog-category\">Category</Label>\n                  <Input\n                    id=\"blog-category\"\n                    value={editingBlog.category}\n                    onChange={(e) => setEditingBlog({...editingBlog, category: e.target.value})}\n                    placeholder=\"Pet Care\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"blog-author\">Author</Label>\n                  <Input\n                    id=\"blog-author\"\n                    value={editingBlog.author}\n                    onChange={(e) => setEditingBlog({...editingBlog, author: e.target.value})}\n                    placeholder=\"Author name\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"blog-status\">Status</Label>\n                  <Select value={editingBlog.status} onValueChange={(value) => setEditingBlog({...editingBlog, status: value as any})}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"draft\">Draft</SelectItem>\n                      <SelectItem value=\"published\">Published</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </div>\n          )}\n\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowBlogDialog(false)}>\n              Cancel\n            </Button>\n            <Button onClick={handleSaveBlog} className=\"bg-purple-600 hover:bg-purple-700\">\n              <Save className=\"w-4 h-4 mr-2\" />\n              Save Blog Post\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":30384},"client/src/pages/admin/products.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Switch } from '@/components/ui/switch';\nimport { Plus, Edit, Trash2, Search } from 'lucide-react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { queryClient, apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport Header from '@/components/layout/header';\n\n// Form validation schema\nconst productFormSchema = z.object({\n  name: z.string().min(1, 'Product name is required'),\n  description: z.string().min(1, 'Description is required'),\n  price: z.string().min(1, 'Price is required'),\n  originalPrice: z.string().optional(),\n  categoryId: z.string().min(1, 'Category is required'),\n  brandId: z.string().min(1, 'Brand is required'),\n  image: z.string().url('Must be a valid URL'),\n  stockQuantity: z.number().min(0, 'Stock quantity must be non-negative'),\n  tags: z.string().optional(),\n  isNew: z.boolean().optional(),\n  isBestseller: z.boolean().optional(),\n  isOnSale: z.boolean().optional(),\n  isActive: z.boolean().optional(),\n});\n\ntype ProductFormData = z.infer<typeof productFormSchema>;\n\nexport default function AdminProductsPage() {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [editingProduct, setEditingProduct] = useState<any>(null);\n  const { toast } = useToast();\n\n  // Fetch products, categories, and brands\n  const { data: products = [], isLoading: isLoadingProducts } = useQuery({\n    queryKey: ['/api/products'],\n  });\n\n  const { data: categories = [] } = useQuery({\n    queryKey: ['/api/categories'],\n  });\n\n  const { data: brands = [] } = useQuery({\n    queryKey: ['/api/brands'],\n  });\n\n  // Form for product creation/editing\n  const form = useForm<ProductFormData>({\n    resolver: zodResolver(productFormSchema),\n    defaultValues: {\n      name: '',\n      description: '',\n      price: '',\n      originalPrice: '',\n      categoryId: '',\n      brandId: '',\n      image: '',\n      stockQuantity: 0,\n      tags: '',\n      isNew: false,\n      isBestseller: false,\n      isOnSale: false,\n      isActive: true,\n    },\n  });\n\n  // Create product mutation\n  const createProductMutation = useMutation({\n    mutationFn: async (data: ProductFormData) => {\n      const payload = {\n        ...data,\n        tags: data.tags ? data.tags.split(',').map(tag => tag.trim()) : [],\n      };\n      const response = await fetch('/api/products', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payload),\n      });\n      if (!response.ok) throw new Error('Failed to create product');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n      setIsCreateDialogOpen(false);\n      form.reset();\n      toast({\n        title: 'Success',\n        description: 'Product created successfully',\n      });\n    },\n    onError: () => {\n      toast({\n        title: 'Error',\n        description: 'Failed to create product',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Update product mutation\n  const updateProductMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: ProductFormData }) => {\n      const payload = {\n        ...data,\n        tags: data.tags ? data.tags.split(',').map(tag => tag.trim()) : [],\n      };\n      const response = await fetch(`/api/products/${id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payload),\n      });\n      if (!response.ok) throw new Error('Failed to update product');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n      setEditingProduct(null);\n      form.reset();\n      toast({\n        title: 'Success',\n        description: 'Product updated successfully',\n      });\n    },\n    onError: () => {\n      toast({\n        title: 'Error',\n        description: 'Failed to update product',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Delete product mutation\n  const deleteProductMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await fetch(`/api/products/${id}`, {\n        method: 'DELETE',\n      });\n      if (!response.ok) throw new Error('Failed to delete product');\n      return response.ok;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n      toast({\n        title: 'Success',\n        description: 'Product deleted successfully',\n      });\n    },\n    onError: () => {\n      toast({\n        title: 'Error',\n        description: 'Failed to delete product',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Filter products based on search\n  const filteredProducts = (products as any[]).filter((product: any) =>\n    product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    product.description?.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const handleCreateProduct = (data: ProductFormData) => {\n    createProductMutation.mutate(data);\n  };\n\n  const handleUpdateProduct = (data: ProductFormData) => {\n    if (editingProduct) {\n      updateProductMutation.mutate({ id: editingProduct.id, data });\n    }\n  };\n\n  const handleEditProduct = (product: any) => {\n    setEditingProduct(product);\n    form.reset({\n      name: product.name,\n      description: product.description || '',\n      price: product.price,\n      originalPrice: product.originalPrice || '',\n      categoryId: product.categoryId,\n      brandId: product.brandId,\n      image: product.image,\n      stockQuantity: product.stockQuantity || 0,\n      tags: product.tags?.join(', ') || '',\n      isNew: product.isNew || false,\n      isBestseller: product.isBestseller || false,\n      isOnSale: product.isOnSale || false,\n      isActive: product.isActive !== false,\n    });\n  };\n\n  const handleDeleteProduct = (id: string) => {\n    if (confirm('Are you sure you want to delete this product?')) {\n      deleteProductMutation.mutate(id);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      \n      <div className=\"pt-24 pb-8\">\n        <div className=\"max-w-7xl mx-auto px-4\">\n          <div className=\"flex justify-between items-center mb-8\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">Product Management</h1>\n              <p className=\"text-gray-600 mt-2\">Manage your product catalog</p>\n            </div>\n            \n            <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n              <DialogTrigger asChild>\n                <Button>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Product\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n                <DialogHeader>\n                  <DialogTitle>Create New Product</DialogTitle>\n                </DialogHeader>\n                <div className=\"p-4\">\n                  <p className=\"text-sm text-gray-600 mb-4\">\n                    Fill out the form below to create a new product. All fields marked with * are required.\n                  </p>\n                  <Form {...form}>\n                    <form onSubmit={form.handleSubmit(handleCreateProduct)} className=\"space-y-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"name\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Product Name *</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Enter product name\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={form.control}\n                        name=\"description\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Description *</FormLabel>\n                            <FormControl>\n                              <Textarea placeholder=\"Enter product description\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"price\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Price *</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"2400.00\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"stockQuantity\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Stock Quantity</FormLabel>\n                              <FormControl>\n                                <Input \n                                  type=\"number\" \n                                  placeholder=\"50\" \n                                  {...field} \n                                  onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <FormField\n                        control={form.control}\n                        name=\"image\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Image URL *</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"https://example.com/image.jpg\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <div className=\"flex justify-end space-x-2\">\n                        <Button \n                          type=\"button\" \n                          variant=\"outline\" \n                          onClick={() => {\n                            setIsCreateDialogOpen(false);\n                            form.reset();\n                          }}\n                        >\n                          Cancel\n                        </Button>\n                        <Button \n                          type=\"submit\" \n                          disabled={createProductMutation.isPending}\n                        >\n                          Create Product\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          {/* Search */}\n          <Card className=\"mb-6\">\n            <CardContent className=\"p-6\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n                <Input\n                  placeholder=\"Search products...\"\n                  className=\"pl-10\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Products Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {isLoadingProducts ? (\n              Array.from({ length: 6 }).map((_, i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"h-48 bg-gray-200 rounded mb-4\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded w-2/3\"></div>\n                  </CardContent>\n                </Card>\n              ))\n            ) : (\n              filteredProducts.map((product: any) => (\n                <Card key={product.id} className=\"hover:shadow-lg transition-shadow\">\n                  <CardContent className=\"p-6\">\n                    <img \n                      src={product.image} \n                      alt={product.name}\n                      className=\"w-full h-48 object-cover rounded-lg mb-4\"\n                    />\n                    \n                    <div className=\"flex justify-between items-start mb-2\">\n                      <h3 className=\"font-semibold text-lg line-clamp-2\">{product.name}</h3>\n                      <div className=\"flex space-x-1 ml-2\">\n                        <Button \n                          size=\"sm\" \n                          variant=\"outline\"\n                          onClick={() => handleEditProduct(product)}\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <Button \n                          size=\"sm\" \n                          variant=\"destructive\"\n                          onClick={() => handleDeleteProduct(product.id)}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                    \n                    <p className=\"text-gray-600 text-sm mb-3 line-clamp-2\">{product.description}</p>\n                    \n                    <div className=\"flex justify-between items-center mb-3\">\n                      <div>\n                        <span className=\"text-lg font-bold text-green-600\">৳{parseFloat(product.price).toLocaleString()}</span>\n                        {product.originalPrice && (\n                          <span className=\"text-sm text-gray-500 line-through ml-2\">\n                            ৳{parseFloat(product.originalPrice).toLocaleString()}\n                          </span>\n                        )}\n                      </div>\n                      <Badge variant={product.stockQuantity > 0 ? \"default\" : \"destructive\"}>\n                        {product.stockQuantity > 0 ? `${product.stockQuantity} in stock` : 'Out of stock'}\n                      </Badge>\n                    </div>\n                    \n                    <div className=\"flex flex-wrap gap-1\">\n                      {product.isNew && <Badge variant=\"secondary\">New</Badge>}\n                      {product.isBestseller && <Badge variant=\"secondary\">Bestseller</Badge>}\n                      {product.isOnSale && <Badge variant=\"secondary\">On Sale</Badge>}\n                      {!product.isActive && <Badge variant=\"destructive\">Inactive</Badge>}\n                    </div>\n                  </CardContent>\n                </Card>\n              ))\n            )}\n          </div>\n\n          {filteredProducts.length === 0 && !isLoadingProducts && (\n            <div className=\"text-center py-12\">\n              <p className=\"text-gray-500 text-lg\">No products found.</p>\n              <Button \n                className=\"mt-4\"\n                onClick={() => setIsCreateDialogOpen(true)}\n              >\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Create Your First Product\n              </Button>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Edit Product Dialog */}\n      <Dialog open={!!editingProduct} onOpenChange={(open) => !open && setEditingProduct(null)}>\n        <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Edit Product</DialogTitle>\n          </DialogHeader>\n          <div className=\"p-4\">\n            <p className=\"text-sm text-gray-600 mb-4\">\n              Update the product information below.\n            </p>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(handleUpdateProduct)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Product Name *</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter product name\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description *</FormLabel>\n                      <FormControl>\n                        <Textarea placeholder=\"Enter product description\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"price\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Price *</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"2400.00\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"stockQuantity\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Stock Quantity</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            placeholder=\"50\" \n                            {...field} \n                            onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"image\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Image URL *</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"https://example.com/image.jpg\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex justify-end space-x-2\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => {\n                      setEditingProduct(null);\n                      form.reset();\n                    }}\n                  >\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={updateProductMutation.isPending}\n                  >\n                    Update Product\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":20923},"client/src/lib/auth-fallback.ts":{"content":"// Fallback authentication system for when Supabase isn't working\ninterface User {\n  id: string;\n  email: string;\n  firstName?: string;\n  lastName?: string;\n  name?: string;\n  role: string;\n}\n\nconst USERS_STORAGE_KEY = 'meow_users';\n\n// Get users from localStorage\nfunction getUsers(): User[] {\n  try {\n    const stored = localStorage.getItem(USERS_STORAGE_KEY);\n    return stored ? JSON.parse(stored) : [];\n  } catch {\n    return [];\n  }\n}\n\n// Save users to localStorage\nfunction saveUsers(users: User[]) {\n  localStorage.setItem(USERS_STORAGE_KEY, JSON.stringify(users));\n}\n\n// Fallback sign up\nexport async function fallbackSignUp(\n  email: string, \n  password: string, \n  firstName?: string, \n  lastName?: string\n) {\n  const users = getUsers();\n  \n  // Check if user already exists\n  const existingUser = users.find(u => u.email === email);\n  if (existingUser) {\n    return { \n      data: null, \n      error: { message: 'User already exists with this email' } \n    };\n  }\n  \n  // Create new user\n  const newUser: User = {\n    id: Date.now().toString(),\n    email,\n    firstName,\n    lastName,\n    name: firstName && lastName ? `${firstName} ${lastName}` : firstName || lastName || '',\n    role: 'user'\n  };\n  \n  // Store password separately (in real app, this would be hashed)\n  const passwords = JSON.parse(localStorage.getItem('meow_passwords') || '{}');\n  passwords[email] = password;\n  localStorage.setItem('meow_passwords', JSON.stringify(passwords));\n  \n  users.push(newUser);\n  saveUsers(users);\n  \n  // Store as current user\n  localStorage.setItem('auth_user', JSON.stringify(newUser));\n  \n  return { \n    data: { user: newUser }, \n    error: null \n  };\n}\n\n// Fallback sign in\nexport async function fallbackSignIn(email: string, password: string) {\n  const users = getUsers();\n  const passwords = JSON.parse(localStorage.getItem('meow_passwords') || '{}');\n  \n  const user = users.find(u => u.email === email);\n  if (!user || passwords[email] !== password) {\n    return { \n      data: null, \n      error: { message: 'Invalid email or password' } \n    };\n  }\n  \n  // Store as current user\n  localStorage.setItem('auth_user', JSON.stringify(user));\n  \n  return { \n    data: { user }, \n    error: null \n  };\n}","size_bytes":2218},"client/src/pages/dashboard.tsx":{"content":"import { useState, useEffect } from 'react'\nimport { useAuth } from '@/hooks/use-auth'\nimport { useLocation, Link } from 'wouter'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'\nimport { Button } from '@/components/ui/button'\nimport { Separator } from '@/components/ui/separator'\nimport { Badge } from '@/components/ui/badge'\nimport { \n  User, \n  Package, \n  Heart, \n  MapPin, \n  Gift, \n  HelpCircle, \n  Phone, \n  MessageCircle, \n  LogOut,\n  Wallet,\n  ShoppingBag,\n  Clock,\n  CheckCircle,\n  Truck,\n  Star,\n  CreditCard\n} from 'lucide-react'\n\ninterface Order {\n  id: string\n  date: string\n  status: 'delivered' | 'pending' | 'processing'\n  total: number\n  items: { name: string; quantity: number; price: number }[]\n}\n\ninterface UserStats {\n  totalSpent: number\n  walletBalance: number\n  wishlistCount: number\n  deliveredOrders: number\n  pendingOrders: number\n  processingOrders: number\n  activeCoupons: number\n  requestedProducts: number\n}\n\nexport default function DashboardPage() {\n  const { user, signOut } = useAuth()\n  const [, setLocation] = useLocation()\n  const [activeSection, setActiveSection] = useState('dashboard')\n\n  const [userStats, setUserStats] = useState<UserStats>({\n    totalSpent: 1250.50,\n    walletBalance: 0,\n    wishlistCount: 15,\n    deliveredOrders: 8,\n    pendingOrders: 2,\n    processingOrders: 1,\n    activeCoupons: 4,\n    requestedProducts: 0\n  })\n\n  const [recentOrders, setRecentOrders] = useState<Order[]>([\n    {\n      id: 'ORD-2025-001',\n      date: '2025-01-27',\n      status: 'delivered',\n      total: 89.99,\n      items: [\n        { name: 'Royal Canin Cat Food 2kg', quantity: 1, price: 45.99 },\n        { name: 'Cat Interactive Toy', quantity: 2, price: 22.00 }\n      ]\n    },\n    {\n      id: 'ORD-2025-002',\n      date: '2025-01-25',\n      status: 'processing',\n      total: 156.50,\n      items: [\n        { name: 'Premium Dog Food 5kg', quantity: 1, price: 78.50 },\n        { name: 'Dog Grooming Kit', quantity: 1, price: 78.00 }\n      ]\n    },\n    {\n      id: 'ORD-2025-003',\n      date: '2025-01-20',\n      status: 'pending',\n      total: 234.75,\n      items: [\n        { name: 'Cat Litter Premium 10kg', quantity: 2, price: 89.90 },\n        { name: 'Cat Tree Large', quantity: 1, price: 144.85 }\n      ]\n    }\n  ])\n\n  useEffect(() => {\n    if (!user) {\n      setLocation('/sign-in')\n    }\n  }, [user, setLocation])\n\n  if (!user) return null\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'delivered': return 'bg-green-100 text-green-800'\n      case 'processing': return 'bg-blue-100 text-blue-800'\n      case 'pending': return 'bg-yellow-100 text-yellow-800'\n      default: return 'bg-gray-100 text-gray-800'\n    }\n  }\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'delivered': return <CheckCircle className=\"h-4 w-4\" />\n      case 'processing': return <Clock className=\"h-4 w-4\" />\n      case 'pending': return <Truck className=\"h-4 w-4\" />\n      default: return <Package className=\"h-4 w-4\" />\n    }\n  }\n\n  const handleSignOut = async () => {\n    await signOut()\n    setLocation('/')\n  }\n\n  const menuItems = [\n    { key: 'dashboard', icon: <User className=\"h-4 w-4\" />, label: 'Dashboard' },\n    { key: 'profile', icon: <User className=\"h-4 w-4\" />, label: 'My Profile' },\n    { key: 'orders', icon: <ShoppingBag className=\"h-4 w-4\" />, label: 'My Orders' },\n    { key: 'wishlist', icon: <Heart className=\"h-4 w-4\" />, label: 'My Wishlist' },\n    { key: 'requests', icon: <MessageCircle className=\"h-4 w-4\" />, label: 'Track Requests' },\n    { key: 'address', icon: <MapPin className=\"h-4 w-4\" />, label: 'My Address' },\n    { key: 'coupons', icon: <Gift className=\"h-4 w-4\" />, label: 'My Coupons' },\n    { key: 'rewards', icon: <Star className=\"h-4 w-4\" />, label: 'Reward Points' },\n    { key: 'refer', icon: <User className=\"h-4 w-4\" />, label: 'Refer a Friend' },\n    { key: 'newsletter', icon: <MessageCircle className=\"h-4 w-4\" />, label: 'Newsletters' },\n    { key: 'savings', icon: <CreditCard className=\"h-4 w-4\" />, label: 'Savings Plan' },\n  ]\n\n  const helpItems = [\n    { key: 'faq', icon: <HelpCircle className=\"h-4 w-4\" />, label: 'FAQ' },\n    { key: 'call', icon: <Phone className=\"h-4 w-4\" />, label: 'Call to Order' },\n    { key: 'support', icon: <MessageCircle className=\"h-4 w-4\" />, label: 'Customer Support' },\n    { key: 'chat', icon: <MessageCircle className=\"h-4 w-4\" />, label: 'Chat in Messenger' },\n  ]\n\n  const renderDashboard = () => (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center space-x-4\">\n        <Avatar className=\"h-16 w-16\">\n          <AvatarImage src=\"/api/placeholder/64/64\" />\n          <AvatarFallback className=\"bg-green-100 text-green-800 text-lg\">\n            {user.firstName?.[0] || user.name?.[0] || user.email[0].toUpperCase()}\n          </AvatarFallback>\n        </Avatar>\n        <div>\n          <h2 className=\"text-2xl font-bold\">Hello {user.firstName || user.name || 'User'}!</h2>\n          <p className=\"text-gray-600\">\n            From your account dashboard you can easily manage your profile by checking your orders history, \n            reward points lists, your wishlists, coupons info\n          </p>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card className=\"bg-gradient-to-r from-yellow-400 to-orange-500 text-white\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium\">TOTAL SPENT</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold\">${userStats.totalSpent.toFixed(2)}</div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-r from-green-400 to-emerald-500 text-white\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium\">TOTAL WALLET</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold\">{userStats.walletBalance}</div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-r from-pink-400 to-rose-500 text-white\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium\">TOTAL WISHLIST</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold\">{userStats.wishlistCount}</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Order Stats */}\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n        <Card className=\"text-center\">\n          <CardHeader className=\"pb-2\">\n            <CheckCircle className=\"h-8 w-8 text-green-600 mx-auto\" />\n            <CardTitle className=\"text-sm text-gray-600\">DELIVERED ORDER</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{userStats.deliveredOrders}</div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"text-center\">\n          <CardHeader className=\"pb-2\">\n            <Truck className=\"h-8 w-8 text-blue-600 mx-auto\" />\n            <CardTitle className=\"text-sm text-gray-600\">PENDING ORDER</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{userStats.pendingOrders}</div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"text-center\">\n          <CardHeader className=\"pb-2\">\n            <Clock className=\"h-8 w-8 text-yellow-600 mx-auto\" />\n            <CardTitle className=\"text-sm text-gray-600\">PROCESSING ORDER</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{userStats.processingOrders}</div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"text-center\">\n          <CardHeader className=\"pb-2\">\n            <Gift className=\"h-8 w-8 text-purple-600 mx-auto\" />\n            <CardTitle className=\"text-sm text-gray-600\">ACTIVE COUPON</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{userStats.activeCoupons}</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card className=\"text-center\">\n        <CardHeader className=\"pb-2\">\n          <MessageCircle className=\"h-8 w-8 text-indigo-600 mx-auto\" />\n          <CardTitle className=\"text-sm text-gray-600\">REQUEST PRODUCT</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold\">{userStats.requestedProducts}</div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n\n  const renderOrders = () => (\n    <div className=\"space-y-6\">\n      <h2 className=\"text-2xl font-bold\">My Orders</h2>\n      <div className=\"space-y-4\">\n        {recentOrders.map((order) => (\n          <Card key={order.id} className=\"p-4\">\n            <div className=\"flex justify-between items-start mb-4\">\n              <div>\n                <h3 className=\"font-semibold\">{order.id}</h3>\n                <p className=\"text-sm text-gray-600\">{new Date(order.date).toLocaleDateString()}</p>\n              </div>\n              <div className=\"text-right\">\n                <Badge className={`${getStatusColor(order.status)} mb-2`}>\n                  <div className=\"flex items-center space-x-1\">\n                    {getStatusIcon(order.status)}\n                    <span className=\"capitalize\">{order.status}</span>\n                  </div>\n                </Badge>\n                <p className=\"font-bold\">${order.total.toFixed(2)}</p>\n              </div>\n            </div>\n            <div className=\"space-y-2\">\n              {order.items.map((item, index) => (\n                <div key={index} className=\"flex justify-between text-sm\">\n                  <span>{item.name} x{item.quantity}</span>\n                  <span>${item.price.toFixed(2)}</span>\n                </div>\n              ))}\n            </div>\n            <div className=\"mt-4 flex space-x-2\">\n              <Button variant=\"outline\" size=\"sm\">View Details</Button>\n              <Button variant=\"outline\" size=\"sm\">Track Order</Button>\n            </div>\n          </Card>\n        ))}\n      </div>\n    </div>\n  )\n\n  const renderProfile = () => (\n    <div className=\"space-y-6\">\n      <h2 className=\"text-2xl font-bold\">My Profile</h2>\n      <Card className=\"p-6\">\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center space-x-4\">\n            <Avatar className=\"h-20 w-20\">\n              <AvatarFallback className=\"bg-green-100 text-green-800 text-xl\">\n                {user.firstName?.[0] || user.name?.[0] || user.email[0].toUpperCase()}\n              </AvatarFallback>\n            </Avatar>\n            <div className=\"space-y-1\">\n              <h3 className=\"text-xl font-semibold\">{user.firstName && user.lastName ? `${user.firstName} ${user.lastName}` : user.name || 'User'}</h3>\n              <p className=\"text-gray-600\">{user.email}</p>\n              <Button variant=\"outline\" size=\"sm\">Edit Profile</Button>\n            </div>\n          </div>\n          <Separator />\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"text-sm font-medium text-gray-700\">First Name</label>\n              <p className=\"mt-1\">{user.firstName || 'Not set'}</p>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium text-gray-700\">Last Name</label>\n              <p className=\"mt-1\">{user.lastName || 'Not set'}</p>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium text-gray-700\">Email</label>\n              <p className=\"mt-1\">{user.email}</p>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium text-gray-700\">Member Since</label>\n              <p className=\"mt-1\">January 2025</p>\n            </div>\n          </div>\n        </div>\n      </Card>\n    </div>\n  )\n\n  const renderContent = () => {\n    switch (activeSection) {\n      case 'dashboard':\n        return renderDashboard()\n      case 'orders':\n        return renderOrders()\n      case 'profile':\n        return renderProfile()\n      case 'wishlist':\n        return <div><h2 className=\"text-2xl font-bold\">My Wishlist</h2><p>Your saved items will appear here.</p></div>\n      default:\n        return <div><h2 className=\"text-2xl font-bold\">Coming Soon</h2><p>This feature is under development.</p></div>\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"flex flex-col lg:flex-row gap-8\">\n          {/* Sidebar */}\n          <div className=\"w-full lg:w-80\">\n            <Card className=\"p-4\">\n              {/* User Info */}\n              <div className=\"flex items-center space-x-3 mb-6\">\n                <Avatar>\n                  <AvatarFallback className=\"bg-green-100 text-green-800\">\n                    {user.firstName?.[0] || user.name?.[0] || user.email[0].toUpperCase()}\n                  </AvatarFallback>\n                </Avatar>\n                <div>\n                  <h3 className=\"font-semibold\">{user.firstName || user.name || 'User'}</h3>\n                  <p className=\"text-sm text-gray-600\">{user.email}</p>\n                </div>\n              </div>\n\n              {/* QR Code Section */}\n              <div className=\"bg-gray-100 p-4 rounded-lg mb-6 text-center\">\n                <div className=\"w-16 h-16 bg-gray-300 mx-auto mb-2 rounded\"></div>\n                <p className=\"text-xs text-gray-600\">Scan QR for mobile app</p>\n                <Button variant=\"outline\" size=\"sm\" className=\"mt-2\">Manage Rewards</Button>\n              </div>\n\n              {/* Navigation */}\n              <div className=\"space-y-2\">\n                <h4 className=\"font-semibold text-purple-700 mb-3\">My Account</h4>\n                {menuItems.map((item) => (\n                  <button\n                    key={item.key}\n                    onClick={() => setActiveSection(item.key)}\n                    className={`w-full flex items-center space-x-2 p-2 rounded-lg text-left hover:bg-gray-100 ${\n                      activeSection === item.key ? 'bg-purple-100 text-purple-700' : 'text-gray-700'\n                    }`}\n                  >\n                    {item.icon}\n                    <span className=\"text-sm\">{item.label}</span>\n                  </button>\n                ))}\n\n                <Separator className=\"my-4\" />\n\n                <h4 className=\"font-semibold text-gray-700 mb-3\">Help</h4>\n                {helpItems.map((item) => (\n                  <button\n                    key={item.key}\n                    className=\"w-full flex items-center space-x-2 p-2 rounded-lg text-left hover:bg-gray-100 text-gray-700\"\n                  >\n                    {item.icon}\n                    <span className=\"text-sm\">{item.label}</span>\n                  </button>\n                ))}\n\n                <Separator className=\"my-4\" />\n\n                <button\n                  onClick={handleSignOut}\n                  className=\"w-full flex items-center space-x-2 p-2 rounded-lg text-left hover:bg-red-50 text-red-600\"\n                >\n                  <LogOut className=\"h-4 w-4\" />\n                  <span className=\"text-sm\">Sign Out</span>\n                </button>\n              </div>\n            </Card>\n          </div>\n\n          {/* Main Content */}\n          <div className=\"flex-1\">\n            <Card className=\"p-6\">\n              {renderContent()}\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}","size_bytes":15675}}}